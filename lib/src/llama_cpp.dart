// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint, unused_element, unused_field
import 'dart:ffi' as ffi;

/// llama.cpp binding
class llama_cpp {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  llama_cpp(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  llama_cpp.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int __size,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      __size,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int __size,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      __size,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> __len,
  ) {
    return _fgetln(
      arg0,
      __len,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int __size,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int __maxlen,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      __maxlen,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int __maxlen,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      __maxlen,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>();

  ggml_abort_callback_t ggml_set_abort_callback(
    ggml_abort_callback_t callback,
  ) {
    return _ggml_set_abort_callback(
      callback,
    );
  }

  late final _ggml_set_abort_callbackPtr = _lookup<
      ffi.NativeFunction<
          ggml_abort_callback_t Function(
              ggml_abort_callback_t)>>('ggml_set_abort_callback');
  late final _ggml_set_abort_callback = _ggml_set_abort_callbackPtr
      .asFunction<ggml_abort_callback_t Function(ggml_abort_callback_t)>();

  void ggml_abort(
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _ggml_abort(
      file,
      line,
      fmt,
    );
  }

  late final _ggml_abortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('ggml_abort');
  late final _ggml_abort = _ggml_abortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ggml_status_to_string(
    ggml_status status,
  ) {
    return _ggml_status_to_string(
      status.value,
    );
  }

  late final _ggml_status_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ggml_status_to_string');
  late final _ggml_status_to_string = _ggml_status_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  double ggml_fp16_to_fp32(
    int arg0,
  ) {
    return _ggml_fp16_to_fp32(
      arg0,
    );
  }

  late final _ggml_fp16_to_fp32Ptr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ggml_fp16_t)>>(
          'ggml_fp16_to_fp32');
  late final _ggml_fp16_to_fp32 =
      _ggml_fp16_to_fp32Ptr.asFunction<double Function(int)>();

  int ggml_fp32_to_fp16(
    double arg0,
  ) {
    return _ggml_fp32_to_fp16(
      arg0,
    );
  }

  late final _ggml_fp32_to_fp16Ptr =
      _lookup<ffi.NativeFunction<ggml_fp16_t Function(ffi.Float)>>(
          'ggml_fp32_to_fp16');
  late final _ggml_fp32_to_fp16 =
      _ggml_fp32_to_fp16Ptr.asFunction<int Function(double)>();

  void ggml_fp16_to_fp32_row(
    ffi.Pointer<ggml_fp16_t> arg0,
    ffi.Pointer<ffi.Float> arg1,
    int arg2,
  ) {
    return _ggml_fp16_to_fp32_row(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_fp16_to_fp32_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_fp16_t>, ffi.Pointer<ffi.Float>,
              ffi.Int64)>>('ggml_fp16_to_fp32_row');
  late final _ggml_fp16_to_fp32_row = _ggml_fp16_to_fp32_rowPtr.asFunction<
      void Function(ffi.Pointer<ggml_fp16_t>, ffi.Pointer<ffi.Float>, int)>();

  void ggml_fp32_to_fp16_row(
    ffi.Pointer<ffi.Float> arg0,
    ffi.Pointer<ggml_fp16_t> arg1,
    int arg2,
  ) {
    return _ggml_fp32_to_fp16_row(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_fp32_to_fp16_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_fp16_t>,
              ffi.Int64)>>('ggml_fp32_to_fp16_row');
  late final _ggml_fp32_to_fp16_row = _ggml_fp32_to_fp16_rowPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_fp16_t>, int)>();

  ggml_bf16_t ggml_fp32_to_bf16(
    double arg0,
  ) {
    return _ggml_fp32_to_bf16(
      arg0,
    );
  }

  late final _ggml_fp32_to_bf16Ptr =
      _lookup<ffi.NativeFunction<ggml_bf16_t Function(ffi.Float)>>(
          'ggml_fp32_to_bf16');
  late final _ggml_fp32_to_bf16 =
      _ggml_fp32_to_bf16Ptr.asFunction<ggml_bf16_t Function(double)>();

  double ggml_bf16_to_fp32(
    ggml_bf16_t arg0,
  ) {
    return _ggml_bf16_to_fp32(
      arg0,
    );
  }

  late final _ggml_bf16_to_fp32Ptr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ggml_bf16_t)>>(
          'ggml_bf16_to_fp32');
  late final _ggml_bf16_to_fp32 =
      _ggml_bf16_to_fp32Ptr.asFunction<double Function(ggml_bf16_t)>();

  void ggml_bf16_to_fp32_row(
    ffi.Pointer<ggml_bf16_t> arg0,
    ffi.Pointer<ffi.Float> arg1,
    int arg2,
  ) {
    return _ggml_bf16_to_fp32_row(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_bf16_to_fp32_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_bf16_t>, ffi.Pointer<ffi.Float>,
              ffi.Int64)>>('ggml_bf16_to_fp32_row');
  late final _ggml_bf16_to_fp32_row = _ggml_bf16_to_fp32_rowPtr.asFunction<
      void Function(ffi.Pointer<ggml_bf16_t>, ffi.Pointer<ffi.Float>, int)>();

  void ggml_fp32_to_bf16_row_ref(
    ffi.Pointer<ffi.Float> arg0,
    ffi.Pointer<ggml_bf16_t> arg1,
    int arg2,
  ) {
    return _ggml_fp32_to_bf16_row_ref(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_fp32_to_bf16_row_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_bf16_t>,
              ffi.Int64)>>('ggml_fp32_to_bf16_row_ref');
  late final _ggml_fp32_to_bf16_row_ref =
      _ggml_fp32_to_bf16_row_refPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_bf16_t>, int)>();

  void ggml_fp32_to_bf16_row(
    ffi.Pointer<ffi.Float> arg0,
    ffi.Pointer<ggml_bf16_t> arg1,
    int arg2,
  ) {
    return _ggml_fp32_to_bf16_row(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_fp32_to_bf16_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_bf16_t>,
              ffi.Int64)>>('ggml_fp32_to_bf16_row');
  late final _ggml_fp32_to_bf16_row = _ggml_fp32_to_bf16_rowPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_bf16_t>, int)>();

  late final ffi.Pointer<ffi.Size> _GGML_TENSOR_SIZE =
      _lookup<ffi.Size>('GGML_TENSOR_SIZE');

  int get GGML_TENSOR_SIZE => _GGML_TENSOR_SIZE.value;

  bool ggml_guid_matches(
    ggml_guid_t guid_a,
    ggml_guid_t guid_b,
  ) {
    return _ggml_guid_matches(
      guid_a,
      guid_b,
    );
  }

  late final _ggml_guid_matchesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ggml_guid_t, ggml_guid_t)>>(
          'ggml_guid_matches');
  late final _ggml_guid_matches = _ggml_guid_matchesPtr
      .asFunction<bool Function(ggml_guid_t, ggml_guid_t)>();

  ffi.Pointer<ffi.Char> ggml_version() {
    return _ggml_version();
  }

  late final _ggml_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ggml_version');
  late final _ggml_version =
      _ggml_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> ggml_commit() {
    return _ggml_commit();
  }

  late final _ggml_commitPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ggml_commit');
  late final _ggml_commit =
      _ggml_commitPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void ggml_time_init() {
    return _ggml_time_init();
  }

  late final _ggml_time_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_time_init');
  late final _ggml_time_init = _ggml_time_initPtr.asFunction<void Function()>();

  int ggml_time_ms() {
    return _ggml_time_ms();
  }

  late final _ggml_time_msPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_time_ms');
  late final _ggml_time_ms = _ggml_time_msPtr.asFunction<int Function()>();

  int ggml_time_us() {
    return _ggml_time_us();
  }

  late final _ggml_time_usPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_time_us');
  late final _ggml_time_us = _ggml_time_usPtr.asFunction<int Function()>();

  int ggml_cycles() {
    return _ggml_cycles();
  }

  late final _ggml_cyclesPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_cycles');
  late final _ggml_cycles = _ggml_cyclesPtr.asFunction<int Function()>();

  int ggml_cycles_per_ms() {
    return _ggml_cycles_per_ms();
  }

  late final _ggml_cycles_per_msPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('ggml_cycles_per_ms');
  late final _ggml_cycles_per_ms =
      _ggml_cycles_per_msPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> ggml_fopen(
    ffi.Pointer<ffi.Char> fname,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _ggml_fopen(
      fname,
      mode,
    );
  }

  late final _ggml_fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('ggml_fopen');
  late final _ggml_fopen = _ggml_fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void ggml_print_object(
    ffi.Pointer<ggml_object> obj,
  ) {
    return _ggml_print_object(
      obj,
    );
  }

  late final _ggml_print_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_object>)>>(
          'ggml_print_object');
  late final _ggml_print_object = _ggml_print_objectPtr
      .asFunction<void Function(ffi.Pointer<ggml_object>)>();

  void ggml_print_objects(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_print_objects(
      ctx,
    );
  }

  late final _ggml_print_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_context>)>>(
          'ggml_print_objects');
  late final _ggml_print_objects = _ggml_print_objectsPtr
      .asFunction<void Function(ffi.Pointer<ggml_context>)>();

  int ggml_nelements(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nelements(
      tensor,
    );
  }

  late final _ggml_nelementsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nelements');
  late final _ggml_nelements =
      _ggml_nelementsPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_nrows(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nrows(
      tensor,
    );
  }

  late final _ggml_nrowsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nrows');
  late final _ggml_nrows =
      _ggml_nrowsPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_nbytes(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nbytes(
      tensor,
    );
  }

  late final _ggml_nbytesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nbytes');
  late final _ggml_nbytes =
      _ggml_nbytesPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_nbytes_pad(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_nbytes_pad(
      tensor,
    );
  }

  late final _ggml_nbytes_padPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_nbytes_pad');
  late final _ggml_nbytes_pad =
      _ggml_nbytes_padPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_blck_size(
    ggml_type type,
  ) {
    return _ggml_blck_size(
      type.value,
    );
  }

  late final _ggml_blck_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.UnsignedInt)>>(
          'ggml_blck_size');
  late final _ggml_blck_size =
      _ggml_blck_sizePtr.asFunction<int Function(int)>();

  int ggml_type_size(
    ggml_type type,
  ) {
    return _ggml_type_size(
      type.value,
    );
  }

  late final _ggml_type_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.UnsignedInt)>>(
          'ggml_type_size');
  late final _ggml_type_size =
      _ggml_type_sizePtr.asFunction<int Function(int)>();

  int ggml_row_size(
    ggml_type type,
    int ne,
  ) {
    return _ggml_row_size(
      type.value,
      ne,
    );
  }

  late final _ggml_row_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.UnsignedInt, ffi.Int64)>>(
      'ggml_row_size');
  late final _ggml_row_size =
      _ggml_row_sizePtr.asFunction<int Function(int, int)>();

  double ggml_type_sizef(
    ggml_type type,
  ) {
    return _ggml_type_sizef(
      type.value,
    );
  }

  late final _ggml_type_sizefPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.UnsignedInt)>>(
          'ggml_type_sizef');
  late final _ggml_type_sizef =
      _ggml_type_sizefPtr.asFunction<double Function(int)>();

  ffi.Pointer<ffi.Char> ggml_type_name(
    ggml_type type,
  ) {
    return _ggml_type_name(
      type.value,
    );
  }

  late final _ggml_type_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'ggml_type_name');
  late final _ggml_type_name =
      _ggml_type_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ggml_op_name(
    ggml_op op,
  ) {
    return _ggml_op_name(
      op.value,
    );
  }

  late final _ggml_op_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'ggml_op_name');
  late final _ggml_op_name =
      _ggml_op_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ggml_op_symbol(
    ggml_op op,
  ) {
    return _ggml_op_symbol(
      op.value,
    );
  }

  late final _ggml_op_symbolPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'ggml_op_symbol');
  late final _ggml_op_symbol =
      _ggml_op_symbolPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ggml_unary_op_name(
    ggml_unary_op op,
  ) {
    return _ggml_unary_op_name(
      op.value,
    );
  }

  late final _ggml_unary_op_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'ggml_unary_op_name');
  late final _ggml_unary_op_name =
      _ggml_unary_op_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ggml_glu_op_name(
    ggml_glu_op op,
  ) {
    return _ggml_glu_op_name(
      op.value,
    );
  }

  late final _ggml_glu_op_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'ggml_glu_op_name');
  late final _ggml_glu_op_name =
      _ggml_glu_op_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ggml_op_desc(
    ffi.Pointer<ggml_tensor> t,
  ) {
    return _ggml_op_desc(
      t,
    );
  }

  late final _ggml_op_descPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_op_desc');
  late final _ggml_op_desc = _ggml_op_descPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_element_size(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_element_size(
      tensor,
    );
  }

  late final _ggml_element_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_element_size');
  late final _ggml_element_size = _ggml_element_sizePtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_quantized(
    ggml_type type,
  ) {
    return _ggml_is_quantized(
      type.value,
    );
  }

  late final _ggml_is_quantizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'ggml_is_quantized');
  late final _ggml_is_quantized =
      _ggml_is_quantizedPtr.asFunction<bool Function(int)>();

  ggml_type ggml_ftype_to_ggml_type(
    ggml_ftype ftype,
  ) {
    return ggml_type.fromValue(_ggml_ftype_to_ggml_type(
      ftype.value,
    ));
  }

  late final _ggml_ftype_to_ggml_typePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Int)>>(
          'ggml_ftype_to_ggml_type');
  late final _ggml_ftype_to_ggml_type =
      _ggml_ftype_to_ggml_typePtr.asFunction<int Function(int)>();

  bool ggml_is_transposed(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_transposed(
      tensor,
    );
  }

  late final _ggml_is_transposedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_transposed');
  late final _ggml_is_transposed = _ggml_is_transposedPtr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_permuted(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_permuted(
      tensor,
    );
  }

  late final _ggml_is_permutedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_permuted');
  late final _ggml_is_permuted = _ggml_is_permutedPtr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_empty(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_empty(
      tensor,
    );
  }

  late final _ggml_is_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_empty');
  late final _ggml_is_empty =
      _ggml_is_emptyPtr.asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_scalar(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_scalar(
      tensor,
    );
  }

  late final _ggml_is_scalarPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_scalar');
  late final _ggml_is_scalar =
      _ggml_is_scalarPtr.asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_vector(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_vector(
      tensor,
    );
  }

  late final _ggml_is_vectorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_vector');
  late final _ggml_is_vector =
      _ggml_is_vectorPtr.asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_matrix(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_matrix(
      tensor,
    );
  }

  late final _ggml_is_matrixPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_matrix');
  late final _ggml_is_matrix =
      _ggml_is_matrixPtr.asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_3d(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_3d(
      tensor,
    );
  }

  late final _ggml_is_3dPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_3d');
  late final _ggml_is_3d =
      _ggml_is_3dPtr.asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  int ggml_n_dims(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_n_dims(
      tensor,
    );
  }

  late final _ggml_n_dimsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_n_dims');
  late final _ggml_n_dims =
      _ggml_n_dimsPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_contiguous(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguous(
      tensor,
    );
  }

  late final _ggml_is_contiguousPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguous');
  late final _ggml_is_contiguous = _ggml_is_contiguousPtr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_contiguous_0(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguous_0(
      tensor,
    );
  }

  late final _ggml_is_contiguous_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguous_0');
  late final _ggml_is_contiguous_0 = _ggml_is_contiguous_0Ptr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_contiguous_1(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguous_1(
      tensor,
    );
  }

  late final _ggml_is_contiguous_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguous_1');
  late final _ggml_is_contiguous_1 = _ggml_is_contiguous_1Ptr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_contiguous_2(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguous_2(
      tensor,
    );
  }

  late final _ggml_is_contiguous_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguous_2');
  late final _ggml_is_contiguous_2 = _ggml_is_contiguous_2Ptr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_contiguously_allocated(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguously_allocated(
      tensor,
    );
  }

  late final _ggml_is_contiguously_allocatedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguously_allocated');
  late final _ggml_is_contiguously_allocated =
      _ggml_is_contiguously_allocatedPtr
          .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_contiguous_channels(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguous_channels(
      tensor,
    );
  }

  late final _ggml_is_contiguous_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguous_channels');
  late final _ggml_is_contiguous_channels = _ggml_is_contiguous_channelsPtr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_is_contiguous_rows(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_is_contiguous_rows(
      tensor,
    );
  }

  late final _ggml_is_contiguous_rowsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_is_contiguous_rows');
  late final _ggml_is_contiguous_rows = _ggml_is_contiguous_rowsPtr
      .asFunction<bool Function(ffi.Pointer<ggml_tensor>)>();

  bool ggml_are_same_shape(
    ffi.Pointer<ggml_tensor> t0,
    ffi.Pointer<ggml_tensor> t1,
  ) {
    return _ggml_are_same_shape(
      t0,
      t1,
    );
  }

  late final _ggml_are_same_shapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_are_same_shape');
  late final _ggml_are_same_shape = _ggml_are_same_shapePtr.asFunction<
      bool Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  bool ggml_are_same_stride(
    ffi.Pointer<ggml_tensor> t0,
    ffi.Pointer<ggml_tensor> t1,
  ) {
    return _ggml_are_same_stride(
      t0,
      t1,
    );
  }

  late final _ggml_are_same_stridePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_are_same_stride');
  late final _ggml_are_same_stride = _ggml_are_same_stridePtr.asFunction<
      bool Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  bool ggml_can_repeat(
    ffi.Pointer<ggml_tensor> t0,
    ffi.Pointer<ggml_tensor> t1,
  ) {
    return _ggml_can_repeat(
      t0,
      t1,
    );
  }

  late final _ggml_can_repeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_can_repeat');
  late final _ggml_can_repeat = _ggml_can_repeatPtr.asFunction<
      bool Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  int ggml_tensor_overhead() {
    return _ggml_tensor_overhead();
  }

  late final _ggml_tensor_overheadPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ggml_tensor_overhead');
  late final _ggml_tensor_overhead =
      _ggml_tensor_overheadPtr.asFunction<int Function()>();

  bool ggml_validate_row_data(
    ggml_type type,
    ffi.Pointer<ffi.Void> data,
    int nbytes,
  ) {
    return _ggml_validate_row_data(
      type.value,
      data,
      nbytes,
    );
  }

  late final _ggml_validate_row_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ggml_validate_row_data');
  late final _ggml_validate_row_data = _ggml_validate_row_dataPtr
      .asFunction<bool Function(int, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ggml_context> ggml_init(
    ggml_init_params params,
  ) {
    return _ggml_init(
      params,
    );
  }

  late final _ggml_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_context> Function(ggml_init_params)>>('ggml_init');
  late final _ggml_init = _ggml_initPtr
      .asFunction<ffi.Pointer<ggml_context> Function(ggml_init_params)>();

  void ggml_reset(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_reset(
      ctx,
    );
  }

  late final _ggml_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_context>)>>(
          'ggml_reset');
  late final _ggml_reset =
      _ggml_resetPtr.asFunction<void Function(ffi.Pointer<ggml_context>)>();

  void ggml_free(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_free(
      ctx,
    );
  }

  late final _ggml_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_context>)>>(
          'ggml_free');
  late final _ggml_free =
      _ggml_freePtr.asFunction<void Function(ffi.Pointer<ggml_context>)>();

  int ggml_used_mem(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_used_mem(
      ctx,
    );
  }

  late final _ggml_used_memPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_context>)>>(
          'ggml_used_mem');
  late final _ggml_used_mem =
      _ggml_used_memPtr.asFunction<int Function(ffi.Pointer<ggml_context>)>();

  bool ggml_get_no_alloc(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_no_alloc(
      ctx,
    );
  }

  late final _ggml_get_no_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ggml_context>)>>(
          'ggml_get_no_alloc');
  late final _ggml_get_no_alloc = _ggml_get_no_allocPtr
      .asFunction<bool Function(ffi.Pointer<ggml_context>)>();

  void ggml_set_no_alloc(
    ffi.Pointer<ggml_context> ctx,
    bool no_alloc,
  ) {
    return _ggml_set_no_alloc(
      ctx,
      no_alloc,
    );
  }

  late final _ggml_set_no_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_context>, ffi.Bool)>>('ggml_set_no_alloc');
  late final _ggml_set_no_alloc = _ggml_set_no_allocPtr
      .asFunction<void Function(ffi.Pointer<ggml_context>, bool)>();

  ffi.Pointer<ffi.Void> ggml_get_mem_buffer(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_mem_buffer(
      ctx,
    );
  }

  late final _ggml_get_mem_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ggml_context>)>>('ggml_get_mem_buffer');
  late final _ggml_get_mem_buffer = _ggml_get_mem_bufferPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ggml_context>)>();

  int ggml_get_mem_size(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_mem_size(
      ctx,
    );
  }

  late final _ggml_get_mem_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_context>)>>(
          'ggml_get_mem_size');
  late final _ggml_get_mem_size = _ggml_get_mem_sizePtr
      .asFunction<int Function(ffi.Pointer<ggml_context>)>();

  int ggml_get_max_tensor_size(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_max_tensor_size(
      ctx,
    );
  }

  late final _ggml_get_max_tensor_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ggml_context>)>>(
          'ggml_get_max_tensor_size');
  late final _ggml_get_max_tensor_size = _ggml_get_max_tensor_sizePtr
      .asFunction<int Function(ffi.Pointer<ggml_context>)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor(
    ffi.Pointer<ggml_context> ctx,
    ggml_type type,
    int n_dims,
    ffi.Pointer<ffi.Int64> ne,
  ) {
    return _ggml_new_tensor(
      ctx,
      type.value,
      n_dims,
      ne,
    );
  }

  late final _ggml_new_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Int64>)>>('ggml_new_tensor');
  late final _ggml_new_tensor = _ggml_new_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, ffi.Pointer<ffi.Int64>)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_1d(
    ffi.Pointer<ggml_context> ctx,
    ggml_type type,
    int ne0,
  ) {
    return _ggml_new_tensor_1d(
      ctx,
      type.value,
      ne0,
    );
  }

  late final _ggml_new_tensor_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.UnsignedInt, ffi.Int64)>>('ggml_new_tensor_1d');
  late final _ggml_new_tensor_1d = _ggml_new_tensor_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_2d(
    ffi.Pointer<ggml_context> ctx,
    ggml_type type,
    int ne0,
    int ne1,
  ) {
    return _ggml_new_tensor_2d(
      ctx,
      type.value,
      ne0,
      ne1,
    );
  }

  late final _ggml_new_tensor_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.UnsignedInt, ffi.Int64, ffi.Int64)>>('ggml_new_tensor_2d');
  late final _ggml_new_tensor_2d = _ggml_new_tensor_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_3d(
    ffi.Pointer<ggml_context> ctx,
    ggml_type type,
    int ne0,
    int ne1,
    int ne2,
  ) {
    return _ggml_new_tensor_3d(
      ctx,
      type.value,
      ne0,
      ne1,
      ne2,
    );
  }

  late final _ggml_new_tensor_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.UnsignedInt,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_new_tensor_3d');
  late final _ggml_new_tensor_3d = _ggml_new_tensor_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_tensor_4d(
    ffi.Pointer<ggml_context> ctx,
    ggml_type type,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
  ) {
    return _ggml_new_tensor_4d(
      ctx,
      type.value,
      ne0,
      ne1,
      ne2,
      ne3,
    );
  }

  late final _ggml_new_tensor_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.UnsignedInt,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_new_tensor_4d');
  late final _ggml_new_tensor_4d = _ggml_new_tensor_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, int, int, int, int, int)>();

  ffi.Pointer<ffi.Void> ggml_new_buffer(
    ffi.Pointer<ggml_context> ctx,
    int nbytes,
  ) {
    return _ggml_new_buffer(
      ctx,
      nbytes,
    );
  }

  late final _ggml_new_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ggml_context>, ffi.Size)>>('ggml_new_buffer');
  late final _ggml_new_buffer = _ggml_new_bufferPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ggml_context>, int)>();

  ffi.Pointer<ggml_tensor> ggml_dup_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> src,
  ) {
    return _ggml_dup_tensor(
      ctx,
      src,
    );
  }

  late final _ggml_dup_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_dup_tensor');
  late final _ggml_dup_tensor = _ggml_dup_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_view_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> src,
  ) {
    return _ggml_view_tensor(
      ctx,
      src,
    );
  }

  late final _ggml_view_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_view_tensor');
  late final _ggml_view_tensor = _ggml_view_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_get_first_tensor(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_get_first_tensor(
      ctx,
    );
  }

  late final _ggml_get_first_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>)>>('ggml_get_first_tensor');
  late final _ggml_get_first_tensor = _ggml_get_first_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>)>();

  ffi.Pointer<ggml_tensor> ggml_get_next_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_next_tensor(
      ctx,
      tensor,
    );
  }

  late final _ggml_get_next_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_get_next_tensor');
  late final _ggml_get_next_tensor = _ggml_get_next_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_get_tensor(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_get_tensor(
      ctx,
      name,
    );
  }

  late final _ggml_get_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ffi.Char>)>>('ggml_get_tensor');
  late final _ggml_get_tensor = _ggml_get_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ffi.Char>)>();

  void ggml_unravel_index(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
    ffi.Pointer<ffi.Int64> i0,
    ffi.Pointer<ffi.Int64> i1,
    ffi.Pointer<ffi.Int64> i2,
    ffi.Pointer<ffi.Int64> i3,
  ) {
    return _ggml_unravel_index(
      tensor,
      i,
      i0,
      i1,
      i2,
      i3,
    );
  }

  late final _ggml_unravel_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('ggml_unravel_index');
  late final _ggml_unravel_index = _ggml_unravel_indexPtr.asFunction<
      void Function(
          ffi.Pointer<ggml_tensor>,
          int,
          ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int64>)>();

  ggml_unary_op ggml_get_unary_op(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return ggml_unary_op.fromValue(_ggml_get_unary_op(
      tensor,
    ));
  }

  late final _ggml_get_unary_opPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ggml_tensor>)>>(
      'ggml_get_unary_op');
  late final _ggml_get_unary_op = _ggml_get_unary_opPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  ggml_glu_op ggml_get_glu_op(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return ggml_glu_op.fromValue(_ggml_get_glu_op(
      tensor,
    ));
  }

  late final _ggml_get_glu_opPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ggml_tensor>)>>(
      'ggml_get_glu_op');
  late final _ggml_get_glu_op =
      _ggml_get_glu_opPtr.asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ffi.Void> ggml_get_data(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_data(
      tensor,
    );
  }

  late final _ggml_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_get_data');
  late final _ggml_get_data = _ggml_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ffi.Float> ggml_get_data_f32(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_data_f32(
      tensor,
    );
  }

  late final _ggml_get_data_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_get_data_f32');
  late final _ggml_get_data_f32 = _ggml_get_data_f32Ptr
      .asFunction<ffi.Pointer<ffi.Float> Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ffi.Char> ggml_get_name(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_get_name(
      tensor,
    );
  }

  late final _ggml_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_get_name');
  late final _ggml_get_name = _ggml_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_set_name(
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_set_name(
      tensor,
      name,
    );
  }

  late final _ggml_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Char>)>>('ggml_set_name');
  late final _ggml_set_name = _ggml_set_namePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ggml_tensor> ggml_format_name(
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _ggml_format_name(
      tensor,
      fmt,
    );
  }

  late final _ggml_format_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Char>)>>('ggml_format_name');
  late final _ggml_format_name = _ggml_format_namePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Char>)>();

  void ggml_set_input(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_input(
      tensor,
    );
  }

  late final _ggml_set_inputPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_set_input');
  late final _ggml_set_input =
      _ggml_set_inputPtr.asFunction<void Function(ffi.Pointer<ggml_tensor>)>();

  void ggml_set_output(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_output(
      tensor,
    );
  }

  late final _ggml_set_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_set_output');
  late final _ggml_set_output =
      _ggml_set_outputPtr.asFunction<void Function(ffi.Pointer<ggml_tensor>)>();

  void ggml_set_param(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_param(
      tensor,
    );
  }

  late final _ggml_set_paramPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_set_param');
  late final _ggml_set_param =
      _ggml_set_paramPtr.asFunction<void Function(ffi.Pointer<ggml_tensor>)>();

  void ggml_set_loss(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_loss(
      tensor,
    );
  }

  late final _ggml_set_lossPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_set_loss');
  late final _ggml_set_loss =
      _ggml_set_lossPtr.asFunction<void Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_dup(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_dup(
      ctx,
      a,
    );
  }

  late final _ggml_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_dup');
  late final _ggml_dup = _ggml_dupPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_dup_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_dup_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_dup_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_dup_inplace');
  late final _ggml_dup_inplace = _ggml_dup_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_add(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_add');
  late final _ggml_add = _ggml_addPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_add_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_add_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add_inplace');
  late final _ggml_add_inplace = _ggml_add_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_add_cast(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_type type,
  ) {
    return _ggml_add_cast(
      ctx,
      a,
      b,
      type.value,
    );
  }

  late final _ggml_add_castPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt)>>('ggml_add_cast');
  late final _ggml_add_cast = _ggml_add_castPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_add1(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add1(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_add1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add1');
  late final _ggml_add1 = _ggml_add1Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_add1_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_add1_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_add1_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add1_inplace');
  late final _ggml_add1_inplace = _ggml_add1_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_acc(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_acc(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_accPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_acc');
  late final _ggml_acc = _ggml_accPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_acc_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_acc_inplace(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_acc_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_acc_inplace');
  late final _ggml_acc_inplace = _ggml_acc_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_sub(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_sub(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_sub');
  late final _ggml_sub = _ggml_subPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sub_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_sub_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_sub_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sub_inplace');
  late final _ggml_sub_inplace = _ggml_sub_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_mul(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_mul(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_mul');
  late final _ggml_mul = _ggml_mulPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_mul_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_mul_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_mul_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mul_inplace');
  late final _ggml_mul_inplace = _ggml_mul_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_div(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_div(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_div');
  late final _ggml_div = _ggml_divPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_div_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_div_inplace(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_div_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_div_inplace');
  late final _ggml_div_inplace = _ggml_div_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sqr(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqr(
      ctx,
      a,
    );
  }

  late final _ggml_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqr');
  late final _ggml_sqr = _ggml_sqrPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sqr_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqr_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sqr_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqr_inplace');
  late final _ggml_sqr_inplace = _ggml_sqr_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sqrt(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqrt(
      ctx,
      a,
    );
  }

  late final _ggml_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqrt');
  late final _ggml_sqrt = _ggml_sqrtPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sqrt_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sqrt_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sqrt_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sqrt_inplace');
  late final _ggml_sqrt_inplace = _ggml_sqrt_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_log(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_log(
      ctx,
      a,
    );
  }

  late final _ggml_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_log');
  late final _ggml_log = _ggml_logPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_log_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_log_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_log_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_log_inplace');
  late final _ggml_log_inplace = _ggml_log_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sin(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sin(
      ctx,
      a,
    );
  }

  late final _ggml_sinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sin');
  late final _ggml_sin = _ggml_sinPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sin_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sin_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sin_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sin_inplace');
  late final _ggml_sin_inplace = _ggml_sin_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_cos(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_cos(
      ctx,
      a,
    );
  }

  late final _ggml_cosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cos');
  late final _ggml_cos = _ggml_cosPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_cos_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_cos_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_cos_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cos_inplace');
  late final _ggml_cos_inplace = _ggml_cos_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sum(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sum(
      ctx,
      a,
    );
  }

  late final _ggml_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sum');
  late final _ggml_sum = _ggml_sumPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sum_rows(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sum_rows(
      ctx,
      a,
    );
  }

  late final _ggml_sum_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sum_rows');
  late final _ggml_sum_rows = _ggml_sum_rowsPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_mean(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_mean(
      ctx,
      a,
    );
  }

  late final _ggml_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mean');
  late final _ggml_mean = _ggml_meanPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_argmax(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_argmax(
      ctx,
      a,
    );
  }

  late final _ggml_argmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_argmax');
  late final _ggml_argmax = _ggml_argmaxPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_count_equal(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_count_equal(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_count_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_count_equal');
  late final _ggml_count_equal = _ggml_count_equalPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_repeat(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_repeat(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_repeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_repeat');
  late final _ggml_repeat = _ggml_repeatPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_repeat_4d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
  ) {
    return _ggml_repeat_4d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
    );
  }

  late final _ggml_repeat_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_repeat_4d');
  late final _ggml_repeat_4d = _ggml_repeat_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_repeat_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_repeat_back(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_repeat_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_repeat_back');
  late final _ggml_repeat_back = _ggml_repeat_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_concat(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int dim,
  ) {
    return _ggml_concat(
      ctx,
      a,
      b,
      dim,
    );
  }

  late final _ggml_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int)>>('ggml_concat');
  late final _ggml_concat = _ggml_concatPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_abs(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_abs(
      ctx,
      a,
    );
  }

  late final _ggml_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_abs');
  late final _ggml_abs = _ggml_absPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_abs_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_abs_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_abs_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_abs_inplace');
  late final _ggml_abs_inplace = _ggml_abs_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sgn(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sgn(
      ctx,
      a,
    );
  }

  late final _ggml_sgnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sgn');
  late final _ggml_sgn = _ggml_sgnPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sgn_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sgn_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sgn_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sgn_inplace');
  late final _ggml_sgn_inplace = _ggml_sgn_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_neg(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_neg(
      ctx,
      a,
    );
  }

  late final _ggml_negPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_neg');
  late final _ggml_neg = _ggml_negPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_neg_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_neg_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_neg_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_neg_inplace');
  late final _ggml_neg_inplace = _ggml_neg_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_step(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_step(
      ctx,
      a,
    );
  }

  late final _ggml_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_step');
  late final _ggml_step = _ggml_stepPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_step_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_step_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_step_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_step_inplace');
  late final _ggml_step_inplace = _ggml_step_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_tanh(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_tanh(
      ctx,
      a,
    );
  }

  late final _ggml_tanhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_tanh');
  late final _ggml_tanh = _ggml_tanhPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_tanh_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_tanh_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_tanh_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_tanh_inplace');
  late final _ggml_tanh_inplace = _ggml_tanh_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_elu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_elu(
      ctx,
      a,
    );
  }

  late final _ggml_eluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_elu');
  late final _ggml_elu = _ggml_eluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_elu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_elu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_elu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_elu_inplace');
  late final _ggml_elu_inplace = _ggml_elu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_relu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_relu(
      ctx,
      a,
    );
  }

  late final _ggml_reluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_relu');
  late final _ggml_relu = _ggml_reluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_leaky_relu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double negative_slope,
    bool inplace,
  ) {
    return _ggml_leaky_relu(
      ctx,
      a,
      negative_slope,
      inplace,
    );
  }

  late final _ggml_leaky_reluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Bool)>>('ggml_leaky_relu');
  late final _ggml_leaky_relu = _ggml_leaky_reluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double, bool)>();

  ffi.Pointer<ggml_tensor> ggml_relu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_relu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_relu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_relu_inplace');
  late final _ggml_relu_inplace = _ggml_relu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sigmoid(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sigmoid(
      ctx,
      a,
    );
  }

  late final _ggml_sigmoidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sigmoid');
  late final _ggml_sigmoid = _ggml_sigmoidPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_sigmoid_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_sigmoid_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_sigmoid_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_sigmoid_inplace');
  late final _ggml_sigmoid_inplace = _ggml_sigmoid_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gelu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu(
      ctx,
      a,
    );
  }

  late final _ggml_geluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu');
  late final _ggml_gelu = _ggml_geluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gelu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_gelu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu_inplace');
  late final _ggml_gelu_inplace = _ggml_gelu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gelu_erf(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu_erf(
      ctx,
      a,
    );
  }

  late final _ggml_gelu_erfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu_erf');
  late final _ggml_gelu_erf = _ggml_gelu_erfPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gelu_erf_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu_erf_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_gelu_erf_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu_erf_inplace');
  late final _ggml_gelu_erf_inplace = _ggml_gelu_erf_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gelu_quick(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu_quick(
      ctx,
      a,
    );
  }

  late final _ggml_gelu_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu_quick');
  late final _ggml_gelu_quick = _ggml_gelu_quickPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gelu_quick_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_gelu_quick_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_gelu_quick_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_gelu_quick_inplace');
  late final _ggml_gelu_quick_inplace = _ggml_gelu_quick_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_silu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_silu(
      ctx,
      a,
    );
  }

  late final _ggml_siluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_silu');
  late final _ggml_silu = _ggml_siluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_silu_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_silu_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_silu_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_silu_inplace');
  late final _ggml_silu_inplace = _ggml_silu_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_silu_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_silu_back(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_silu_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_silu_back');
  late final _ggml_silu_back = _ggml_silu_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_hardswish(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_hardswish(
      ctx,
      a,
    );
  }

  late final _ggml_hardswishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_hardswish');
  late final _ggml_hardswish = _ggml_hardswishPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_hardsigmoid(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_hardsigmoid(
      ctx,
      a,
    );
  }

  late final _ggml_hardsigmoidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_hardsigmoid');
  late final _ggml_hardsigmoid = _ggml_hardsigmoidPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_exp(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_exp(
      ctx,
      a,
    );
  }

  late final _ggml_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_exp');
  late final _ggml_exp = _ggml_expPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_exp_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_exp_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_exp_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_exp_inplace');
  late final _ggml_exp_inplace = _ggml_exp_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_glu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_glu_op op,
    bool swapped,
  ) {
    return _ggml_glu(
      ctx,
      a,
      op.value,
      swapped,
    );
  }

  late final _ggml_gluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt,
              ffi.Bool)>>('ggml_glu');
  late final _ggml_glu = _ggml_gluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, bool)>();

  ffi.Pointer<ggml_tensor> ggml_reglu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_reglu(
      ctx,
      a,
    );
  }

  late final _ggml_regluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_reglu');
  late final _ggml_reglu = _ggml_regluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_reglu_swapped(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_reglu_swapped(
      ctx,
      a,
    );
  }

  late final _ggml_reglu_swappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_reglu_swapped');
  late final _ggml_reglu_swapped = _ggml_reglu_swappedPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_geglu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_geglu(
      ctx,
      a,
    );
  }

  late final _ggml_gegluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_geglu');
  late final _ggml_geglu = _ggml_gegluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_geglu_swapped(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_geglu_swapped(
      ctx,
      a,
    );
  }

  late final _ggml_geglu_swappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_geglu_swapped');
  late final _ggml_geglu_swapped = _ggml_geglu_swappedPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_swiglu(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_swiglu(
      ctx,
      a,
    );
  }

  late final _ggml_swigluPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_swiglu');
  late final _ggml_swiglu = _ggml_swigluPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_swiglu_swapped(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_swiglu_swapped(
      ctx,
      a,
    );
  }

  late final _ggml_swiglu_swappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_swiglu_swapped');
  late final _ggml_swiglu_swapped = _ggml_swiglu_swappedPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_geglu_erf(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_geglu_erf(
      ctx,
      a,
    );
  }

  late final _ggml_geglu_erfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_geglu_erf');
  late final _ggml_geglu_erf = _ggml_geglu_erfPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_geglu_erf_swapped(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_geglu_erf_swapped(
      ctx,
      a,
    );
  }

  late final _ggml_geglu_erf_swappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_geglu_erf_swapped');
  late final _ggml_geglu_erf_swapped = _ggml_geglu_erf_swappedPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_geglu_quick(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_geglu_quick(
      ctx,
      a,
    );
  }

  late final _ggml_geglu_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_geglu_quick');
  late final _ggml_geglu_quick = _ggml_geglu_quickPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_geglu_quick_swapped(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_geglu_quick_swapped(
      ctx,
      a,
    );
  }

  late final _ggml_geglu_quick_swappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_geglu_quick_swapped');
  late final _ggml_geglu_quick_swapped =
      _ggml_geglu_quick_swappedPtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_glu_split(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_glu_op op,
  ) {
    return _ggml_glu_split(
      ctx,
      a,
      b,
      op.value,
    );
  }

  late final _ggml_glu_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt)>>('ggml_glu_split');
  late final _ggml_glu_split = _ggml_glu_splitPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_reglu_split(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_reglu_split(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_reglu_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_reglu_split');
  late final _ggml_reglu_split = _ggml_reglu_splitPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_geglu_split(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_geglu_split(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_geglu_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_geglu_split');
  late final _ggml_geglu_split = _ggml_geglu_splitPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_swiglu_split(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_swiglu_split(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_swiglu_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_swiglu_split');
  late final _ggml_swiglu_split = _ggml_swiglu_splitPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_geglu_erf_split(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_geglu_erf_split(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_geglu_erf_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_geglu_erf_split');
  late final _ggml_geglu_erf_split = _ggml_geglu_erf_splitPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_geglu_quick_split(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_geglu_quick_split(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_geglu_quick_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_geglu_quick_split');
  late final _ggml_geglu_quick_split = _ggml_geglu_quick_splitPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_norm(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_norm');
  late final _ggml_norm = _ggml_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  ffi.Pointer<ggml_tensor> ggml_norm_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_norm_inplace(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_norm_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_norm_inplace');
  late final _ggml_norm_inplace = _ggml_norm_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  ffi.Pointer<ggml_tensor> ggml_rms_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_rms_norm(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_rms_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_rms_norm');
  late final _ggml_rms_norm = _ggml_rms_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  ffi.Pointer<ggml_tensor> ggml_rms_norm_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_rms_norm_inplace(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_rms_norm_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_rms_norm_inplace');
  late final _ggml_rms_norm_inplace = _ggml_rms_norm_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  ffi.Pointer<ggml_tensor> ggml_group_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_groups,
    double eps,
  ) {
    return _ggml_group_norm(
      ctx,
      a,
      n_groups,
      eps,
    );
  }

  late final _ggml_group_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Float)>>('ggml_group_norm');
  late final _ggml_group_norm = _ggml_group_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, double)>();

  ffi.Pointer<ggml_tensor> ggml_group_norm_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_groups,
    double eps,
  ) {
    return _ggml_group_norm_inplace(
      ctx,
      a,
      n_groups,
      eps,
    );
  }

  late final _ggml_group_norm_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Float)>>('ggml_group_norm_inplace');
  late final _ggml_group_norm_inplace = _ggml_group_norm_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, double)>();

  ffi.Pointer<ggml_tensor> ggml_l2_norm(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_l2_norm(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_l2_normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_l2_norm');
  late final _ggml_l2_norm = _ggml_l2_normPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  ffi.Pointer<ggml_tensor> ggml_l2_norm_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double eps,
  ) {
    return _ggml_l2_norm_inplace(
      ctx,
      a,
      eps,
    );
  }

  late final _ggml_l2_norm_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_l2_norm_inplace');
  late final _ggml_l2_norm_inplace = _ggml_l2_norm_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  ffi.Pointer<ggml_tensor> ggml_rms_norm_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    double eps,
  ) {
    return _ggml_rms_norm_back(
      ctx,
      a,
      b,
      eps,
    );
  }

  late final _ggml_rms_norm_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float)>>('ggml_rms_norm_back');
  late final _ggml_rms_norm_back = _ggml_rms_norm_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, double)>();

  ffi.Pointer<ggml_tensor> ggml_mul_mat(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_mul_mat(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_mul_matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mul_mat');
  late final _ggml_mul_mat = _ggml_mul_matPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  void ggml_mul_mat_set_prec(
    ffi.Pointer<ggml_tensor> a,
    ggml_prec prec,
  ) {
    return _ggml_mul_mat_set_prec(
      a,
      prec.value,
    );
  }

  late final _ggml_mul_mat_set_precPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt)>>('ggml_mul_mat_set_prec');
  late final _ggml_mul_mat_set_prec = _ggml_mul_mat_set_precPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_mul_mat_id(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> as$,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> ids,
  ) {
    return _ggml_mul_mat_id(
      ctx,
      as$,
      b,
      ids,
    );
  }

  late final _ggml_mul_mat_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_mul_mat_id');
  late final _ggml_mul_mat_id = _ggml_mul_mat_idPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_out_prod(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_out_prod(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_out_prodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_out_prod');
  late final _ggml_out_prod = _ggml_out_prodPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_scale(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double s,
  ) {
    return _ggml_scale(
      ctx,
      a,
      s,
    );
  }

  late final _ggml_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_scale');
  late final _ggml_scale = _ggml_scalePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  ffi.Pointer<ggml_tensor> ggml_scale_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double s,
  ) {
    return _ggml_scale_inplace(
      ctx,
      a,
      s,
    );
  }

  late final _ggml_scale_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_scale_inplace');
  late final _ggml_scale_inplace = _ggml_scale_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, double)>();

  ffi.Pointer<ggml_tensor> ggml_scale_bias(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double s,
    double b,
  ) {
    return _ggml_scale_bias(
      ctx,
      a,
      s,
      b,
    );
  }

  late final _ggml_scale_biasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Float)>>('ggml_scale_bias');
  late final _ggml_scale_bias = _ggml_scale_biasPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, double, double)>();

  ffi.Pointer<ggml_tensor> ggml_scale_bias_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double s,
    double b,
  ) {
    return _ggml_scale_bias_inplace(
      ctx,
      a,
      s,
      b,
    );
  }

  late final _ggml_scale_bias_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Float)>>('ggml_scale_bias_inplace');
  late final _ggml_scale_bias_inplace = _ggml_scale_bias_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, double, double)>();

  ffi.Pointer<ggml_tensor> ggml_set(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_set(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_set');
  late final _ggml_set = _ggml_setPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_set_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_set_inplace(
      ctx,
      a,
      b,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_set_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_set_inplace');
  late final _ggml_set_inplace = _ggml_set_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_set_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int offset,
  ) {
    return _ggml_set_1d(
      ctx,
      a,
      b,
      offset,
    );
  }

  late final _ggml_set_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size)>>('ggml_set_1d');
  late final _ggml_set_1d = _ggml_set_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_set_1d_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int offset,
  ) {
    return _ggml_set_1d_inplace(
      ctx,
      a,
      b,
      offset,
    );
  }

  late final _ggml_set_1d_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size)>>('ggml_set_1d_inplace');
  late final _ggml_set_1d_inplace = _ggml_set_1d_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_set_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int offset,
  ) {
    return _ggml_set_2d(
      ctx,
      a,
      b,
      nb1,
      offset,
    );
  }

  late final _ggml_set_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size)>>('ggml_set_2d');
  late final _ggml_set_2d = _ggml_set_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_set_2d_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int nb1,
    int offset,
  ) {
    return _ggml_set_2d_inplace(
      ctx,
      a,
      b,
      nb1,
      offset,
    );
  }

  late final _ggml_set_2d_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Size,
              ffi.Size)>>('ggml_set_2d_inplace');
  late final _ggml_set_2d_inplace = _ggml_set_2d_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_cpy(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_cpy(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_cpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>>('ggml_cpy');
  late final _ggml_cpy = _ggml_cpyPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_cast(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_type type,
  ) {
    return _ggml_cast(
      ctx,
      a,
      type.value,
    );
  }

  late final _ggml_castPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.UnsignedInt)>>('ggml_cast');
  late final _ggml_cast = _ggml_castPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_cont(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_cont(
      ctx,
      a,
    );
  }

  late final _ggml_contPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cont');
  late final _ggml_cont = _ggml_contPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_cont_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
  ) {
    return _ggml_cont_1d(
      ctx,
      a,
      ne0,
    );
  }

  late final _ggml_cont_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int64)>>('ggml_cont_1d');
  late final _ggml_cont_1d = _ggml_cont_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_cont_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
  ) {
    return _ggml_cont_2d(
      ctx,
      a,
      ne0,
      ne1,
    );
  }

  late final _ggml_cont_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int64, ffi.Int64)>>('ggml_cont_2d');
  late final _ggml_cont_2d = _ggml_cont_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_cont_3d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
  ) {
    return _ggml_cont_3d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
    );
  }

  late final _ggml_cont_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_cont_3d');
  late final _ggml_cont_3d = _ggml_cont_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_cont_4d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
  ) {
    return _ggml_cont_4d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
    );
  }

  late final _ggml_cont_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_cont_4d');
  late final _ggml_cont_4d = _ggml_cont_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_reshape(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_reshape(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_reshapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_reshape');
  late final _ggml_reshape = _ggml_reshapePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_reshape_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
  ) {
    return _ggml_reshape_1d(
      ctx,
      a,
      ne0,
    );
  }

  late final _ggml_reshape_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int64)>>('ggml_reshape_1d');
  late final _ggml_reshape_1d = _ggml_reshape_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_reshape_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
  ) {
    return _ggml_reshape_2d(
      ctx,
      a,
      ne0,
      ne1,
    );
  }

  late final _ggml_reshape_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64)>>('ggml_reshape_2d');
  late final _ggml_reshape_2d = _ggml_reshape_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_reshape_3d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
  ) {
    return _ggml_reshape_3d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
    );
  }

  late final _ggml_reshape_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_reshape_3d');
  late final _ggml_reshape_3d = _ggml_reshape_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_reshape_4d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
  ) {
    return _ggml_reshape_4d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
    );
  }

  late final _ggml_reshape_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_reshape_4d');
  late final _ggml_reshape_4d = _ggml_reshape_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_view_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int offset,
  ) {
    return _ggml_view_1d(
      ctx,
      a,
      ne0,
      offset,
    );
  }

  late final _ggml_view_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int64, ffi.Size)>>('ggml_view_1d');
  late final _ggml_view_1d = _ggml_view_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_view_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int nb1,
    int offset,
  ) {
    return _ggml_view_2d(
      ctx,
      a,
      ne0,
      ne1,
      nb1,
      offset,
    );
  }

  late final _ggml_view_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Size,
              ffi.Size)>>('ggml_view_2d');
  late final _ggml_view_2d = _ggml_view_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_view_3d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int nb1,
    int nb2,
    int offset,
  ) {
    return _ggml_view_3d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      nb1,
      nb2,
      offset,
    );
  }

  late final _ggml_view_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_view_3d');
  late final _ggml_view_3d = _ggml_view_3dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_view_4d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
    int nb1,
    int nb2,
    int nb3,
    int offset,
  ) {
    return _ggml_view_4d(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
      nb1,
      nb2,
      nb3,
      offset,
    );
  }

  late final _ggml_view_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('ggml_view_4d');
  late final _ggml_view_4d = _ggml_view_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_permute(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int axis0,
    int axis1,
    int axis2,
    int axis3,
  ) {
    return _ggml_permute(
      ctx,
      a,
      axis0,
      axis1,
      axis2,
      axis3,
    );
  }

  late final _ggml_permutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_permute');
  late final _ggml_permute = _ggml_permutePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_transpose(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_transpose(
      ctx,
      a,
    );
  }

  late final _ggml_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_transpose');
  late final _ggml_transpose = _ggml_transposePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_get_rows(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_get_rows(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_get_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_get_rows');
  late final _ggml_get_rows = _ggml_get_rowsPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_get_rows_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
  ) {
    return _ggml_get_rows_back(
      ctx,
      a,
      b,
      c,
    );
  }

  late final _ggml_get_rows_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_get_rows_back');
  late final _ggml_get_rows_back = _ggml_get_rows_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_set_rows(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
  ) {
    return _ggml_set_rows(
      ctx,
      a,
      b,
      c,
    );
  }

  late final _ggml_set_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_set_rows');
  late final _ggml_set_rows = _ggml_set_rowsPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_diag(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_diag(
      ctx,
      a,
    );
  }

  late final _ggml_diagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_diag');
  late final _ggml_diag = _ggml_diagPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_diag_mask_inf(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_inf(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_infPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_diag_mask_inf');
  late final _ggml_diag_mask_inf = _ggml_diag_mask_infPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_diag_mask_inf_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_inf_inplace(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_inf_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int)>>('ggml_diag_mask_inf_inplace');
  late final _ggml_diag_mask_inf_inplace =
      _ggml_diag_mask_inf_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_diag_mask_zero(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_zero(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_diag_mask_zero');
  late final _ggml_diag_mask_zero = _ggml_diag_mask_zeroPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_diag_mask_zero_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int n_past,
  ) {
    return _ggml_diag_mask_zero_inplace(
      ctx,
      a,
      n_past,
    );
  }

  late final _ggml_diag_mask_zero_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int)>>('ggml_diag_mask_zero_inplace');
  late final _ggml_diag_mask_zero_inplace =
      _ggml_diag_mask_zero_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_soft_max(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_soft_max(
      ctx,
      a,
    );
  }

  late final _ggml_soft_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_soft_max');
  late final _ggml_soft_max = _ggml_soft_maxPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_soft_max_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
  ) {
    return _ggml_soft_max_inplace(
      ctx,
      a,
    );
  }

  late final _ggml_soft_max_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>)>>('ggml_soft_max_inplace');
  late final _ggml_soft_max_inplace = _ggml_soft_max_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_soft_max_ext(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> mask,
    double scale,
    double max_bias,
  ) {
    return _ggml_soft_max_ext(
      ctx,
      a,
      mask,
      scale,
      max_bias,
    );
  }

  late final _ggml_soft_max_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Float)>>('ggml_soft_max_ext');
  late final _ggml_soft_max_ext = _ggml_soft_max_extPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          double,
          double)>();

  ffi.Pointer<ggml_tensor> ggml_soft_max_ext_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    double scale,
    double max_bias,
  ) {
    return _ggml_soft_max_ext_back(
      ctx,
      a,
      b,
      scale,
      max_bias,
    );
  }

  late final _ggml_soft_max_ext_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Float)>>('ggml_soft_max_ext_back');
  late final _ggml_soft_max_ext_back = _ggml_soft_max_ext_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          double,
          double)>();

  ffi.Pointer<ggml_tensor> ggml_soft_max_ext_back_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    double scale,
    double max_bias,
  ) {
    return _ggml_soft_max_ext_back_inplace(
      ctx,
      a,
      b,
      scale,
      max_bias,
    );
  }

  late final _ggml_soft_max_ext_back_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Float)>>('ggml_soft_max_ext_back_inplace');
  late final _ggml_soft_max_ext_back_inplace =
      _ggml_soft_max_ext_back_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              double,
              double)>();

  ffi.Pointer<ggml_tensor> ggml_rope(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int n_dims,
    int mode,
  ) {
    return _ggml_rope(
      ctx,
      a,
      b,
      n_dims,
      mode,
    );
  }

  late final _ggml_ropePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_rope');
  late final _ggml_rope = _ggml_ropePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_rope_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int n_dims,
    int mode,
  ) {
    return _ggml_rope_inplace(
      ctx,
      a,
      b,
      n_dims,
      mode,
    );
  }

  late final _ggml_rope_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_rope_inplace');
  late final _ggml_rope_inplace = _ggml_rope_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_rope_ext(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int n_dims,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_ext(
      ctx,
      a,
      b,
      c,
      n_dims,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_ext');
  late final _ggml_rope_ext = _ggml_rope_extPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  ffi.Pointer<ggml_tensor> ggml_rope_multi(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int n_dims,
    ffi.Pointer<ffi.Int> sections,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_multi(
      ctx,
      a,
      b,
      c,
      n_dims,
      sections,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_multiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_multi');
  late final _ggml_rope_multi = _ggml_rope_multiPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          ffi.Pointer<ffi.Int>,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  ffi.Pointer<ggml_tensor> ggml_rope_ext_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int n_dims,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_ext_inplace(
      ctx,
      a,
      b,
      c,
      n_dims,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_ext_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_ext_inplace');
  late final _ggml_rope_ext_inplace = _ggml_rope_ext_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  ffi.Pointer<ggml_tensor> ggml_rope_custom(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int n_dims,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_custom(
      ctx,
      a,
      b,
      n_dims,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_custom');
  late final _ggml_rope_custom = _ggml_rope_customPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  ffi.Pointer<ggml_tensor> ggml_rope_custom_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int n_dims,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_custom_inplace(
      ctx,
      a,
      b,
      n_dims,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_custom_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_custom_inplace');
  late final _ggml_rope_custom_inplace =
      _ggml_rope_custom_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              int,
              int,
              int,
              double,
              double,
              double,
              double,
              double,
              double)>();

  void ggml_rope_yarn_corr_dims(
    int n_dims,
    int n_ctx_orig,
    double freq_base,
    double beta_fast,
    double beta_slow,
    ffi.Pointer<ffi.Float> dims,
  ) {
    return _ggml_rope_yarn_corr_dims(
      n_dims,
      n_ctx_orig,
      freq_base,
      beta_fast,
      beta_slow,
      dims,
    );
  }

  late final _ggml_rope_yarn_corr_dimsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Float, ffi.Float, ffi.Float,
              ffi.Pointer<ffi.Float>)>>('ggml_rope_yarn_corr_dims');
  late final _ggml_rope_yarn_corr_dims =
      _ggml_rope_yarn_corr_dimsPtr.asFunction<
          void Function(
              int, int, double, double, double, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<ggml_tensor> ggml_rope_ext_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int n_dims,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_ext_back(
      ctx,
      a,
      b,
      c,
      n_dims,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_ext_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_ext_back');
  late final _ggml_rope_ext_back = _ggml_rope_ext_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  ffi.Pointer<ggml_tensor> ggml_rope_multi_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int n_dims,
    ffi.Pointer<ffi.Int> sections,
    int mode,
    int n_ctx_orig,
    double freq_base,
    double freq_scale,
    double ext_factor,
    double attn_factor,
    double beta_fast,
    double beta_slow,
  ) {
    return _ggml_rope_multi_back(
      ctx,
      a,
      b,
      c,
      n_dims,
      sections,
      mode,
      n_ctx_orig,
      freq_base,
      freq_scale,
      ext_factor,
      attn_factor,
      beta_fast,
      beta_slow,
    );
  }

  late final _ggml_rope_multi_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_rope_multi_back');
  late final _ggml_rope_multi_back = _ggml_rope_multi_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          ffi.Pointer<ffi.Int>,
          int,
          int,
          double,
          double,
          double,
          double,
          double,
          double)>();

  ffi.Pointer<ggml_tensor> ggml_clamp(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    double min,
    double max,
  ) {
    return _ggml_clamp(
      ctx,
      a,
      min,
      max,
    );
  }

  late final _ggml_clampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Float, ffi.Float)>>('ggml_clamp');
  late final _ggml_clamp = _ggml_clampPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, double, double)>();

  ffi.Pointer<ggml_tensor> ggml_im2col(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int s1,
    int p0,
    int p1,
    int d0,
    int d1,
    bool is_2D,
    ggml_type dst_type,
  ) {
    return _ggml_im2col(
      ctx,
      a,
      b,
      s0,
      s1,
      p0,
      p1,
      d0,
      d1,
      is_2D,
      dst_type.value,
    );
  }

  late final _ggml_im2colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Bool,
              ffi.UnsignedInt)>>('ggml_im2col');
  late final _ggml_im2col = _ggml_im2colPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int,
          int,
          int,
          bool,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_im2col_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ffi.Int64> ne,
    int s0,
    int s1,
    int p0,
    int p1,
    int d0,
    int d1,
    bool is_2D,
  ) {
    return _ggml_im2col_back(
      ctx,
      a,
      b,
      ne,
      s0,
      s1,
      p0,
      p1,
      d0,
      d1,
      is_2D,
    );
  }

  late final _ggml_im2col_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Bool)>>('ggml_im2col_back');
  late final _ggml_im2col_back = _ggml_im2col_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ffi.Int64>,
          int,
          int,
          int,
          int,
          int,
          int,
          bool)>();

  ffi.Pointer<ggml_tensor> ggml_conv_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int p0,
    int d0,
  ) {
    return _ggml_conv_1d(
      ctx,
      a,
      b,
      s0,
      p0,
      d0,
    );
  }

  late final _ggml_conv_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_1d');
  late final _ggml_conv_1d = _ggml_conv_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_1d_ph(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s,
    int d,
  ) {
    return _ggml_conv_1d_ph(
      ctx,
      a,
      b,
      s,
      d,
    );
  }

  late final _ggml_conv_1d_phPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_conv_1d_ph');
  late final _ggml_conv_1d_ph = _ggml_conv_1d_phPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_1d_dw(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int p0,
    int d0,
  ) {
    return _ggml_conv_1d_dw(
      ctx,
      a,
      b,
      s0,
      p0,
      d0,
    );
  }

  late final _ggml_conv_1d_dwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_1d_dw');
  late final _ggml_conv_1d_dw = _ggml_conv_1d_dwPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_1d_dw_ph(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int d0,
  ) {
    return _ggml_conv_1d_dw_ph(
      ctx,
      a,
      b,
      s0,
      d0,
    );
  }

  late final _ggml_conv_1d_dw_phPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_conv_1d_dw_ph');
  late final _ggml_conv_1d_dw_ph = _ggml_conv_1d_dw_phPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_transpose_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int p0,
    int d0,
  ) {
    return _ggml_conv_transpose_1d(
      ctx,
      a,
      b,
      s0,
      p0,
      d0,
    );
  }

  late final _ggml_conv_transpose_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_transpose_1d');
  late final _ggml_conv_transpose_1d = _ggml_conv_transpose_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int s1,
    int p0,
    int p1,
    int d0,
    int d1,
  ) {
    return _ggml_conv_2d(
      ctx,
      a,
      b,
      s0,
      s1,
      p0,
      p1,
      d0,
      d1,
    );
  }

  late final _ggml_conv_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_2d');
  late final _ggml_conv_2d = _ggml_conv_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_2d_sk_p0(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_conv_2d_sk_p0(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_conv_2d_sk_p0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_conv_2d_sk_p0');
  late final _ggml_conv_2d_sk_p0 = _ggml_conv_2d_sk_p0Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_conv_2d_s1_ph(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_conv_2d_s1_ph(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_conv_2d_s1_phPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_conv_2d_s1_ph');
  late final _ggml_conv_2d_s1_ph = _ggml_conv_2d_s1_phPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_conv_2d_dw(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int s1,
    int p0,
    int p1,
    int d0,
    int d1,
  ) {
    return _ggml_conv_2d_dw(
      ctx,
      a,
      b,
      s0,
      s1,
      p0,
      p1,
      d0,
      d1,
    );
  }

  late final _ggml_conv_2d_dwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_2d_dw');
  late final _ggml_conv_2d_dw = _ggml_conv_2d_dwPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_2d_dw_direct(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int stride0,
    int stride1,
    int pad0,
    int pad1,
    int dilation0,
    int dilation1,
  ) {
    return _ggml_conv_2d_dw_direct(
      ctx,
      a,
      b,
      stride0,
      stride1,
      pad0,
      pad1,
      dilation0,
      dilation1,
    );
  }

  late final _ggml_conv_2d_dw_directPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_2d_dw_direct');
  late final _ggml_conv_2d_dw_direct = _ggml_conv_2d_dw_directPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_transpose_2d_p0(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int stride,
  ) {
    return _ggml_conv_transpose_2d_p0(
      ctx,
      a,
      b,
      stride,
    );
  }

  late final _ggml_conv_transpose_2d_p0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int)>>('ggml_conv_transpose_2d_p0');
  late final _ggml_conv_transpose_2d_p0 =
      _ggml_conv_transpose_2d_p0Ptr.asFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_conv_2d_direct(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int s0,
    int s1,
    int p0,
    int p1,
    int d0,
    int d1,
  ) {
    return _ggml_conv_2d_direct(
      ctx,
      a,
      b,
      s0,
      s1,
      p0,
      p1,
      d0,
      d1,
    );
  }

  late final _ggml_conv_2d_directPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_conv_2d_direct');
  late final _ggml_conv_2d_direct = _ggml_conv_2d_directPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ggml_tensor> ggml_pool_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_op_pool op,
    int k0,
    int s0,
    int p0,
  ) {
    return _ggml_pool_1d(
      ctx,
      a,
      op.value,
      k0,
      s0,
      p0,
    );
  }

  late final _ggml_pool_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_pool_1d');
  late final _ggml_pool_1d = _ggml_pool_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_pool_2d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_op_pool op,
    int k0,
    int k1,
    int s0,
    int s1,
    double p0,
    double p1,
  ) {
    return _ggml_pool_2d(
      ctx,
      a,
      op.value,
      k0,
      k1,
      s0,
      s1,
      p0,
      p1,
    );
  }

  late final _ggml_pool_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float)>>('ggml_pool_2d');
  late final _ggml_pool_2d = _ggml_pool_2dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, int, double, double)>();

  ffi.Pointer<ggml_tensor> ggml_pool_2d_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> af,
    ggml_op_pool op,
    int k0,
    int k1,
    int s0,
    int s1,
    double p0,
    double p1,
  ) {
    return _ggml_pool_2d_back(
      ctx,
      a,
      af,
      op.value,
      k0,
      k1,
      s0,
      s1,
      p0,
      p1,
    );
  }

  late final _ggml_pool_2d_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float)>>('ggml_pool_2d_back');
  late final _ggml_pool_2d_back = _ggml_pool_2d_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          int,
          int,
          int,
          int,
          int,
          double,
          double)>();

  ffi.Pointer<ggml_tensor> ggml_upscale(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int scale_factor,
    ggml_scale_mode mode,
  ) {
    return _ggml_upscale(
      ctx,
      a,
      scale_factor,
      mode.value,
    );
  }

  late final _ggml_upscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.UnsignedInt)>>('ggml_upscale');
  late final _ggml_upscale = _ggml_upscalePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_upscale_ext(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
    ggml_scale_mode mode,
  ) {
    return _ggml_upscale_ext(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
      mode.value,
    );
  }

  late final _ggml_upscale_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt)>>('ggml_upscale_ext');
  late final _ggml_upscale_ext = _ggml_upscale_extPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_interpolate(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
    int mode,
  ) {
    return _ggml_interpolate(
      ctx,
      a,
      ne0,
      ne1,
      ne2,
      ne3,
      mode,
    );
  }

  late final _ggml_interpolatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Uint32)>>('ggml_interpolate');
  late final _ggml_interpolate = _ggml_interpolatePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_pad(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int p0,
    int p1,
    int p2,
    int p3,
  ) {
    return _ggml_pad(
      ctx,
      a,
      p0,
      p1,
      p2,
      p3,
    );
  }

  late final _ggml_padPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_pad');
  late final _ggml_pad = _ggml_padPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_pad_reflect_1d(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int p0,
    int p1,
  ) {
    return _ggml_pad_reflect_1d(
      ctx,
      a,
      p0,
      p1,
    );
  }

  late final _ggml_pad_reflect_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_pad_reflect_1d');
  late final _ggml_pad_reflect_1d = _ggml_pad_reflect_1dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_roll(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int shift0,
    int shift1,
    int shift2,
    int shift3,
  ) {
    return _ggml_roll(
      ctx,
      a,
      shift0,
      shift1,
      shift2,
      shift3,
    );
  }

  late final _ggml_rollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_roll');
  late final _ggml_roll = _ggml_rollPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_timestep_embedding(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> timesteps,
    int dim,
    int max_period,
  ) {
    return _ggml_timestep_embedding(
      ctx,
      timesteps,
      dim,
      max_period,
    );
  }

  late final _ggml_timestep_embeddingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int)>>('ggml_timestep_embedding');
  late final _ggml_timestep_embedding = _ggml_timestep_embeddingPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_argsort(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_sort_order order,
  ) {
    return _ggml_argsort(
      ctx,
      a,
      order.value,
    );
  }

  late final _ggml_argsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.UnsignedInt)>>('ggml_argsort');
  late final _ggml_argsort = _ggml_argsortPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_arange(
    ffi.Pointer<ggml_context> ctx,
    double start,
    double stop,
    double step,
  ) {
    return _ggml_arange(
      ctx,
      start,
      stop,
      step,
    );
  }

  late final _ggml_arangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Float, ffi.Float, ffi.Float)>>('ggml_arange');
  late final _ggml_arange = _ggml_arangePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, double, double, double)>();

  ffi.Pointer<ggml_tensor> ggml_top_k(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int k,
  ) {
    return _ggml_top_k(
      ctx,
      a,
      k,
    );
  }

  late final _ggml_top_kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_top_k');
  late final _ggml_top_k = _ggml_top_kPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_flash_attn_ext(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> q,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> mask,
    double scale,
    double max_bias,
    double logit_softcap,
  ) {
    return _ggml_flash_attn_ext(
      ctx,
      q,
      k,
      v,
      mask,
      scale,
      max_bias,
      logit_softcap,
    );
  }

  late final _ggml_flash_attn_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ggml_flash_attn_ext');
  late final _ggml_flash_attn_ext = _ggml_flash_attn_extPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          double,
          double,
          double)>();

  void ggml_flash_attn_ext_set_prec(
    ffi.Pointer<ggml_tensor> a,
    ggml_prec prec,
  ) {
    return _ggml_flash_attn_ext_set_prec(
      a,
      prec.value,
    );
  }

  late final _ggml_flash_attn_ext_set_precPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt)>>('ggml_flash_attn_ext_set_prec');
  late final _ggml_flash_attn_ext_set_prec = _ggml_flash_attn_ext_set_precPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int)>();

  ggml_prec ggml_flash_attn_ext_get_prec(
    ffi.Pointer<ggml_tensor> a,
  ) {
    return ggml_prec.fromValue(_ggml_flash_attn_ext_get_prec(
      a,
    ));
  }

  late final _ggml_flash_attn_ext_get_precPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ggml_tensor>)>>(
      'ggml_flash_attn_ext_get_prec');
  late final _ggml_flash_attn_ext_get_prec = _ggml_flash_attn_ext_get_precPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_flash_attn_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> q,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> d,
    bool masked,
  ) {
    return _ggml_flash_attn_back(
      ctx,
      q,
      k,
      v,
      d,
      masked,
    );
  }

  late final _ggml_flash_attn_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Bool)>>('ggml_flash_attn_back');
  late final _ggml_flash_attn_back = _ggml_flash_attn_backPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          bool)>();

  ffi.Pointer<ggml_tensor> ggml_ssm_conv(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> sx,
    ffi.Pointer<ggml_tensor> c,
  ) {
    return _ggml_ssm_conv(
      ctx,
      sx,
      c,
    );
  }

  late final _ggml_ssm_convPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_ssm_conv');
  late final _ggml_ssm_conv = _ggml_ssm_convPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_ssm_scan(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> s,
    ffi.Pointer<ggml_tensor> x,
    ffi.Pointer<ggml_tensor> dt,
    ffi.Pointer<ggml_tensor> A,
    ffi.Pointer<ggml_tensor> B,
    ffi.Pointer<ggml_tensor> C,
    ffi.Pointer<ggml_tensor> ids,
  ) {
    return _ggml_ssm_scan(
      ctx,
      s,
      x,
      dt,
      A,
      B,
      C,
      ids,
    );
  }

  late final _ggml_ssm_scanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_ssm_scan');
  late final _ggml_ssm_scan = _ggml_ssm_scanPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_win_part(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int w,
  ) {
    return _ggml_win_part(
      ctx,
      a,
      w,
    );
  }

  late final _ggml_win_partPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_win_part');
  late final _ggml_win_part = _ggml_win_partPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_win_unpart(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int w0,
    int h0,
    int w,
  ) {
    return _ggml_win_unpart(
      ctx,
      a,
      w0,
      h0,
      w,
    );
  }

  late final _ggml_win_unpartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ggml_win_unpart');
  late final _ggml_win_unpart = _ggml_win_unpartPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, int, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_unary(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_unary_op op,
  ) {
    return _ggml_unary(
      ctx,
      a,
      op.value,
    );
  }

  late final _ggml_unaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.UnsignedInt)>>('ggml_unary');
  late final _ggml_unary = _ggml_unaryPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_unary_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_unary_op op,
  ) {
    return _ggml_unary_inplace(
      ctx,
      a,
      op.value,
    );
  }

  late final _ggml_unary_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.UnsignedInt)>>('ggml_unary_inplace');
  late final _ggml_unary_inplace = _ggml_unary_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_get_rel_pos(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    int qh,
    int kh,
  ) {
    return _ggml_get_rel_pos(
      ctx,
      a,
      qh,
      kh,
    );
  }

  late final _ggml_get_rel_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Int)>>('ggml_get_rel_pos');
  late final _ggml_get_rel_pos = _ggml_get_rel_posPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_tensor>, int, int)>();

  ffi.Pointer<ggml_tensor> ggml_add_rel_pos(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> pw,
    ffi.Pointer<ggml_tensor> ph,
  ) {
    return _ggml_add_rel_pos(
      ctx,
      a,
      pw,
      ph,
    );
  }

  late final _ggml_add_rel_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add_rel_pos');
  late final _ggml_add_rel_pos = _ggml_add_rel_posPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_add_rel_pos_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> pw,
    ffi.Pointer<ggml_tensor> ph,
  ) {
    return _ggml_add_rel_pos_inplace(
      ctx,
      a,
      pw,
      ph,
    );
  }

  late final _ggml_add_rel_pos_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_add_rel_pos_inplace');
  late final _ggml_add_rel_pos_inplace =
      _ggml_add_rel_pos_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_rwkv_wkv6(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> r,
    ffi.Pointer<ggml_tensor> tf,
    ffi.Pointer<ggml_tensor> td,
    ffi.Pointer<ggml_tensor> state,
  ) {
    return _ggml_rwkv_wkv6(
      ctx,
      k,
      v,
      r,
      tf,
      td,
      state,
    );
  }

  late final _ggml_rwkv_wkv6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_rwkv_wkv6');
  late final _ggml_rwkv_wkv6 = _ggml_rwkv_wkv6Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_gated_linear_attn(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> q,
    ffi.Pointer<ggml_tensor> g,
    ffi.Pointer<ggml_tensor> state,
    double scale,
  ) {
    return _ggml_gated_linear_attn(
      ctx,
      k,
      v,
      q,
      g,
      state,
      scale,
    );
  }

  late final _ggml_gated_linear_attnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Float)>>('ggml_gated_linear_attn');
  late final _ggml_gated_linear_attn = _ggml_gated_linear_attnPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          double)>();

  ffi.Pointer<ggml_tensor> ggml_rwkv_wkv7(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> r,
    ffi.Pointer<ggml_tensor> w,
    ffi.Pointer<ggml_tensor> k,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> state,
  ) {
    return _ggml_rwkv_wkv7(
      ctx,
      r,
      w,
      k,
      v,
      a,
      b,
      state,
    );
  }

  late final _ggml_rwkv_wkv7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_rwkv_wkv7');
  late final _ggml_rwkv_wkv7 = _ggml_rwkv_wkv7Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom1(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_custom1_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom1(
      ctx,
      a,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom1');
  late final _ggml_map_custom1 = _ggml_map_custom1Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom1_op_t,
          int,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom1_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ggml_custom1_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom1_inplace(
      ctx,
      a,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom1_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom1_inplace');
  late final _ggml_map_custom1_inplace =
      _ggml_map_custom1_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom1_op_t,
              int,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom2(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_custom2_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom2(
      ctx,
      a,
      b,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom2');
  late final _ggml_map_custom2 = _ggml_map_custom2Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom2_op_t,
          int,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom2_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ggml_custom2_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom2_inplace(
      ctx,
      a,
      b,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom2_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom2_inplace');
  late final _ggml_map_custom2_inplace =
      _ggml_map_custom2_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom2_op_t,
              int,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom3(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ggml_custom3_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom3(
      ctx,
      a,
      b,
      c,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom3');
  late final _ggml_map_custom3 = _ggml_map_custom3Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_custom3_op_t,
          int,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_map_custom3_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ggml_custom3_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_map_custom3_inplace(
      ctx,
      a,
      b,
      c,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_map_custom3_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_map_custom3_inplace');
  late final _ggml_map_custom3_inplace =
      _ggml_map_custom3_inplacePtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_custom3_op_t,
              int,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_custom_4d(
    ffi.Pointer<ggml_context> ctx,
    ggml_type type,
    int ne0,
    int ne1,
    int ne2,
    int ne3,
    ffi.Pointer<ffi.Pointer<ggml_tensor>> args,
    int n_args,
    ggml_custom_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_custom_4d(
      ctx,
      type.value,
      ne0,
      ne1,
      ne2,
      ne3,
      args,
      n_args,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_custom_4dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.UnsignedInt,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Pointer<ffi.Pointer<ggml_tensor>>,
              ffi.Int,
              ggml_custom_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_custom_4d');
  late final _ggml_custom_4d = _ggml_custom_4dPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Pointer<ggml_tensor>>,
          int,
          ggml_custom_op_t,
          int,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_custom_inplace(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ffi.Pointer<ggml_tensor>> args,
    int n_args,
    ggml_custom_op_t fun,
    int n_tasks,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_custom_inplace(
      ctx,
      a,
      args,
      n_args,
      fun,
      n_tasks,
      userdata,
    );
  }

  late final _ggml_custom_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Pointer<ggml_tensor>>,
              ffi.Int,
              ggml_custom_op_t,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ggml_custom_inplace');
  late final _ggml_custom_inplace = _ggml_custom_inplacePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ffi.Pointer<ggml_tensor>>,
          int,
          ggml_custom_op_t,
          int,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_cross_entropy_loss(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
  ) {
    return _ggml_cross_entropy_loss(
      ctx,
      a,
      b,
    );
  }

  late final _ggml_cross_entropy_lossPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cross_entropy_loss');
  late final _ggml_cross_entropy_loss = _ggml_cross_entropy_lossPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_cross_entropy_loss_back(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
  ) {
    return _ggml_cross_entropy_loss_back(
      ctx,
      a,
      b,
      c,
    );
  }

  late final _ggml_cross_entropy_loss_backPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_cross_entropy_loss_back');
  late final _ggml_cross_entropy_loss_back =
      _ggml_cross_entropy_loss_backPtr.asFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_opt_step_adamw(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> grad,
    ffi.Pointer<ggml_tensor> m,
    ffi.Pointer<ggml_tensor> v,
    ffi.Pointer<ggml_tensor> adamw_params,
  ) {
    return _ggml_opt_step_adamw(
      ctx,
      a,
      grad,
      m,
      v,
      adamw_params,
    );
  }

  late final _ggml_opt_step_adamwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_opt_step_adamw');
  late final _ggml_opt_step_adamw = _ggml_opt_step_adamwPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  void ggml_build_forward_expand(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_build_forward_expand(
      cgraph,
      tensor,
    );
  }

  late final _ggml_build_forward_expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_tensor>)>>('ggml_build_forward_expand');
  late final _ggml_build_forward_expand =
      _ggml_build_forward_expandPtr.asFunction<
          void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_tensor>)>();

  void ggml_build_backward_expand(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ffi.Pointer<ggml_tensor>> grad_accs,
  ) {
    return _ggml_build_backward_expand(
      ctx,
      cgraph,
      grad_accs,
    );
  }

  late final _ggml_build_backward_expandPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ggml_context>,
                  ffi.Pointer<ggml_cgraph>,
                  ffi.Pointer<ffi.Pointer<ggml_tensor>>)>>(
      'ggml_build_backward_expand');
  late final _ggml_build_backward_expand =
      _ggml_build_backward_expandPtr.asFunction<
          void Function(ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Pointer<ggml_tensor>>)>();

  ffi.Pointer<ggml_cgraph> ggml_new_graph(
    ffi.Pointer<ggml_context> ctx,
  ) {
    return _ggml_new_graph(
      ctx,
    );
  }

  late final _ggml_new_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_cgraph> Function(
              ffi.Pointer<ggml_context>)>>('ggml_new_graph');
  late final _ggml_new_graph = _ggml_new_graphPtr.asFunction<
      ffi.Pointer<ggml_cgraph> Function(ffi.Pointer<ggml_context>)>();

  ffi.Pointer<ggml_cgraph> ggml_new_graph_custom(
    ffi.Pointer<ggml_context> ctx,
    int size,
    bool grads,
  ) {
    return _ggml_new_graph_custom(
      ctx,
      size,
      grads,
    );
  }

  late final _ggml_new_graph_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_cgraph> Function(ffi.Pointer<ggml_context>, ffi.Size,
              ffi.Bool)>>('ggml_new_graph_custom');
  late final _ggml_new_graph_custom = _ggml_new_graph_customPtr.asFunction<
      ffi.Pointer<ggml_cgraph> Function(
          ffi.Pointer<ggml_context>, int, bool)>();

  ffi.Pointer<ggml_cgraph> ggml_graph_dup(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_cgraph> cgraph,
    bool force_grads,
  ) {
    return _ggml_graph_dup(
      ctx,
      cgraph,
      force_grads,
    );
  }

  late final _ggml_graph_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_cgraph> Function(ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_cgraph>, ffi.Bool)>>('ggml_graph_dup');
  late final _ggml_graph_dup = _ggml_graph_dupPtr.asFunction<
      ffi.Pointer<ggml_cgraph> Function(
          ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>, bool)>();

  void ggml_graph_cpy(
    ffi.Pointer<ggml_cgraph> src,
    ffi.Pointer<ggml_cgraph> dst,
  ) {
    return _ggml_graph_cpy(
      src,
      dst,
    );
  }

  late final _ggml_graph_cpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_cgraph>)>>('ggml_graph_cpy');
  late final _ggml_graph_cpy = _ggml_graph_cpyPtr.asFunction<
      void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cgraph>)>();

  void ggml_graph_reset(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_reset(
      cgraph,
    );
  }

  late final _ggml_graph_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_reset');
  late final _ggml_graph_reset = _ggml_graph_resetPtr
      .asFunction<void Function(ffi.Pointer<ggml_cgraph>)>();

  void ggml_graph_clear(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_clear(
      cgraph,
    );
  }

  late final _ggml_graph_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_clear');
  late final _ggml_graph_clear = _ggml_graph_clearPtr
      .asFunction<void Function(ffi.Pointer<ggml_cgraph>)>();

  int ggml_graph_size(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_size(
      cgraph,
    );
  }

  late final _ggml_graph_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_size');
  late final _ggml_graph_size =
      _ggml_graph_sizePtr.asFunction<int Function(ffi.Pointer<ggml_cgraph>)>();

  ffi.Pointer<ggml_tensor> ggml_graph_node(
    ffi.Pointer<ggml_cgraph> cgraph,
    int i,
  ) {
    return _ggml_graph_node(
      cgraph,
      i,
    );
  }

  late final _ggml_graph_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_cgraph>, ffi.Int)>>('ggml_graph_node');
  late final _ggml_graph_node = _ggml_graph_nodePtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_cgraph>, int)>();

  ffi.Pointer<ffi.Pointer<ggml_tensor>> ggml_graph_nodes(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_nodes(
      cgraph,
    );
  }

  late final _ggml_graph_nodesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ggml_tensor>> Function(
              ffi.Pointer<ggml_cgraph>)>>('ggml_graph_nodes');
  late final _ggml_graph_nodes = _ggml_graph_nodesPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ggml_tensor>> Function(
          ffi.Pointer<ggml_cgraph>)>();

  int ggml_graph_n_nodes(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_n_nodes(
      cgraph,
    );
  }

  late final _ggml_graph_n_nodesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_n_nodes');
  late final _ggml_graph_n_nodes = _ggml_graph_n_nodesPtr
      .asFunction<int Function(ffi.Pointer<ggml_cgraph>)>();

  void ggml_graph_add_node(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_graph_add_node(
      cgraph,
      tensor,
    );
  }

  late final _ggml_graph_add_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_tensor>)>>('ggml_graph_add_node');
  late final _ggml_graph_add_node = _ggml_graph_add_nodePtr.asFunction<
      void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_tensor>)>();

  int ggml_graph_overhead() {
    return _ggml_graph_overhead();
  }

  late final _ggml_graph_overheadPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ggml_graph_overhead');
  late final _ggml_graph_overhead =
      _ggml_graph_overheadPtr.asFunction<int Function()>();

  int ggml_graph_overhead_custom(
    int size,
    bool grads,
  ) {
    return _ggml_graph_overhead_custom(
      size,
      grads,
    );
  }

  late final _ggml_graph_overhead_customPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Size, ffi.Bool)>>(
          'ggml_graph_overhead_custom');
  late final _ggml_graph_overhead_custom =
      _ggml_graph_overhead_customPtr.asFunction<int Function(int, bool)>();

  ffi.Pointer<ggml_tensor> ggml_graph_get_tensor(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_graph_get_tensor(
      cgraph,
      name,
    );
  }

  late final _ggml_graph_get_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Char>)>>('ggml_graph_get_tensor');
  late final _ggml_graph_get_tensor = _ggml_graph_get_tensorPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_cgraph>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ggml_tensor> ggml_graph_get_grad(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_tensor> node,
  ) {
    return _ggml_graph_get_grad(
      cgraph,
      node,
    );
  }

  late final _ggml_graph_get_gradPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_tensor>)>>('ggml_graph_get_grad');
  late final _ggml_graph_get_grad = _ggml_graph_get_gradPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ggml_tensor> ggml_graph_get_grad_acc(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_tensor> node,
  ) {
    return _ggml_graph_get_grad_acc(
      cgraph,
      node,
    );
  }

  late final _ggml_graph_get_grad_accPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_tensor>)>>('ggml_graph_get_grad_acc');
  late final _ggml_graph_get_grad_acc = _ggml_graph_get_grad_accPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_tensor>)>();

  void ggml_graph_print(
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_graph_print(
      cgraph,
    );
  }

  late final _ggml_graph_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_cgraph>)>>(
          'ggml_graph_print');
  late final _ggml_graph_print = _ggml_graph_printPtr
      .asFunction<void Function(ffi.Pointer<ggml_cgraph>)>();

  void ggml_graph_dump_dot(
    ffi.Pointer<ggml_cgraph> gb,
    ffi.Pointer<ggml_cgraph> gf,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _ggml_graph_dump_dot(
      gb,
      gf,
      filename,
    );
  }

  late final _ggml_graph_dump_dotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Char>)>>('ggml_graph_dump_dot');
  late final _ggml_graph_dump_dot = _ggml_graph_dump_dotPtr.asFunction<
      void Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cgraph>,
          ffi.Pointer<ffi.Char>)>();

  void ggml_log_set(
    ggml_log_callback log_callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _ggml_log_set(
      log_callback,
      user_data,
    );
  }

  late final _ggml_log_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_log_callback, ffi.Pointer<ffi.Void>)>>('ggml_log_set');
  late final _ggml_log_set = _ggml_log_setPtr
      .asFunction<void Function(ggml_log_callback, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ggml_tensor> ggml_set_zero(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_set_zero(
      tensor,
    );
  }

  late final _ggml_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>)>>('ggml_set_zero');
  late final _ggml_set_zero = _ggml_set_zeroPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>)>();

  void ggml_quantize_init(
    ggml_type type,
  ) {
    return _ggml_quantize_init(
      type.value,
    );
  }

  late final _ggml_quantize_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'ggml_quantize_init');
  late final _ggml_quantize_init =
      _ggml_quantize_initPtr.asFunction<void Function(int)>();

  void ggml_quantize_free() {
    return _ggml_quantize_free();
  }

  late final _ggml_quantize_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_quantize_free');
  late final _ggml_quantize_free =
      _ggml_quantize_freePtr.asFunction<void Function()>();

  bool ggml_quantize_requires_imatrix(
    ggml_type type,
  ) {
    return _ggml_quantize_requires_imatrix(
      type.value,
    );
  }

  late final _ggml_quantize_requires_imatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'ggml_quantize_requires_imatrix');
  late final _ggml_quantize_requires_imatrix =
      _ggml_quantize_requires_imatrixPtr.asFunction<bool Function(int)>();

  int ggml_quantize_chunk(
    ggml_type type,
    ffi.Pointer<ffi.Float> src,
    ffi.Pointer<ffi.Void> dst,
    int start,
    int nrows,
    int n_per_row,
    ffi.Pointer<ffi.Float> imatrix,
  ) {
    return _ggml_quantize_chunk(
      type.value,
      src,
      dst,
      start,
      nrows,
      n_per_row,
      imatrix,
    );
  }

  late final _ggml_quantize_chunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Void>,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Pointer<ffi.Float>)>>('ggml_quantize_chunk');
  late final _ggml_quantize_chunk = _ggml_quantize_chunkPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Void>, int, int,
          int, ffi.Pointer<ffi.Float>)>();

  ffi.Pointer<ggml_type_traits> ggml_get_type_traits(
    ggml_type type,
  ) {
    return _ggml_get_type_traits(
      type.value,
    );
  }

  late final _ggml_get_type_traitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_type_traits> Function(
              ffi.UnsignedInt)>>('ggml_get_type_traits');
  late final _ggml_get_type_traits = _ggml_get_type_traitsPtr
      .asFunction<ffi.Pointer<ggml_type_traits> Function(int)>();

  ggml_threadpool_params ggml_threadpool_params_default(
    int n_threads,
  ) {
    return _ggml_threadpool_params_default(
      n_threads,
    );
  }

  late final _ggml_threadpool_params_defaultPtr =
      _lookup<ffi.NativeFunction<ggml_threadpool_params Function(ffi.Int)>>(
          'ggml_threadpool_params_default');
  late final _ggml_threadpool_params_default =
      _ggml_threadpool_params_defaultPtr
          .asFunction<ggml_threadpool_params Function(int)>();

  void ggml_threadpool_params_init(
    ffi.Pointer<ggml_threadpool_params> p,
    int n_threads,
  ) {
    return _ggml_threadpool_params_init(
      p,
      n_threads,
    );
  }

  late final _ggml_threadpool_params_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_threadpool_params>,
              ffi.Int)>>('ggml_threadpool_params_init');
  late final _ggml_threadpool_params_init = _ggml_threadpool_params_initPtr
      .asFunction<void Function(ffi.Pointer<ggml_threadpool_params>, int)>();

  bool ggml_threadpool_params_match(
    ffi.Pointer<ggml_threadpool_params> p0,
    ffi.Pointer<ggml_threadpool_params> p1,
  ) {
    return _ggml_threadpool_params_match(
      p0,
      p1,
    );
  }

  late final _ggml_threadpool_params_matchPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ggml_threadpool_params>,
                  ffi.Pointer<ggml_threadpool_params>)>>(
      'ggml_threadpool_params_match');
  late final _ggml_threadpool_params_match =
      _ggml_threadpool_params_matchPtr.asFunction<
          bool Function(ffi.Pointer<ggml_threadpool_params>,
              ffi.Pointer<ggml_threadpool_params>)>();

  ggml_tallocr ggml_tallocr_new(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_tallocr_new(
      buffer,
    );
  }

  late final _ggml_tallocr_newPtr =
      _lookup<ffi.NativeFunction<ggml_tallocr Function(ggml_backend_buffer_t)>>(
          'ggml_tallocr_new');
  late final _ggml_tallocr_new = _ggml_tallocr_newPtr
      .asFunction<ggml_tallocr Function(ggml_backend_buffer_t)>();

  ggml_status ggml_tallocr_alloc(
    ffi.Pointer<ggml_tallocr> talloc,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return ggml_status.fromValue(_ggml_tallocr_alloc(
      talloc,
      tensor,
    ));
  }

  late final _ggml_tallocr_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_tallocr>,
              ffi.Pointer<ggml_tensor>)>>('ggml_tallocr_alloc');
  late final _ggml_tallocr_alloc = _ggml_tallocr_allocPtr.asFunction<
      int Function(ffi.Pointer<ggml_tallocr>, ffi.Pointer<ggml_tensor>)>();

  ggml_gallocr_t ggml_gallocr_new(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_gallocr_new(
      buft,
    );
  }

  late final _ggml_gallocr_newPtr = _lookup<
          ffi
          .NativeFunction<ggml_gallocr_t Function(ggml_backend_buffer_type_t)>>(
      'ggml_gallocr_new');
  late final _ggml_gallocr_new = _ggml_gallocr_newPtr
      .asFunction<ggml_gallocr_t Function(ggml_backend_buffer_type_t)>();

  ggml_gallocr_t ggml_gallocr_new_n(
    ffi.Pointer<ggml_backend_buffer_type_t> bufts,
    int n_bufs,
  ) {
    return _ggml_gallocr_new_n(
      bufts,
      n_bufs,
    );
  }

  late final _ggml_gallocr_new_nPtr = _lookup<
      ffi.NativeFunction<
          ggml_gallocr_t Function(ffi.Pointer<ggml_backend_buffer_type_t>,
              ffi.Int)>>('ggml_gallocr_new_n');
  late final _ggml_gallocr_new_n = _ggml_gallocr_new_nPtr.asFunction<
      ggml_gallocr_t Function(ffi.Pointer<ggml_backend_buffer_type_t>, int)>();

  void ggml_gallocr_free(
    ggml_gallocr_t galloc,
  ) {
    return _ggml_gallocr_free(
      galloc,
    );
  }

  late final _ggml_gallocr_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_gallocr_t)>>(
          'ggml_gallocr_free');
  late final _ggml_gallocr_free =
      _ggml_gallocr_freePtr.asFunction<void Function(ggml_gallocr_t)>();

  bool ggml_gallocr_reserve(
    ggml_gallocr_t galloc,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return _ggml_gallocr_reserve(
      galloc,
      graph,
    );
  }

  late final _ggml_gallocr_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_gallocr_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_gallocr_reserve');
  late final _ggml_gallocr_reserve = _ggml_gallocr_reservePtr
      .asFunction<bool Function(ggml_gallocr_t, ffi.Pointer<ggml_cgraph>)>();

  bool ggml_gallocr_reserve_n(
    ggml_gallocr_t galloc,
    ffi.Pointer<ggml_cgraph> graph,
    ffi.Pointer<ffi.Int> node_buffer_ids,
    ffi.Pointer<ffi.Int> leaf_buffer_ids,
  ) {
    return _ggml_gallocr_reserve_n(
      galloc,
      graph,
      node_buffer_ids,
      leaf_buffer_ids,
    );
  }

  late final _ggml_gallocr_reserve_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ggml_gallocr_t,
              ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('ggml_gallocr_reserve_n');
  late final _ggml_gallocr_reserve_n = _ggml_gallocr_reserve_nPtr.asFunction<
      bool Function(ggml_gallocr_t, ffi.Pointer<ggml_cgraph>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  bool ggml_gallocr_alloc_graph(
    ggml_gallocr_t galloc,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return _ggml_gallocr_alloc_graph(
      galloc,
      graph,
    );
  }

  late final _ggml_gallocr_alloc_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_gallocr_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_gallocr_alloc_graph');
  late final _ggml_gallocr_alloc_graph = _ggml_gallocr_alloc_graphPtr
      .asFunction<bool Function(ggml_gallocr_t, ffi.Pointer<ggml_cgraph>)>();

  int ggml_gallocr_get_buffer_size(
    ggml_gallocr_t galloc,
    int buffer_id,
  ) {
    return _ggml_gallocr_get_buffer_size(
      galloc,
      buffer_id,
    );
  }

  late final _ggml_gallocr_get_buffer_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_gallocr_t, ffi.Int)>>(
          'ggml_gallocr_get_buffer_size');
  late final _ggml_gallocr_get_buffer_size = _ggml_gallocr_get_buffer_sizePtr
      .asFunction<int Function(ggml_gallocr_t, int)>();

  ffi.Pointer<ggml_backend_buffer> ggml_backend_alloc_ctx_tensors_from_buft(
    ffi.Pointer<ggml_context> ctx,
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_alloc_ctx_tensors_from_buft(
      ctx,
      buft,
    );
  }

  late final _ggml_backend_alloc_ctx_tensors_from_buftPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ggml_backend_buffer> Function(
                  ffi.Pointer<ggml_context>, ggml_backend_buffer_type_t)>>(
      'ggml_backend_alloc_ctx_tensors_from_buft');
  late final _ggml_backend_alloc_ctx_tensors_from_buft =
      _ggml_backend_alloc_ctx_tensors_from_buftPtr.asFunction<
          ffi.Pointer<ggml_backend_buffer> Function(
              ffi.Pointer<ggml_context>, ggml_backend_buffer_type_t)>();

  ffi.Pointer<ggml_backend_buffer> ggml_backend_alloc_ctx_tensors(
    ffi.Pointer<ggml_context> ctx,
    ggml_backend_t backend,
  ) {
    return _ggml_backend_alloc_ctx_tensors(
      ctx,
      backend,
    );
  }

  late final _ggml_backend_alloc_ctx_tensorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_backend_buffer> Function(ffi.Pointer<ggml_context>,
              ggml_backend_t)>>('ggml_backend_alloc_ctx_tensors');
  late final _ggml_backend_alloc_ctx_tensors =
      _ggml_backend_alloc_ctx_tensorsPtr.asFunction<
          ffi.Pointer<ggml_backend_buffer> Function(
              ffi.Pointer<ggml_context>, ggml_backend_t)>();

  ffi.Pointer<ffi.Char> ggml_backend_buft_name(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_buft_name(
      buft,
    );
  }

  late final _ggml_backend_buft_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ggml_backend_buffer_type_t)>>('ggml_backend_buft_name');
  late final _ggml_backend_buft_name = _ggml_backend_buft_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_buffer_type_t)>();

  ggml_backend_buffer_t ggml_backend_buft_alloc_buffer(
    ggml_backend_buffer_type_t buft,
    int size,
  ) {
    return _ggml_backend_buft_alloc_buffer(
      buft,
      size,
    );
  }

  late final _ggml_backend_buft_alloc_bufferPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_t Function(ggml_backend_buffer_type_t,
              ffi.Size)>>('ggml_backend_buft_alloc_buffer');
  late final _ggml_backend_buft_alloc_buffer =
      _ggml_backend_buft_alloc_bufferPtr.asFunction<
          ggml_backend_buffer_t Function(ggml_backend_buffer_type_t, int)>();

  int ggml_backend_buft_get_alignment(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_buft_get_alignment(
      buft,
    );
  }

  late final _ggml_backend_buft_get_alignmentPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ggml_backend_buffer_type_t)>>(
      'ggml_backend_buft_get_alignment');
  late final _ggml_backend_buft_get_alignment =
      _ggml_backend_buft_get_alignmentPtr
          .asFunction<int Function(ggml_backend_buffer_type_t)>();

  int ggml_backend_buft_get_max_size(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_buft_get_max_size(
      buft,
    );
  }

  late final _ggml_backend_buft_get_max_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ggml_backend_buffer_type_t)>>(
      'ggml_backend_buft_get_max_size');
  late final _ggml_backend_buft_get_max_size =
      _ggml_backend_buft_get_max_sizePtr
          .asFunction<int Function(ggml_backend_buffer_type_t)>();

  int ggml_backend_buft_get_alloc_size(
    ggml_backend_buffer_type_t buft,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_backend_buft_get_alloc_size(
      buft,
      tensor,
    );
  }

  late final _ggml_backend_buft_get_alloc_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ggml_backend_buffer_type_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_buft_get_alloc_size');
  late final _ggml_backend_buft_get_alloc_size =
      _ggml_backend_buft_get_alloc_sizePtr.asFunction<
          int Function(ggml_backend_buffer_type_t, ffi.Pointer<ggml_tensor>)>();

  bool ggml_backend_buft_is_host(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_buft_is_host(
      buft,
    );
  }

  late final _ggml_backend_buft_is_hostPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ggml_backend_buffer_type_t)>>(
      'ggml_backend_buft_is_host');
  late final _ggml_backend_buft_is_host = _ggml_backend_buft_is_hostPtr
      .asFunction<bool Function(ggml_backend_buffer_type_t)>();

  ggml_backend_dev_t ggml_backend_buft_get_device(
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_buft_get_device(
      buft,
    );
  }

  late final _ggml_backend_buft_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_dev_t Function(
              ggml_backend_buffer_type_t)>>('ggml_backend_buft_get_device');
  late final _ggml_backend_buft_get_device = _ggml_backend_buft_get_devicePtr
      .asFunction<ggml_backend_dev_t Function(ggml_backend_buffer_type_t)>();

  ffi.Pointer<ffi.Char> ggml_backend_buffer_name(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_name(
      buffer,
    );
  }

  late final _ggml_backend_buffer_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ggml_backend_buffer_t)>>('ggml_backend_buffer_name');
  late final _ggml_backend_buffer_name = _ggml_backend_buffer_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_buffer_t)>();

  void ggml_backend_buffer_free(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_free(
      buffer,
    );
  }

  late final _ggml_backend_buffer_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_free');
  late final _ggml_backend_buffer_free = _ggml_backend_buffer_freePtr
      .asFunction<void Function(ggml_backend_buffer_t)>();

  ffi.Pointer<ffi.Void> ggml_backend_buffer_get_base(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_get_base(
      buffer,
    );
  }

  late final _ggml_backend_buffer_get_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ggml_backend_buffer_t)>>('ggml_backend_buffer_get_base');
  late final _ggml_backend_buffer_get_base = _ggml_backend_buffer_get_basePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ggml_backend_buffer_t)>();

  int ggml_backend_buffer_get_size(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_get_size(
      buffer,
    );
  }

  late final _ggml_backend_buffer_get_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_get_size');
  late final _ggml_backend_buffer_get_size = _ggml_backend_buffer_get_sizePtr
      .asFunction<int Function(ggml_backend_buffer_t)>();

  ggml_status ggml_backend_buffer_init_tensor(
    ggml_backend_buffer_t buffer,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return ggml_status.fromValue(_ggml_backend_buffer_init_tensor(
      buffer,
      tensor,
    ));
  }

  late final _ggml_backend_buffer_init_tensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggml_backend_buffer_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_buffer_init_tensor');
  late final _ggml_backend_buffer_init_tensor =
      _ggml_backend_buffer_init_tensorPtr.asFunction<
          int Function(ggml_backend_buffer_t, ffi.Pointer<ggml_tensor>)>();

  int ggml_backend_buffer_get_alignment(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_get_alignment(
      buffer,
    );
  }

  late final _ggml_backend_buffer_get_alignmentPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_get_alignment');
  late final _ggml_backend_buffer_get_alignment =
      _ggml_backend_buffer_get_alignmentPtr
          .asFunction<int Function(ggml_backend_buffer_t)>();

  int ggml_backend_buffer_get_max_size(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_get_max_size(
      buffer,
    );
  }

  late final _ggml_backend_buffer_get_max_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_get_max_size');
  late final _ggml_backend_buffer_get_max_size =
      _ggml_backend_buffer_get_max_sizePtr
          .asFunction<int Function(ggml_backend_buffer_t)>();

  int ggml_backend_buffer_get_alloc_size(
    ggml_backend_buffer_t buffer,
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return _ggml_backend_buffer_get_alloc_size(
      buffer,
      tensor,
    );
  }

  late final _ggml_backend_buffer_get_alloc_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ggml_backend_buffer_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_buffer_get_alloc_size');
  late final _ggml_backend_buffer_get_alloc_size =
      _ggml_backend_buffer_get_alloc_sizePtr.asFunction<
          int Function(ggml_backend_buffer_t, ffi.Pointer<ggml_tensor>)>();

  void ggml_backend_buffer_clear(
    ggml_backend_buffer_t buffer,
    int value,
  ) {
    return _ggml_backend_buffer_clear(
      buffer,
      value,
    );
  }

  late final _ggml_backend_buffer_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ggml_backend_buffer_t, ffi.Uint8)>>(
      'ggml_backend_buffer_clear');
  late final _ggml_backend_buffer_clear = _ggml_backend_buffer_clearPtr
      .asFunction<void Function(ggml_backend_buffer_t, int)>();

  bool ggml_backend_buffer_is_host(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_is_host(
      buffer,
    );
  }

  late final _ggml_backend_buffer_is_hostPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_is_host');
  late final _ggml_backend_buffer_is_host = _ggml_backend_buffer_is_hostPtr
      .asFunction<bool Function(ggml_backend_buffer_t)>();

  void ggml_backend_buffer_set_usage(
    ggml_backend_buffer_t buffer,
    ggml_backend_buffer_usage usage,
  ) {
    return _ggml_backend_buffer_set_usage(
      buffer,
      usage.value,
    );
  }

  late final _ggml_backend_buffer_set_usagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_buffer_t,
              ffi.UnsignedInt)>>('ggml_backend_buffer_set_usage');
  late final _ggml_backend_buffer_set_usage = _ggml_backend_buffer_set_usagePtr
      .asFunction<void Function(ggml_backend_buffer_t, int)>();

  ggml_backend_buffer_usage ggml_backend_buffer_get_usage(
    ggml_backend_buffer_t buffer,
  ) {
    return ggml_backend_buffer_usage.fromValue(_ggml_backend_buffer_get_usage(
      buffer,
    ));
  }

  late final _ggml_backend_buffer_get_usagePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ggml_backend_buffer_t)>>(
      'ggml_backend_buffer_get_usage');
  late final _ggml_backend_buffer_get_usage = _ggml_backend_buffer_get_usagePtr
      .asFunction<int Function(ggml_backend_buffer_t)>();

  ggml_backend_buffer_type_t ggml_backend_buffer_get_type(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_get_type(
      buffer,
    );
  }

  late final _ggml_backend_buffer_get_typePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_type_t Function(
              ggml_backend_buffer_t)>>('ggml_backend_buffer_get_type');
  late final _ggml_backend_buffer_get_type = _ggml_backend_buffer_get_typePtr
      .asFunction<ggml_backend_buffer_type_t Function(ggml_backend_buffer_t)>();

  void ggml_backend_buffer_reset(
    ggml_backend_buffer_t buffer,
  ) {
    return _ggml_backend_buffer_reset(
      buffer,
    );
  }

  late final _ggml_backend_buffer_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_buffer_t)>>(
          'ggml_backend_buffer_reset');
  late final _ggml_backend_buffer_reset = _ggml_backend_buffer_resetPtr
      .asFunction<void Function(ggml_backend_buffer_t)>();

  void ggml_backend_tensor_copy(
    ffi.Pointer<ggml_tensor> src,
    ffi.Pointer<ggml_tensor> dst,
  ) {
    return _ggml_backend_tensor_copy(
      src,
      dst,
    );
  }

  late final _ggml_backend_tensor_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_tensor_copy');
  late final _ggml_backend_tensor_copy =
      _ggml_backend_tensor_copyPtr.asFunction<
          void Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ggml_guid_t ggml_backend_guid(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_guid(
      backend,
    );
  }

  late final _ggml_backend_guidPtr =
      _lookup<ffi.NativeFunction<ggml_guid_t Function(ggml_backend_t)>>(
          'ggml_backend_guid');
  late final _ggml_backend_guid =
      _ggml_backend_guidPtr.asFunction<ggml_guid_t Function(ggml_backend_t)>();

  ffi.Pointer<ffi.Char> ggml_backend_name(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_name(
      backend,
    );
  }

  late final _ggml_backend_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_t)>>(
      'ggml_backend_name');
  late final _ggml_backend_name = _ggml_backend_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_t)>();

  void ggml_backend_free(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_free(
      backend,
    );
  }

  late final _ggml_backend_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_t)>>(
          'ggml_backend_free');
  late final _ggml_backend_free =
      _ggml_backend_freePtr.asFunction<void Function(ggml_backend_t)>();

  ggml_backend_buffer_type_t ggml_backend_get_default_buffer_type(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_get_default_buffer_type(
      backend,
    );
  }

  late final _ggml_backend_get_default_buffer_typePtr = _lookup<
          ffi
          .NativeFunction<ggml_backend_buffer_type_t Function(ggml_backend_t)>>(
      'ggml_backend_get_default_buffer_type');
  late final _ggml_backend_get_default_buffer_type =
      _ggml_backend_get_default_buffer_typePtr
          .asFunction<ggml_backend_buffer_type_t Function(ggml_backend_t)>();

  ggml_backend_buffer_t ggml_backend_alloc_buffer(
    ggml_backend_t backend,
    int size,
  ) {
    return _ggml_backend_alloc_buffer(
      backend,
      size,
    );
  }

  late final _ggml_backend_alloc_bufferPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_t Function(
              ggml_backend_t, ffi.Size)>>('ggml_backend_alloc_buffer');
  late final _ggml_backend_alloc_buffer = _ggml_backend_alloc_bufferPtr
      .asFunction<ggml_backend_buffer_t Function(ggml_backend_t, int)>();

  int ggml_backend_get_alignment(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_get_alignment(
      backend,
    );
  }

  late final _ggml_backend_get_alignmentPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_t)>>(
          'ggml_backend_get_alignment');
  late final _ggml_backend_get_alignment =
      _ggml_backend_get_alignmentPtr.asFunction<int Function(ggml_backend_t)>();

  int ggml_backend_get_max_size(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_get_max_size(
      backend,
    );
  }

  late final _ggml_backend_get_max_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_t)>>(
          'ggml_backend_get_max_size');
  late final _ggml_backend_get_max_size =
      _ggml_backend_get_max_sizePtr.asFunction<int Function(ggml_backend_t)>();

  void ggml_backend_tensor_set_async(
    ggml_backend_t backend,
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Void> data,
    int offset,
    int size,
  ) {
    return _ggml_backend_tensor_set_async(
      backend,
      tensor,
      data,
      offset,
      size,
    );
  }

  late final _ggml_backend_tensor_set_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_backend_t,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size)>>('ggml_backend_tensor_set_async');
  late final _ggml_backend_tensor_set_async =
      _ggml_backend_tensor_set_asyncPtr.asFunction<
          void Function(ggml_backend_t, ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>, int, int)>();

  void ggml_backend_tensor_get_async(
    ggml_backend_t backend,
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Void> data,
    int offset,
    int size,
  ) {
    return _ggml_backend_tensor_get_async(
      backend,
      tensor,
      data,
      offset,
      size,
    );
  }

  late final _ggml_backend_tensor_get_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_backend_t,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size)>>('ggml_backend_tensor_get_async');
  late final _ggml_backend_tensor_get_async =
      _ggml_backend_tensor_get_asyncPtr.asFunction<
          void Function(ggml_backend_t, ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>, int, int)>();

  void ggml_backend_tensor_set(
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Void> data,
    int offset,
    int size,
  ) {
    return _ggml_backend_tensor_set(
      tensor,
      data,
      offset,
      size,
    );
  }

  late final _ggml_backend_tensor_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Size)>>('ggml_backend_tensor_set');
  late final _ggml_backend_tensor_set = _ggml_backend_tensor_setPtr.asFunction<
      void Function(
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Void>, int, int)>();

  void ggml_backend_tensor_get(
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Void> data,
    int offset,
    int size,
  ) {
    return _ggml_backend_tensor_get(
      tensor,
      data,
      offset,
      size,
    );
  }

  late final _ggml_backend_tensor_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Size)>>('ggml_backend_tensor_get');
  late final _ggml_backend_tensor_get = _ggml_backend_tensor_getPtr.asFunction<
      void Function(
          ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Void>, int, int)>();

  void ggml_backend_tensor_memset(
    ffi.Pointer<ggml_tensor> tensor,
    int value,
    int offset,
    int size,
  ) {
    return _ggml_backend_tensor_memset(
      tensor,
      value,
      offset,
      size,
    );
  }

  late final _ggml_backend_tensor_memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Uint8, ffi.Size,
              ffi.Size)>>('ggml_backend_tensor_memset');
  late final _ggml_backend_tensor_memset = _ggml_backend_tensor_memsetPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int, int, int)>();

  void ggml_backend_synchronize(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_synchronize(
      backend,
    );
  }

  late final _ggml_backend_synchronizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_t)>>(
          'ggml_backend_synchronize');
  late final _ggml_backend_synchronize =
      _ggml_backend_synchronizePtr.asFunction<void Function(ggml_backend_t)>();

  ggml_backend_graph_plan_t ggml_backend_graph_plan_create(
    ggml_backend_t backend,
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return _ggml_backend_graph_plan_create(
      backend,
      cgraph,
    );
  }

  late final _ggml_backend_graph_plan_createPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_graph_plan_t Function(ggml_backend_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_graph_plan_create');
  late final _ggml_backend_graph_plan_create =
      _ggml_backend_graph_plan_createPtr.asFunction<
          ggml_backend_graph_plan_t Function(
              ggml_backend_t, ffi.Pointer<ggml_cgraph>)>();

  void ggml_backend_graph_plan_free(
    ggml_backend_t backend,
    ggml_backend_graph_plan_t plan,
  ) {
    return _ggml_backend_graph_plan_free(
      backend,
      plan,
    );
  }

  late final _ggml_backend_graph_plan_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_t,
              ggml_backend_graph_plan_t)>>('ggml_backend_graph_plan_free');
  late final _ggml_backend_graph_plan_free = _ggml_backend_graph_plan_freePtr
      .asFunction<void Function(ggml_backend_t, ggml_backend_graph_plan_t)>();

  ggml_status ggml_backend_graph_plan_compute(
    ggml_backend_t backend,
    ggml_backend_graph_plan_t plan,
  ) {
    return ggml_status.fromValue(_ggml_backend_graph_plan_compute(
      backend,
      plan,
    ));
  }

  late final _ggml_backend_graph_plan_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggml_backend_t,
              ggml_backend_graph_plan_t)>>('ggml_backend_graph_plan_compute');
  late final _ggml_backend_graph_plan_compute =
      _ggml_backend_graph_plan_computePtr.asFunction<
          int Function(ggml_backend_t, ggml_backend_graph_plan_t)>();

  ggml_status ggml_backend_graph_compute(
    ggml_backend_t backend,
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return ggml_status.fromValue(_ggml_backend_graph_compute(
      backend,
      cgraph,
    ));
  }

  late final _ggml_backend_graph_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggml_backend_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_graph_compute');
  late final _ggml_backend_graph_compute = _ggml_backend_graph_computePtr
      .asFunction<int Function(ggml_backend_t, ffi.Pointer<ggml_cgraph>)>();

  ggml_status ggml_backend_graph_compute_async(
    ggml_backend_t backend,
    ffi.Pointer<ggml_cgraph> cgraph,
  ) {
    return ggml_status.fromValue(_ggml_backend_graph_compute_async(
      backend,
      cgraph,
    ));
  }

  late final _ggml_backend_graph_compute_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggml_backend_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_graph_compute_async');
  late final _ggml_backend_graph_compute_async =
      _ggml_backend_graph_compute_asyncPtr
          .asFunction<int Function(ggml_backend_t, ffi.Pointer<ggml_cgraph>)>();

  bool ggml_backend_supports_op(
    ggml_backend_t backend,
    ffi.Pointer<ggml_tensor> op,
  ) {
    return _ggml_backend_supports_op(
      backend,
      op,
    );
  }

  late final _ggml_backend_supports_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_supports_op');
  late final _ggml_backend_supports_op = _ggml_backend_supports_opPtr
      .asFunction<bool Function(ggml_backend_t, ffi.Pointer<ggml_tensor>)>();

  bool ggml_backend_supports_buft(
    ggml_backend_t backend,
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_supports_buft(
      backend,
      buft,
    );
  }

  late final _ggml_backend_supports_buftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_t,
              ggml_backend_buffer_type_t)>>('ggml_backend_supports_buft');
  late final _ggml_backend_supports_buft = _ggml_backend_supports_buftPtr
      .asFunction<bool Function(ggml_backend_t, ggml_backend_buffer_type_t)>();

  bool ggml_backend_offload_op(
    ggml_backend_t backend,
    ffi.Pointer<ggml_tensor> op,
  ) {
    return _ggml_backend_offload_op(
      backend,
      op,
    );
  }

  late final _ggml_backend_offload_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_offload_op');
  late final _ggml_backend_offload_op = _ggml_backend_offload_opPtr
      .asFunction<bool Function(ggml_backend_t, ffi.Pointer<ggml_tensor>)>();

  void ggml_backend_tensor_copy_async(
    ggml_backend_t backend_src,
    ggml_backend_t backend_dst,
    ffi.Pointer<ggml_tensor> src,
    ffi.Pointer<ggml_tensor> dst,
  ) {
    return _ggml_backend_tensor_copy_async(
      backend_src,
      backend_dst,
      src,
      dst,
    );
  }

  late final _ggml_backend_tensor_copy_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_backend_t,
              ggml_backend_t,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_tensor_copy_async');
  late final _ggml_backend_tensor_copy_async =
      _ggml_backend_tensor_copy_asyncPtr.asFunction<
          void Function(ggml_backend_t, ggml_backend_t,
              ffi.Pointer<ggml_tensor>, ffi.Pointer<ggml_tensor>)>();

  ggml_backend_dev_t ggml_backend_get_device(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_get_device(
      backend,
    );
  }

  late final _ggml_backend_get_devicePtr =
      _lookup<ffi.NativeFunction<ggml_backend_dev_t Function(ggml_backend_t)>>(
          'ggml_backend_get_device');
  late final _ggml_backend_get_device = _ggml_backend_get_devicePtr
      .asFunction<ggml_backend_dev_t Function(ggml_backend_t)>();

  ggml_backend_event_t ggml_backend_event_new(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_event_new(
      device,
    );
  }

  late final _ggml_backend_event_newPtr = _lookup<
          ffi
          .NativeFunction<ggml_backend_event_t Function(ggml_backend_dev_t)>>(
      'ggml_backend_event_new');
  late final _ggml_backend_event_new = _ggml_backend_event_newPtr
      .asFunction<ggml_backend_event_t Function(ggml_backend_dev_t)>();

  void ggml_backend_event_free(
    ggml_backend_event_t event,
  ) {
    return _ggml_backend_event_free(
      event,
    );
  }

  late final _ggml_backend_event_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_event_t)>>(
          'ggml_backend_event_free');
  late final _ggml_backend_event_free = _ggml_backend_event_freePtr
      .asFunction<void Function(ggml_backend_event_t)>();

  void ggml_backend_event_record(
    ggml_backend_event_t event,
    ggml_backend_t backend,
  ) {
    return _ggml_backend_event_record(
      event,
      backend,
    );
  }

  late final _ggml_backend_event_recordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_event_t,
              ggml_backend_t)>>('ggml_backend_event_record');
  late final _ggml_backend_event_record = _ggml_backend_event_recordPtr
      .asFunction<void Function(ggml_backend_event_t, ggml_backend_t)>();

  void ggml_backend_event_synchronize(
    ggml_backend_event_t event,
  ) {
    return _ggml_backend_event_synchronize(
      event,
    );
  }

  late final _ggml_backend_event_synchronizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_event_t)>>(
          'ggml_backend_event_synchronize');
  late final _ggml_backend_event_synchronize =
      _ggml_backend_event_synchronizePtr
          .asFunction<void Function(ggml_backend_event_t)>();

  void ggml_backend_event_wait(
    ggml_backend_t backend,
    ggml_backend_event_t event,
  ) {
    return _ggml_backend_event_wait(
      backend,
      event,
    );
  }

  late final _ggml_backend_event_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_t,
              ggml_backend_event_t)>>('ggml_backend_event_wait');
  late final _ggml_backend_event_wait = _ggml_backend_event_waitPtr
      .asFunction<void Function(ggml_backend_t, ggml_backend_event_t)>();

  ffi.Pointer<ffi.Char> ggml_backend_dev_name(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_dev_name(
      device,
    );
  }

  late final _ggml_backend_dev_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_dev_t)>>(
      'ggml_backend_dev_name');
  late final _ggml_backend_dev_name = _ggml_backend_dev_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_dev_t)>();

  ffi.Pointer<ffi.Char> ggml_backend_dev_description(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_dev_description(
      device,
    );
  }

  late final _ggml_backend_dev_descriptionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_dev_t)>>(
      'ggml_backend_dev_description');
  late final _ggml_backend_dev_description = _ggml_backend_dev_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_dev_t)>();

  void ggml_backend_dev_memory(
    ggml_backend_dev_t device,
    ffi.Pointer<ffi.Size> free,
    ffi.Pointer<ffi.Size> total,
  ) {
    return _ggml_backend_dev_memory(
      device,
      free,
      total,
    );
  }

  late final _ggml_backend_dev_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_dev_t, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('ggml_backend_dev_memory');
  late final _ggml_backend_dev_memory = _ggml_backend_dev_memoryPtr.asFunction<
      void Function(
          ggml_backend_dev_t, ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Size>)>();

  ggml_backend_dev_type ggml_backend_dev_type$1(
    ggml_backend_dev_t device,
  ) {
    return ggml_backend_dev_type.fromValue(_ggml_backend_dev_type$1(
      device,
    ));
  }

  late final _ggml_backend_dev_type$1Ptr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ggml_backend_dev_t)>>(
          'ggml_backend_dev_type');
  late final _ggml_backend_dev_type$1 = _ggml_backend_dev_type$1Ptr
      .asFunction<int Function(ggml_backend_dev_t)>();

  void ggml_backend_dev_get_props(
    ggml_backend_dev_t device,
    ffi.Pointer<ggml_backend_dev_props> props,
  ) {
    return _ggml_backend_dev_get_props(
      device,
      props,
    );
  }

  late final _ggml_backend_dev_get_propsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ggml_backend_dev_t, ffi.Pointer<ggml_backend_dev_props>)>>(
      'ggml_backend_dev_get_props');
  late final _ggml_backend_dev_get_props =
      _ggml_backend_dev_get_propsPtr.asFunction<
          void Function(
              ggml_backend_dev_t, ffi.Pointer<ggml_backend_dev_props>)>();

  ggml_backend_reg_t ggml_backend_dev_backend_reg(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_dev_backend_reg(
      device,
    );
  }

  late final _ggml_backend_dev_backend_regPtr = _lookup<
          ffi.NativeFunction<ggml_backend_reg_t Function(ggml_backend_dev_t)>>(
      'ggml_backend_dev_backend_reg');
  late final _ggml_backend_dev_backend_reg = _ggml_backend_dev_backend_regPtr
      .asFunction<ggml_backend_reg_t Function(ggml_backend_dev_t)>();

  ggml_backend_t ggml_backend_dev_init(
    ggml_backend_dev_t device,
    ffi.Pointer<ffi.Char> params,
  ) {
    return _ggml_backend_dev_init(
      device,
      params,
    );
  }

  late final _ggml_backend_dev_initPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_t Function(ggml_backend_dev_t,
              ffi.Pointer<ffi.Char>)>>('ggml_backend_dev_init');
  late final _ggml_backend_dev_init = _ggml_backend_dev_initPtr.asFunction<
      ggml_backend_t Function(ggml_backend_dev_t, ffi.Pointer<ffi.Char>)>();

  ggml_backend_buffer_type_t ggml_backend_dev_buffer_type(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_dev_buffer_type(
      device,
    );
  }

  late final _ggml_backend_dev_buffer_typePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_type_t Function(
              ggml_backend_dev_t)>>('ggml_backend_dev_buffer_type');
  late final _ggml_backend_dev_buffer_type = _ggml_backend_dev_buffer_typePtr
      .asFunction<ggml_backend_buffer_type_t Function(ggml_backend_dev_t)>();

  ggml_backend_buffer_type_t ggml_backend_dev_host_buffer_type(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_dev_host_buffer_type(
      device,
    );
  }

  late final _ggml_backend_dev_host_buffer_typePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_type_t Function(
              ggml_backend_dev_t)>>('ggml_backend_dev_host_buffer_type');
  late final _ggml_backend_dev_host_buffer_type =
      _ggml_backend_dev_host_buffer_typePtr.asFunction<
          ggml_backend_buffer_type_t Function(ggml_backend_dev_t)>();

  ggml_backend_buffer_t ggml_backend_dev_buffer_from_host_ptr(
    ggml_backend_dev_t device,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int max_tensor_size,
  ) {
    return _ggml_backend_dev_buffer_from_host_ptr(
      device,
      ptr,
      size,
      max_tensor_size,
    );
  }

  late final _ggml_backend_dev_buffer_from_host_ptrPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_t Function(
              ggml_backend_dev_t,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size)>>('ggml_backend_dev_buffer_from_host_ptr');
  late final _ggml_backend_dev_buffer_from_host_ptr =
      _ggml_backend_dev_buffer_from_host_ptrPtr.asFunction<
          ggml_backend_buffer_t Function(
              ggml_backend_dev_t, ffi.Pointer<ffi.Void>, int, int)>();

  bool ggml_backend_dev_supports_op(
    ggml_backend_dev_t device,
    ffi.Pointer<ggml_tensor> op,
  ) {
    return _ggml_backend_dev_supports_op(
      device,
      op,
    );
  }

  late final _ggml_backend_dev_supports_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_dev_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_dev_supports_op');
  late final _ggml_backend_dev_supports_op =
      _ggml_backend_dev_supports_opPtr.asFunction<
          bool Function(ggml_backend_dev_t, ffi.Pointer<ggml_tensor>)>();

  bool ggml_backend_dev_supports_buft(
    ggml_backend_dev_t device,
    ggml_backend_buffer_type_t buft,
  ) {
    return _ggml_backend_dev_supports_buft(
      device,
      buft,
    );
  }

  late final _ggml_backend_dev_supports_buftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_dev_t,
              ggml_backend_buffer_type_t)>>('ggml_backend_dev_supports_buft');
  late final _ggml_backend_dev_supports_buft =
      _ggml_backend_dev_supports_buftPtr.asFunction<
          bool Function(ggml_backend_dev_t, ggml_backend_buffer_type_t)>();

  bool ggml_backend_dev_offload_op(
    ggml_backend_dev_t device,
    ffi.Pointer<ggml_tensor> op,
  ) {
    return _ggml_backend_dev_offload_op(
      device,
      op,
    );
  }

  late final _ggml_backend_dev_offload_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_dev_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_dev_offload_op');
  late final _ggml_backend_dev_offload_op =
      _ggml_backend_dev_offload_opPtr.asFunction<
          bool Function(ggml_backend_dev_t, ffi.Pointer<ggml_tensor>)>();

  ffi.Pointer<ffi.Char> ggml_backend_reg_name(
    ggml_backend_reg_t reg,
  ) {
    return _ggml_backend_reg_name(
      reg,
    );
  }

  late final _ggml_backend_reg_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_reg_t)>>(
      'ggml_backend_reg_name');
  late final _ggml_backend_reg_name = _ggml_backend_reg_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ggml_backend_reg_t)>();

  int ggml_backend_reg_dev_count(
    ggml_backend_reg_t reg,
  ) {
    return _ggml_backend_reg_dev_count(
      reg,
    );
  }

  late final _ggml_backend_reg_dev_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ggml_backend_reg_t)>>(
          'ggml_backend_reg_dev_count');
  late final _ggml_backend_reg_dev_count = _ggml_backend_reg_dev_countPtr
      .asFunction<int Function(ggml_backend_reg_t)>();

  ggml_backend_dev_t ggml_backend_reg_dev_get(
    ggml_backend_reg_t reg,
    int index,
  ) {
    return _ggml_backend_reg_dev_get(
      reg,
      index,
    );
  }

  late final _ggml_backend_reg_dev_getPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_dev_t Function(
              ggml_backend_reg_t, ffi.Size)>>('ggml_backend_reg_dev_get');
  late final _ggml_backend_reg_dev_get = _ggml_backend_reg_dev_getPtr
      .asFunction<ggml_backend_dev_t Function(ggml_backend_reg_t, int)>();

  ffi.Pointer<ffi.Void> ggml_backend_reg_get_proc_address(
    ggml_backend_reg_t reg,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_backend_reg_get_proc_address(
      reg,
      name,
    );
  }

  late final _ggml_backend_reg_get_proc_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ggml_backend_reg_t,
              ffi.Pointer<ffi.Char>)>>('ggml_backend_reg_get_proc_address');
  late final _ggml_backend_reg_get_proc_address =
      _ggml_backend_reg_get_proc_addressPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ggml_backend_reg_t, ffi.Pointer<ffi.Char>)>();

  void ggml_backend_device_register(
    ggml_backend_dev_t device,
  ) {
    return _ggml_backend_device_register(
      device,
    );
  }

  late final _ggml_backend_device_registerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_dev_t)>>(
          'ggml_backend_device_register');
  late final _ggml_backend_device_register = _ggml_backend_device_registerPtr
      .asFunction<void Function(ggml_backend_dev_t)>();

  int ggml_backend_reg_count() {
    return _ggml_backend_reg_count();
  }

  late final _ggml_backend_reg_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'ggml_backend_reg_count');
  late final _ggml_backend_reg_count =
      _ggml_backend_reg_countPtr.asFunction<int Function()>();

  ggml_backend_reg_t ggml_backend_reg_get(
    int index,
  ) {
    return _ggml_backend_reg_get(
      index,
    );
  }

  late final _ggml_backend_reg_getPtr =
      _lookup<ffi.NativeFunction<ggml_backend_reg_t Function(ffi.Size)>>(
          'ggml_backend_reg_get');
  late final _ggml_backend_reg_get =
      _ggml_backend_reg_getPtr.asFunction<ggml_backend_reg_t Function(int)>();

  ggml_backend_reg_t ggml_backend_reg_by_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_backend_reg_by_name(
      name,
    );
  }

  late final _ggml_backend_reg_by_namePtr = _lookup<
          ffi
          .NativeFunction<ggml_backend_reg_t Function(ffi.Pointer<ffi.Char>)>>(
      'ggml_backend_reg_by_name');
  late final _ggml_backend_reg_by_name = _ggml_backend_reg_by_namePtr
      .asFunction<ggml_backend_reg_t Function(ffi.Pointer<ffi.Char>)>();

  int ggml_backend_dev_count() {
    return _ggml_backend_dev_count();
  }

  late final _ggml_backend_dev_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'ggml_backend_dev_count');
  late final _ggml_backend_dev_count =
      _ggml_backend_dev_countPtr.asFunction<int Function()>();

  ggml_backend_dev_t ggml_backend_dev_get(
    int index,
  ) {
    return _ggml_backend_dev_get(
      index,
    );
  }

  late final _ggml_backend_dev_getPtr =
      _lookup<ffi.NativeFunction<ggml_backend_dev_t Function(ffi.Size)>>(
          'ggml_backend_dev_get');
  late final _ggml_backend_dev_get =
      _ggml_backend_dev_getPtr.asFunction<ggml_backend_dev_t Function(int)>();

  ggml_backend_dev_t ggml_backend_dev_by_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ggml_backend_dev_by_name(
      name,
    );
  }

  late final _ggml_backend_dev_by_namePtr = _lookup<
          ffi
          .NativeFunction<ggml_backend_dev_t Function(ffi.Pointer<ffi.Char>)>>(
      'ggml_backend_dev_by_name');
  late final _ggml_backend_dev_by_name = _ggml_backend_dev_by_namePtr
      .asFunction<ggml_backend_dev_t Function(ffi.Pointer<ffi.Char>)>();

  ggml_backend_dev_t ggml_backend_dev_by_type(
    ggml_backend_dev_type type,
  ) {
    return _ggml_backend_dev_by_type(
      type.value,
    );
  }

  late final _ggml_backend_dev_by_typePtr =
      _lookup<ffi.NativeFunction<ggml_backend_dev_t Function(ffi.UnsignedInt)>>(
          'ggml_backend_dev_by_type');
  late final _ggml_backend_dev_by_type = _ggml_backend_dev_by_typePtr
      .asFunction<ggml_backend_dev_t Function(int)>();

  ggml_backend_t ggml_backend_init_by_name(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> params,
  ) {
    return _ggml_backend_init_by_name(
      name,
      params,
    );
  }

  late final _ggml_backend_init_by_namePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ggml_backend_init_by_name');
  late final _ggml_backend_init_by_name =
      _ggml_backend_init_by_namePtr.asFunction<
          ggml_backend_t Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ggml_backend_t ggml_backend_init_by_type(
    ggml_backend_dev_type type,
    ffi.Pointer<ffi.Char> params,
  ) {
    return _ggml_backend_init_by_type(
      type.value,
      params,
    );
  }

  late final _ggml_backend_init_by_typePtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_t Function(ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('ggml_backend_init_by_type');
  late final _ggml_backend_init_by_type = _ggml_backend_init_by_typePtr
      .asFunction<ggml_backend_t Function(int, ffi.Pointer<ffi.Char>)>();

  ggml_backend_t ggml_backend_init_best() {
    return _ggml_backend_init_best();
  }

  late final _ggml_backend_init_bestPtr =
      _lookup<ffi.NativeFunction<ggml_backend_t Function()>>(
          'ggml_backend_init_best');
  late final _ggml_backend_init_best =
      _ggml_backend_init_bestPtr.asFunction<ggml_backend_t Function()>();

  ggml_backend_reg_t ggml_backend_load(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ggml_backend_load(
      path,
    );
  }

  late final _ggml_backend_loadPtr = _lookup<
          ffi
          .NativeFunction<ggml_backend_reg_t Function(ffi.Pointer<ffi.Char>)>>(
      'ggml_backend_load');
  late final _ggml_backend_load = _ggml_backend_loadPtr
      .asFunction<ggml_backend_reg_t Function(ffi.Pointer<ffi.Char>)>();

  void ggml_backend_unload(
    ggml_backend_reg_t reg,
  ) {
    return _ggml_backend_unload(
      reg,
    );
  }

  late final _ggml_backend_unloadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_reg_t)>>(
          'ggml_backend_unload');
  late final _ggml_backend_unload =
      _ggml_backend_unloadPtr.asFunction<void Function(ggml_backend_reg_t)>();

  void ggml_backend_load_all() {
    return _ggml_backend_load_all();
  }

  late final _ggml_backend_load_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_backend_load_all');
  late final _ggml_backend_load_all =
      _ggml_backend_load_allPtr.asFunction<void Function()>();

  void ggml_backend_load_all_from_path(
    ffi.Pointer<ffi.Char> dir_path,
  ) {
    return _ggml_backend_load_all_from_path(
      dir_path,
    );
  }

  late final _ggml_backend_load_all_from_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'ggml_backend_load_all_from_path');
  late final _ggml_backend_load_all_from_path =
      _ggml_backend_load_all_from_pathPtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ggml_backend_sched_t ggml_backend_sched_new(
    ffi.Pointer<ggml_backend_t> backends,
    ffi.Pointer<ggml_backend_buffer_type_t> bufts,
    int n_backends,
    int graph_size,
    bool parallel,
    bool op_offload,
  ) {
    return _ggml_backend_sched_new(
      backends,
      bufts,
      n_backends,
      graph_size,
      parallel,
      op_offload,
    );
  }

  late final _ggml_backend_sched_newPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_sched_t Function(
              ffi.Pointer<ggml_backend_t>,
              ffi.Pointer<ggml_backend_buffer_type_t>,
              ffi.Int,
              ffi.Size,
              ffi.Bool,
              ffi.Bool)>>('ggml_backend_sched_new');
  late final _ggml_backend_sched_new = _ggml_backend_sched_newPtr.asFunction<
      ggml_backend_sched_t Function(ffi.Pointer<ggml_backend_t>,
          ffi.Pointer<ggml_backend_buffer_type_t>, int, int, bool, bool)>();

  void ggml_backend_sched_free(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_free(
      sched,
    );
  }

  late final _ggml_backend_sched_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_free');
  late final _ggml_backend_sched_free = _ggml_backend_sched_freePtr
      .asFunction<void Function(ggml_backend_sched_t)>();

  bool ggml_backend_sched_reserve(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_cgraph> measure_graph,
  ) {
    return _ggml_backend_sched_reserve(
      sched,
      measure_graph,
    );
  }

  late final _ggml_backend_sched_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_sched_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_sched_reserve');
  late final _ggml_backend_sched_reserve =
      _ggml_backend_sched_reservePtr.asFunction<
          bool Function(ggml_backend_sched_t, ffi.Pointer<ggml_cgraph>)>();

  int ggml_backend_sched_get_n_backends(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_get_n_backends(
      sched,
    );
  }

  late final _ggml_backend_sched_get_n_backendsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_get_n_backends');
  late final _ggml_backend_sched_get_n_backends =
      _ggml_backend_sched_get_n_backendsPtr
          .asFunction<int Function(ggml_backend_sched_t)>();

  ggml_backend_t ggml_backend_sched_get_backend(
    ggml_backend_sched_t sched,
    int i,
  ) {
    return _ggml_backend_sched_get_backend(
      sched,
      i,
    );
  }

  late final _ggml_backend_sched_get_backendPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_t Function(ggml_backend_sched_t,
              ffi.Int)>>('ggml_backend_sched_get_backend');
  late final _ggml_backend_sched_get_backend =
      _ggml_backend_sched_get_backendPtr
          .asFunction<ggml_backend_t Function(ggml_backend_sched_t, int)>();

  int ggml_backend_sched_get_n_splits(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_get_n_splits(
      sched,
    );
  }

  late final _ggml_backend_sched_get_n_splitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_get_n_splits');
  late final _ggml_backend_sched_get_n_splits =
      _ggml_backend_sched_get_n_splitsPtr
          .asFunction<int Function(ggml_backend_sched_t)>();

  int ggml_backend_sched_get_n_copies(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_get_n_copies(
      sched,
    );
  }

  late final _ggml_backend_sched_get_n_copiesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_get_n_copies');
  late final _ggml_backend_sched_get_n_copies =
      _ggml_backend_sched_get_n_copiesPtr
          .asFunction<int Function(ggml_backend_sched_t)>();

  int ggml_backend_sched_get_buffer_size(
    ggml_backend_sched_t sched,
    ggml_backend_t backend,
  ) {
    return _ggml_backend_sched_get_buffer_size(
      sched,
      backend,
    );
  }

  late final _ggml_backend_sched_get_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ggml_backend_sched_t,
              ggml_backend_t)>>('ggml_backend_sched_get_buffer_size');
  late final _ggml_backend_sched_get_buffer_size =
      _ggml_backend_sched_get_buffer_sizePtr
          .asFunction<int Function(ggml_backend_sched_t, ggml_backend_t)>();

  void ggml_backend_sched_set_tensor_backend(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_tensor> node,
    ggml_backend_t backend,
  ) {
    return _ggml_backend_sched_set_tensor_backend(
      sched,
      node,
      backend,
    );
  }

  late final _ggml_backend_sched_set_tensor_backendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_sched_t, ffi.Pointer<ggml_tensor>,
              ggml_backend_t)>>('ggml_backend_sched_set_tensor_backend');
  late final _ggml_backend_sched_set_tensor_backend =
      _ggml_backend_sched_set_tensor_backendPtr.asFunction<
          void Function(ggml_backend_sched_t, ffi.Pointer<ggml_tensor>,
              ggml_backend_t)>();

  ggml_backend_t ggml_backend_sched_get_tensor_backend(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_tensor> node,
  ) {
    return _ggml_backend_sched_get_tensor_backend(
      sched,
      node,
    );
  }

  late final _ggml_backend_sched_get_tensor_backendPtr = _lookup<
          ffi.NativeFunction<
              ggml_backend_t Function(
                  ggml_backend_sched_t, ffi.Pointer<ggml_tensor>)>>(
      'ggml_backend_sched_get_tensor_backend');
  late final _ggml_backend_sched_get_tensor_backend =
      _ggml_backend_sched_get_tensor_backendPtr.asFunction<
          ggml_backend_t Function(
              ggml_backend_sched_t, ffi.Pointer<ggml_tensor>)>();

  bool ggml_backend_sched_alloc_graph(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return _ggml_backend_sched_alloc_graph(
      sched,
      graph,
    );
  }

  late final _ggml_backend_sched_alloc_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ggml_backend_sched_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_sched_alloc_graph');
  late final _ggml_backend_sched_alloc_graph =
      _ggml_backend_sched_alloc_graphPtr.asFunction<
          bool Function(ggml_backend_sched_t, ffi.Pointer<ggml_cgraph>)>();

  ggml_status ggml_backend_sched_graph_compute(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return ggml_status.fromValue(_ggml_backend_sched_graph_compute(
      sched,
      graph,
    ));
  }

  late final _ggml_backend_sched_graph_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggml_backend_sched_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_sched_graph_compute');
  late final _ggml_backend_sched_graph_compute =
      _ggml_backend_sched_graph_computePtr.asFunction<
          int Function(ggml_backend_sched_t, ffi.Pointer<ggml_cgraph>)>();

  ggml_status ggml_backend_sched_graph_compute_async(
    ggml_backend_sched_t sched,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return ggml_status.fromValue(_ggml_backend_sched_graph_compute_async(
      sched,
      graph,
    ));
  }

  late final _ggml_backend_sched_graph_compute_asyncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ggml_backend_sched_t, ffi.Pointer<ggml_cgraph>)>>(
      'ggml_backend_sched_graph_compute_async');
  late final _ggml_backend_sched_graph_compute_async =
      _ggml_backend_sched_graph_compute_asyncPtr.asFunction<
          int Function(ggml_backend_sched_t, ffi.Pointer<ggml_cgraph>)>();

  void ggml_backend_sched_synchronize(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_synchronize(
      sched,
    );
  }

  late final _ggml_backend_sched_synchronizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_synchronize');
  late final _ggml_backend_sched_synchronize =
      _ggml_backend_sched_synchronizePtr
          .asFunction<void Function(ggml_backend_sched_t)>();

  void ggml_backend_sched_reset(
    ggml_backend_sched_t sched,
  ) {
    return _ggml_backend_sched_reset(
      sched,
    );
  }

  late final _ggml_backend_sched_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_sched_t)>>(
          'ggml_backend_sched_reset');
  late final _ggml_backend_sched_reset = _ggml_backend_sched_resetPtr
      .asFunction<void Function(ggml_backend_sched_t)>();

  void ggml_backend_sched_set_eval_callback(
    ggml_backend_sched_t sched,
    ggml_backend_sched_eval_callback callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _ggml_backend_sched_set_eval_callback(
      sched,
      callback,
      user_data,
    );
  }

  late final _ggml_backend_sched_set_eval_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_backend_sched_t,
              ggml_backend_sched_eval_callback,
              ffi.Pointer<ffi.Void>)>>('ggml_backend_sched_set_eval_callback');
  late final _ggml_backend_sched_set_eval_callback =
      _ggml_backend_sched_set_eval_callbackPtr.asFunction<
          void Function(ggml_backend_sched_t, ggml_backend_sched_eval_callback,
              ffi.Pointer<ffi.Void>)>();

  ggml_backend_graph_copy ggml_backend_graph_copy$1(
    ggml_backend_t backend,
    ffi.Pointer<ggml_cgraph> graph,
  ) {
    return _ggml_backend_graph_copy$1(
      backend,
      graph,
    );
  }

  late final _ggml_backend_graph_copy$1Ptr = _lookup<
      ffi.NativeFunction<
          ggml_backend_graph_copy Function(ggml_backend_t,
              ffi.Pointer<ggml_cgraph>)>>('ggml_backend_graph_copy');
  late final _ggml_backend_graph_copy$1 =
      _ggml_backend_graph_copy$1Ptr.asFunction<
          ggml_backend_graph_copy Function(
              ggml_backend_t, ffi.Pointer<ggml_cgraph>)>();

  void ggml_backend_graph_copy_free(
    ggml_backend_graph_copy copy,
  ) {
    return _ggml_backend_graph_copy_free(
      copy,
    );
  }

  late final _ggml_backend_graph_copy_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_graph_copy)>>(
          'ggml_backend_graph_copy_free');
  late final _ggml_backend_graph_copy_free = _ggml_backend_graph_copy_freePtr
      .asFunction<void Function(ggml_backend_graph_copy)>();

  bool ggml_backend_compare_graph_backend(
    ggml_backend_t backend1,
    ggml_backend_t backend2,
    ffi.Pointer<ggml_cgraph> graph,
    ggml_backend_eval_callback callback,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ggml_tensor> test_node,
  ) {
    return _ggml_backend_compare_graph_backend(
      backend1,
      backend2,
      graph,
      callback,
      user_data,
      test_node,
    );
  }

  late final _ggml_backend_compare_graph_backendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ggml_backend_t,
              ggml_backend_t,
              ffi.Pointer<ggml_cgraph>,
              ggml_backend_eval_callback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ggml_tensor>)>>('ggml_backend_compare_graph_backend');
  late final _ggml_backend_compare_graph_backend =
      _ggml_backend_compare_graph_backendPtr.asFunction<
          bool Function(
              ggml_backend_t,
              ggml_backend_t,
              ffi.Pointer<ggml_cgraph>,
              ggml_backend_eval_callback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ggml_tensor>)>();

  ggml_status ggml_backend_tensor_alloc(
    ggml_backend_buffer_t buffer,
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Void> addr,
  ) {
    return ggml_status.fromValue(_ggml_backend_tensor_alloc(
      buffer,
      tensor,
      addr,
    ));
  }

  late final _ggml_backend_tensor_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ggml_backend_buffer_t, ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>)>>('ggml_backend_tensor_alloc');
  late final _ggml_backend_tensor_alloc =
      _ggml_backend_tensor_allocPtr.asFunction<
          int Function(ggml_backend_buffer_t, ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>)>();

  ggml_status ggml_backend_view_init(
    ffi.Pointer<ggml_tensor> tensor,
  ) {
    return ggml_status.fromValue(_ggml_backend_view_init(
      tensor,
    ));
  }

  late final _ggml_backend_view_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ggml_tensor>)>>(
          'ggml_backend_view_init');
  late final _ggml_backend_view_init = _ggml_backend_view_initPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>)>();

  ggml_backend_buffer_t ggml_backend_cpu_buffer_from_ptr(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _ggml_backend_cpu_buffer_from_ptr(
      ptr,
      size,
    );
  }

  late final _ggml_backend_cpu_buffer_from_ptrPtr = _lookup<
      ffi.NativeFunction<
          ggml_backend_buffer_t Function(ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ggml_backend_cpu_buffer_from_ptr');
  late final _ggml_backend_cpu_buffer_from_ptr =
      _ggml_backend_cpu_buffer_from_ptrPtr.asFunction<
          ggml_backend_buffer_t Function(ffi.Pointer<ffi.Void>, int)>();

  ggml_backend_buffer_type_t ggml_backend_cpu_buffer_type() {
    return _ggml_backend_cpu_buffer_type();
  }

  late final _ggml_backend_cpu_buffer_typePtr =
      _lookup<ffi.NativeFunction<ggml_backend_buffer_type_t Function()>>(
          'ggml_backend_cpu_buffer_type');
  late final _ggml_backend_cpu_buffer_type = _ggml_backend_cpu_buffer_typePtr
      .asFunction<ggml_backend_buffer_type_t Function()>();

  void ggml_numa_init(
    ggml_numa_strategy numa,
  ) {
    return _ggml_numa_init(
      numa.value,
    );
  }

  late final _ggml_numa_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'ggml_numa_init');
  late final _ggml_numa_init =
      _ggml_numa_initPtr.asFunction<void Function(int)>();

  bool ggml_is_numa() {
    return _ggml_is_numa();
  }

  late final _ggml_is_numaPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('ggml_is_numa');
  late final _ggml_is_numa = _ggml_is_numaPtr.asFunction<bool Function()>();

  ffi.Pointer<ggml_tensor> ggml_new_i32(
    ffi.Pointer<ggml_context> ctx,
    int value,
  ) {
    return _ggml_new_i32(
      ctx,
      value,
    );
  }

  late final _ggml_new_i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Int32)>>('ggml_new_i32');
  late final _ggml_new_i32 = _ggml_new_i32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, int)>();

  ffi.Pointer<ggml_tensor> ggml_new_f32(
    ffi.Pointer<ggml_context> ctx,
    double value,
  ) {
    return _ggml_new_f32(
      ctx,
      value,
    );
  }

  late final _ggml_new_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_context>, ffi.Float)>>('ggml_new_f32');
  late final _ggml_new_f32 = _ggml_new_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_context>, double)>();

  ffi.Pointer<ggml_tensor> ggml_set_i32(
    ffi.Pointer<ggml_tensor> tensor,
    int value,
  ) {
    return _ggml_set_i32(
      tensor,
      value,
    );
  }

  late final _ggml_set_i32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>, ffi.Int32)>>('ggml_set_i32');
  late final _ggml_set_i32 = _ggml_set_i32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>, int)>();

  ffi.Pointer<ggml_tensor> ggml_set_f32(
    ffi.Pointer<ggml_tensor> tensor,
    double value,
  ) {
    return _ggml_set_f32(
      tensor,
      value,
    );
  }

  late final _ggml_set_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ffi.Pointer<ggml_tensor>, ffi.Float)>>('ggml_set_f32');
  late final _ggml_set_f32 = _ggml_set_f32Ptr.asFunction<
      ffi.Pointer<ggml_tensor> Function(ffi.Pointer<ggml_tensor>, double)>();

  int ggml_get_i32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
  ) {
    return _ggml_get_i32_1d(
      tensor,
      i,
    );
  }

  late final _ggml_get_i32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_get_i32_1d');
  late final _ggml_get_i32_1d = _ggml_get_i32_1dPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>, int)>();

  void ggml_set_i32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
    int value,
  ) {
    return _ggml_set_i32_1d(
      tensor,
      i,
      value,
    );
  }

  late final _ggml_set_i32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int,
              ffi.Int32)>>('ggml_set_i32_1d');
  late final _ggml_set_i32_1d = _ggml_set_i32_1dPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int, int)>();

  int ggml_get_i32_nd(
    ffi.Pointer<ggml_tensor> tensor,
    int i0,
    int i1,
    int i2,
    int i3,
  ) {
    return _ggml_get_i32_nd(
      tensor,
      i0,
      i1,
      i2,
      i3,
    );
  }

  late final _ggml_get_i32_ndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('ggml_get_i32_nd');
  late final _ggml_get_i32_nd = _ggml_get_i32_ndPtr
      .asFunction<int Function(ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  void ggml_set_i32_nd(
    ffi.Pointer<ggml_tensor> tensor,
    int i0,
    int i1,
    int i2,
    int i3,
    int value,
  ) {
    return _ggml_set_i32_nd(
      tensor,
      i0,
      i1,
      i2,
      i3,
      value,
    );
  }

  late final _ggml_set_i32_ndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int32)>>('ggml_set_i32_nd');
  late final _ggml_set_i32_nd = _ggml_set_i32_ndPtr.asFunction<
      void Function(ffi.Pointer<ggml_tensor>, int, int, int, int, int)>();

  double ggml_get_f32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
  ) {
    return _ggml_get_f32_1d(
      tensor,
      i,
    );
  }

  late final _ggml_get_f32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ggml_tensor>, ffi.Int)>>('ggml_get_f32_1d');
  late final _ggml_get_f32_1d = _ggml_get_f32_1dPtr
      .asFunction<double Function(ffi.Pointer<ggml_tensor>, int)>();

  void ggml_set_f32_1d(
    ffi.Pointer<ggml_tensor> tensor,
    int i,
    double value,
  ) {
    return _ggml_set_f32_1d(
      tensor,
      i,
      value,
    );
  }

  late final _ggml_set_f32_1dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int,
              ffi.Float)>>('ggml_set_f32_1d');
  late final _ggml_set_f32_1d = _ggml_set_f32_1dPtr
      .asFunction<void Function(ffi.Pointer<ggml_tensor>, int, double)>();

  double ggml_get_f32_nd(
    ffi.Pointer<ggml_tensor> tensor,
    int i0,
    int i1,
    int i2,
    int i3,
  ) {
    return _ggml_get_f32_nd(
      tensor,
      i0,
      i1,
      i2,
      i3,
    );
  }

  late final _ggml_get_f32_ndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('ggml_get_f32_nd');
  late final _ggml_get_f32_nd = _ggml_get_f32_ndPtr.asFunction<
      double Function(ffi.Pointer<ggml_tensor>, int, int, int, int)>();

  void ggml_set_f32_nd(
    ffi.Pointer<ggml_tensor> tensor,
    int i0,
    int i1,
    int i2,
    int i3,
    double value,
  ) {
    return _ggml_set_f32_nd(
      tensor,
      i0,
      i1,
      i2,
      i3,
      value,
    );
  }

  late final _ggml_set_f32_ndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_tensor>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Float)>>('ggml_set_f32_nd');
  late final _ggml_set_f32_nd = _ggml_set_f32_ndPtr.asFunction<
      void Function(ffi.Pointer<ggml_tensor>, int, int, int, int, double)>();

  ffi.Pointer<ggml_threadpool> ggml_threadpool_new(
    ffi.Pointer<ggml_threadpool_params> params,
  ) {
    return _ggml_threadpool_new(
      params,
    );
  }

  late final _ggml_threadpool_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_threadpool> Function(
              ffi.Pointer<ggml_threadpool_params>)>>('ggml_threadpool_new');
  late final _ggml_threadpool_new = _ggml_threadpool_newPtr.asFunction<
      ffi.Pointer<ggml_threadpool> Function(
          ffi.Pointer<ggml_threadpool_params>)>();

  void ggml_threadpool_free(
    ffi.Pointer<ggml_threadpool> threadpool,
  ) {
    return _ggml_threadpool_free(
      threadpool,
    );
  }

  late final _ggml_threadpool_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_threadpool>)>>(
      'ggml_threadpool_free');
  late final _ggml_threadpool_free = _ggml_threadpool_freePtr
      .asFunction<void Function(ffi.Pointer<ggml_threadpool>)>();

  int ggml_threadpool_get_n_threads(
    ffi.Pointer<ggml_threadpool> threadpool,
  ) {
    return _ggml_threadpool_get_n_threads(
      threadpool,
    );
  }

  late final _ggml_threadpool_get_n_threadsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ggml_threadpool>)>>(
      'ggml_threadpool_get_n_threads');
  late final _ggml_threadpool_get_n_threads = _ggml_threadpool_get_n_threadsPtr
      .asFunction<int Function(ffi.Pointer<ggml_threadpool>)>();

  void ggml_threadpool_pause(
    ffi.Pointer<ggml_threadpool> threadpool,
  ) {
    return _ggml_threadpool_pause(
      threadpool,
    );
  }

  late final _ggml_threadpool_pausePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_threadpool>)>>(
      'ggml_threadpool_pause');
  late final _ggml_threadpool_pause = _ggml_threadpool_pausePtr
      .asFunction<void Function(ffi.Pointer<ggml_threadpool>)>();

  void ggml_threadpool_resume(
    ffi.Pointer<ggml_threadpool> threadpool,
  ) {
    return _ggml_threadpool_resume(
      threadpool,
    );
  }

  late final _ggml_threadpool_resumePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ggml_threadpool>)>>(
      'ggml_threadpool_resume');
  late final _ggml_threadpool_resume = _ggml_threadpool_resumePtr
      .asFunction<void Function(ffi.Pointer<ggml_threadpool>)>();

  ggml_cplan ggml_graph_plan(
    ffi.Pointer<ggml_cgraph> cgraph,
    int n_threads,
    ffi.Pointer<ggml_threadpool> threadpool,
  ) {
    return _ggml_graph_plan(
      cgraph,
      n_threads,
      threadpool,
    );
  }

  late final _ggml_graph_planPtr = _lookup<
      ffi.NativeFunction<
          ggml_cplan Function(ffi.Pointer<ggml_cgraph>, ffi.Int,
              ffi.Pointer<ggml_threadpool>)>>('ggml_graph_plan');
  late final _ggml_graph_plan = _ggml_graph_planPtr.asFunction<
      ggml_cplan Function(
          ffi.Pointer<ggml_cgraph>, int, ffi.Pointer<ggml_threadpool>)>();

  ggml_status ggml_graph_compute(
    ffi.Pointer<ggml_cgraph> cgraph,
    ffi.Pointer<ggml_cplan> cplan,
  ) {
    return ggml_status.fromValue(_ggml_graph_compute(
      cgraph,
      cplan,
    ));
  }

  late final _ggml_graph_computePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_cplan>)>>('ggml_graph_compute');
  late final _ggml_graph_compute = _ggml_graph_computePtr.asFunction<
      int Function(ffi.Pointer<ggml_cgraph>, ffi.Pointer<ggml_cplan>)>();

  ggml_status ggml_graph_compute_with_ctx(
    ffi.Pointer<ggml_context> ctx,
    ffi.Pointer<ggml_cgraph> cgraph,
    int n_threads,
  ) {
    return ggml_status.fromValue(_ggml_graph_compute_with_ctx(
      ctx,
      cgraph,
      n_threads,
    ));
  }

  late final _ggml_graph_compute_with_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>,
              ffi.Int)>>('ggml_graph_compute_with_ctx');
  late final _ggml_graph_compute_with_ctx =
      _ggml_graph_compute_with_ctxPtr.asFunction<
          int Function(
              ffi.Pointer<ggml_context>, ffi.Pointer<ggml_cgraph>, int)>();

  int ggml_cpu_has_sse3() {
    return _ggml_cpu_has_sse3();
  }

  late final _ggml_cpu_has_sse3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_sse3');
  late final _ggml_cpu_has_sse3 =
      _ggml_cpu_has_sse3Ptr.asFunction<int Function()>();

  int ggml_cpu_has_ssse3() {
    return _ggml_cpu_has_ssse3();
  }

  late final _ggml_cpu_has_ssse3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_ssse3');
  late final _ggml_cpu_has_ssse3 =
      _ggml_cpu_has_ssse3Ptr.asFunction<int Function()>();

  int ggml_cpu_has_avx() {
    return _ggml_cpu_has_avx();
  }

  late final _ggml_cpu_has_avxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx');
  late final _ggml_cpu_has_avx =
      _ggml_cpu_has_avxPtr.asFunction<int Function()>();

  int ggml_cpu_has_avx_vnni() {
    return _ggml_cpu_has_avx_vnni();
  }

  late final _ggml_cpu_has_avx_vnniPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx_vnni');
  late final _ggml_cpu_has_avx_vnni =
      _ggml_cpu_has_avx_vnniPtr.asFunction<int Function()>();

  int ggml_cpu_has_avx2() {
    return _ggml_cpu_has_avx2();
  }

  late final _ggml_cpu_has_avx2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx2');
  late final _ggml_cpu_has_avx2 =
      _ggml_cpu_has_avx2Ptr.asFunction<int Function()>();

  int ggml_cpu_has_bmi2() {
    return _ggml_cpu_has_bmi2();
  }

  late final _ggml_cpu_has_bmi2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_bmi2');
  late final _ggml_cpu_has_bmi2 =
      _ggml_cpu_has_bmi2Ptr.asFunction<int Function()>();

  int ggml_cpu_has_f16c() {
    return _ggml_cpu_has_f16c();
  }

  late final _ggml_cpu_has_f16cPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_f16c');
  late final _ggml_cpu_has_f16c =
      _ggml_cpu_has_f16cPtr.asFunction<int Function()>();

  int ggml_cpu_has_fma() {
    return _ggml_cpu_has_fma();
  }

  late final _ggml_cpu_has_fmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_fma');
  late final _ggml_cpu_has_fma =
      _ggml_cpu_has_fmaPtr.asFunction<int Function()>();

  int ggml_cpu_has_avx512() {
    return _ggml_cpu_has_avx512();
  }

  late final _ggml_cpu_has_avx512Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_avx512');
  late final _ggml_cpu_has_avx512 =
      _ggml_cpu_has_avx512Ptr.asFunction<int Function()>();

  int ggml_cpu_has_avx512_vbmi() {
    return _ggml_cpu_has_avx512_vbmi();
  }

  late final _ggml_cpu_has_avx512_vbmiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ggml_cpu_has_avx512_vbmi');
  late final _ggml_cpu_has_avx512_vbmi =
      _ggml_cpu_has_avx512_vbmiPtr.asFunction<int Function()>();

  int ggml_cpu_has_avx512_vnni() {
    return _ggml_cpu_has_avx512_vnni();
  }

  late final _ggml_cpu_has_avx512_vnniPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ggml_cpu_has_avx512_vnni');
  late final _ggml_cpu_has_avx512_vnni =
      _ggml_cpu_has_avx512_vnniPtr.asFunction<int Function()>();

  int ggml_cpu_has_avx512_bf16() {
    return _ggml_cpu_has_avx512_bf16();
  }

  late final _ggml_cpu_has_avx512_bf16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ggml_cpu_has_avx512_bf16');
  late final _ggml_cpu_has_avx512_bf16 =
      _ggml_cpu_has_avx512_bf16Ptr.asFunction<int Function()>();

  int ggml_cpu_has_amx_int8() {
    return _ggml_cpu_has_amx_int8();
  }

  late final _ggml_cpu_has_amx_int8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_amx_int8');
  late final _ggml_cpu_has_amx_int8 =
      _ggml_cpu_has_amx_int8Ptr.asFunction<int Function()>();

  int ggml_cpu_has_neon() {
    return _ggml_cpu_has_neon();
  }

  late final _ggml_cpu_has_neonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_neon');
  late final _ggml_cpu_has_neon =
      _ggml_cpu_has_neonPtr.asFunction<int Function()>();

  int ggml_cpu_has_arm_fma() {
    return _ggml_cpu_has_arm_fma();
  }

  late final _ggml_cpu_has_arm_fmaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_arm_fma');
  late final _ggml_cpu_has_arm_fma =
      _ggml_cpu_has_arm_fmaPtr.asFunction<int Function()>();

  int ggml_cpu_has_fp16_va() {
    return _ggml_cpu_has_fp16_va();
  }

  late final _ggml_cpu_has_fp16_vaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_fp16_va');
  late final _ggml_cpu_has_fp16_va =
      _ggml_cpu_has_fp16_vaPtr.asFunction<int Function()>();

  int ggml_cpu_has_dotprod() {
    return _ggml_cpu_has_dotprod();
  }

  late final _ggml_cpu_has_dotprodPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_dotprod');
  late final _ggml_cpu_has_dotprod =
      _ggml_cpu_has_dotprodPtr.asFunction<int Function()>();

  int ggml_cpu_has_matmul_int8() {
    return _ggml_cpu_has_matmul_int8();
  }

  late final _ggml_cpu_has_matmul_int8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ggml_cpu_has_matmul_int8');
  late final _ggml_cpu_has_matmul_int8 =
      _ggml_cpu_has_matmul_int8Ptr.asFunction<int Function()>();

  int ggml_cpu_has_sve() {
    return _ggml_cpu_has_sve();
  }

  late final _ggml_cpu_has_svePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_sve');
  late final _ggml_cpu_has_sve =
      _ggml_cpu_has_svePtr.asFunction<int Function()>();

  int ggml_cpu_get_sve_cnt() {
    return _ggml_cpu_get_sve_cnt();
  }

  late final _ggml_cpu_get_sve_cntPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_get_sve_cnt');
  late final _ggml_cpu_get_sve_cnt =
      _ggml_cpu_get_sve_cntPtr.asFunction<int Function()>();

  int ggml_cpu_has_sme() {
    return _ggml_cpu_has_sme();
  }

  late final _ggml_cpu_has_smePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_sme');
  late final _ggml_cpu_has_sme =
      _ggml_cpu_has_smePtr.asFunction<int Function()>();

  int ggml_cpu_has_riscv_v() {
    return _ggml_cpu_has_riscv_v();
  }

  late final _ggml_cpu_has_riscv_vPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_riscv_v');
  late final _ggml_cpu_has_riscv_v =
      _ggml_cpu_has_riscv_vPtr.asFunction<int Function()>();

  int ggml_cpu_has_vsx() {
    return _ggml_cpu_has_vsx();
  }

  late final _ggml_cpu_has_vsxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_vsx');
  late final _ggml_cpu_has_vsx =
      _ggml_cpu_has_vsxPtr.asFunction<int Function()>();

  int ggml_cpu_has_vxe() {
    return _ggml_cpu_has_vxe();
  }

  late final _ggml_cpu_has_vxePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_vxe');
  late final _ggml_cpu_has_vxe =
      _ggml_cpu_has_vxePtr.asFunction<int Function()>();

  int ggml_cpu_has_nnpa() {
    return _ggml_cpu_has_nnpa();
  }

  late final _ggml_cpu_has_nnpaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_nnpa');
  late final _ggml_cpu_has_nnpa =
      _ggml_cpu_has_nnpaPtr.asFunction<int Function()>();

  int ggml_cpu_has_wasm_simd() {
    return _ggml_cpu_has_wasm_simd();
  }

  late final _ggml_cpu_has_wasm_simdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_wasm_simd');
  late final _ggml_cpu_has_wasm_simd =
      _ggml_cpu_has_wasm_simdPtr.asFunction<int Function()>();

  int ggml_cpu_has_llamafile() {
    return _ggml_cpu_has_llamafile();
  }

  late final _ggml_cpu_has_llamafilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ggml_cpu_has_llamafile');
  late final _ggml_cpu_has_llamafile =
      _ggml_cpu_has_llamafilePtr.asFunction<int Function()>();

  ffi.Pointer<ggml_type_traits_cpu> ggml_get_type_traits_cpu(
    ggml_type type,
  ) {
    return _ggml_get_type_traits_cpu(
      type.value,
    );
  }

  late final _ggml_get_type_traits_cpuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_type_traits_cpu> Function(
              ffi.UnsignedInt)>>('ggml_get_type_traits_cpu');
  late final _ggml_get_type_traits_cpu = _ggml_get_type_traits_cpuPtr
      .asFunction<ffi.Pointer<ggml_type_traits_cpu> Function(int)>();

  void ggml_cpu_init() {
    return _ggml_cpu_init();
  }

  late final _ggml_cpu_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ggml_cpu_init');
  late final _ggml_cpu_init = _ggml_cpu_initPtr.asFunction<void Function()>();

  ggml_backend_t ggml_backend_cpu_init() {
    return _ggml_backend_cpu_init();
  }

  late final _ggml_backend_cpu_initPtr =
      _lookup<ffi.NativeFunction<ggml_backend_t Function()>>(
          'ggml_backend_cpu_init');
  late final _ggml_backend_cpu_init =
      _ggml_backend_cpu_initPtr.asFunction<ggml_backend_t Function()>();

  bool ggml_backend_is_cpu(
    ggml_backend_t backend,
  ) {
    return _ggml_backend_is_cpu(
      backend,
    );
  }

  late final _ggml_backend_is_cpuPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ggml_backend_t)>>(
          'ggml_backend_is_cpu');
  late final _ggml_backend_is_cpu =
      _ggml_backend_is_cpuPtr.asFunction<bool Function(ggml_backend_t)>();

  void ggml_backend_cpu_set_n_threads(
    ggml_backend_t backend_cpu,
    int n_threads,
  ) {
    return _ggml_backend_cpu_set_n_threads(
      backend_cpu,
      n_threads,
    );
  }

  late final _ggml_backend_cpu_set_n_threadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_backend_t, ffi.Int)>>(
          'ggml_backend_cpu_set_n_threads');
  late final _ggml_backend_cpu_set_n_threads =
      _ggml_backend_cpu_set_n_threadsPtr
          .asFunction<void Function(ggml_backend_t, int)>();

  void ggml_backend_cpu_set_threadpool(
    ggml_backend_t backend_cpu,
    ggml_threadpool_t threadpool,
  ) {
    return _ggml_backend_cpu_set_threadpool(
      backend_cpu,
      threadpool,
    );
  }

  late final _ggml_backend_cpu_set_threadpoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_t,
              ggml_threadpool_t)>>('ggml_backend_cpu_set_threadpool');
  late final _ggml_backend_cpu_set_threadpool =
      _ggml_backend_cpu_set_threadpoolPtr
          .asFunction<void Function(ggml_backend_t, ggml_threadpool_t)>();

  void ggml_backend_cpu_set_abort_callback(
    ggml_backend_t backend_cpu,
    ggml_abort_callback abort_callback,
    ffi.Pointer<ffi.Void> abort_callback_data,
  ) {
    return _ggml_backend_cpu_set_abort_callback(
      backend_cpu,
      abort_callback,
      abort_callback_data,
    );
  }

  late final _ggml_backend_cpu_set_abort_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_backend_t, ggml_abort_callback,
              ffi.Pointer<ffi.Void>)>>('ggml_backend_cpu_set_abort_callback');
  late final _ggml_backend_cpu_set_abort_callback =
      _ggml_backend_cpu_set_abort_callbackPtr.asFunction<
          void Function(
              ggml_backend_t, ggml_abort_callback, ffi.Pointer<ffi.Void>)>();

  ggml_backend_reg_t ggml_backend_cpu_reg() {
    return _ggml_backend_cpu_reg();
  }

  late final _ggml_backend_cpu_regPtr =
      _lookup<ffi.NativeFunction<ggml_backend_reg_t Function()>>(
          'ggml_backend_cpu_reg');
  late final _ggml_backend_cpu_reg =
      _ggml_backend_cpu_regPtr.asFunction<ggml_backend_reg_t Function()>();

  void ggml_cpu_fp32_to_fp32(
    ffi.Pointer<ffi.Float> arg0,
    ffi.Pointer<ffi.Float> arg1,
    int arg2,
  ) {
    return _ggml_cpu_fp32_to_fp32(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_cpu_fp32_to_fp32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Int64)>>('ggml_cpu_fp32_to_fp32');
  late final _ggml_cpu_fp32_to_fp32 = _ggml_cpu_fp32_to_fp32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int)>();

  void ggml_cpu_fp32_to_fp16(
    ffi.Pointer<ffi.Float> arg0,
    ffi.Pointer<ggml_fp16_t> arg1,
    int arg2,
  ) {
    return _ggml_cpu_fp32_to_fp16(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_cpu_fp32_to_fp16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_fp16_t>,
              ffi.Int64)>>('ggml_cpu_fp32_to_fp16');
  late final _ggml_cpu_fp32_to_fp16 = _ggml_cpu_fp32_to_fp16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_fp16_t>, int)>();

  void ggml_cpu_fp16_to_fp32(
    ffi.Pointer<ggml_fp16_t> arg0,
    ffi.Pointer<ffi.Float> arg1,
    int arg2,
  ) {
    return _ggml_cpu_fp16_to_fp32(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_cpu_fp16_to_fp32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_fp16_t>, ffi.Pointer<ffi.Float>,
              ffi.Int64)>>('ggml_cpu_fp16_to_fp32');
  late final _ggml_cpu_fp16_to_fp32 = _ggml_cpu_fp16_to_fp32Ptr.asFunction<
      void Function(ffi.Pointer<ggml_fp16_t>, ffi.Pointer<ffi.Float>, int)>();

  void ggml_cpu_fp32_to_bf16(
    ffi.Pointer<ffi.Float> arg0,
    ffi.Pointer<ggml_bf16_t> arg1,
    int arg2,
  ) {
    return _ggml_cpu_fp32_to_bf16(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_cpu_fp32_to_bf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_bf16_t>,
              ffi.Int64)>>('ggml_cpu_fp32_to_bf16');
  late final _ggml_cpu_fp32_to_bf16 = _ggml_cpu_fp32_to_bf16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ggml_bf16_t>, int)>();

  void ggml_cpu_bf16_to_fp32(
    ffi.Pointer<ggml_bf16_t> arg0,
    ffi.Pointer<ffi.Float> arg1,
    int arg2,
  ) {
    return _ggml_cpu_bf16_to_fp32(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ggml_cpu_bf16_to_fp32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ggml_bf16_t>, ffi.Pointer<ffi.Float>,
              ffi.Int64)>>('ggml_cpu_bf16_to_fp32');
  late final _ggml_cpu_bf16_to_fp32 = _ggml_cpu_bf16_to_fp32Ptr.asFunction<
      void Function(ffi.Pointer<ggml_bf16_t>, ffi.Pointer<ffi.Float>, int)>();

  ggml_opt_dataset_t ggml_opt_dataset_init(
    ggml_type type_data,
    ggml_type type_label,
    int ne_datapoint,
    int ne_label,
    int ndata,
    int ndata_shard,
  ) {
    return _ggml_opt_dataset_init(
      type_data.value,
      type_label.value,
      ne_datapoint,
      ne_label,
      ndata,
      ndata_shard,
    );
  }

  late final _ggml_opt_dataset_initPtr = _lookup<
      ffi.NativeFunction<
          ggml_opt_dataset_t Function(
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_opt_dataset_init');
  late final _ggml_opt_dataset_init = _ggml_opt_dataset_initPtr
      .asFunction<ggml_opt_dataset_t Function(int, int, int, int, int, int)>();

  void ggml_opt_dataset_free(
    ggml_opt_dataset_t dataset,
  ) {
    return _ggml_opt_dataset_free(
      dataset,
    );
  }

  late final _ggml_opt_dataset_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_opt_dataset_t)>>(
          'ggml_opt_dataset_free');
  late final _ggml_opt_dataset_free =
      _ggml_opt_dataset_freePtr.asFunction<void Function(ggml_opt_dataset_t)>();

  int ggml_opt_dataset_ndata(
    ggml_opt_dataset_t dataset,
  ) {
    return _ggml_opt_dataset_ndata(
      dataset,
    );
  }

  late final _ggml_opt_dataset_ndataPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ggml_opt_dataset_t)>>(
          'ggml_opt_dataset_ndata');
  late final _ggml_opt_dataset_ndata =
      _ggml_opt_dataset_ndataPtr.asFunction<int Function(ggml_opt_dataset_t)>();

  ffi.Pointer<ggml_tensor> ggml_opt_dataset_data(
    ggml_opt_dataset_t dataset,
  ) {
    return _ggml_opt_dataset_data(
      dataset,
    );
  }

  late final _ggml_opt_dataset_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ggml_opt_dataset_t)>>('ggml_opt_dataset_data');
  late final _ggml_opt_dataset_data = _ggml_opt_dataset_dataPtr
      .asFunction<ffi.Pointer<ggml_tensor> Function(ggml_opt_dataset_t)>();

  ffi.Pointer<ggml_tensor> ggml_opt_dataset_labels(
    ggml_opt_dataset_t dataset,
  ) {
    return _ggml_opt_dataset_labels(
      dataset,
    );
  }

  late final _ggml_opt_dataset_labelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ggml_opt_dataset_t)>>('ggml_opt_dataset_labels');
  late final _ggml_opt_dataset_labels = _ggml_opt_dataset_labelsPtr
      .asFunction<ffi.Pointer<ggml_tensor> Function(ggml_opt_dataset_t)>();

  void ggml_opt_dataset_shuffle(
    ggml_opt_context_t opt_ctx,
    ggml_opt_dataset_t dataset,
    int idata,
  ) {
    return _ggml_opt_dataset_shuffle(
      opt_ctx,
      dataset,
      idata,
    );
  }

  late final _ggml_opt_dataset_shufflePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_opt_context_t, ggml_opt_dataset_t,
              ffi.Int64)>>('ggml_opt_dataset_shuffle');
  late final _ggml_opt_dataset_shuffle = _ggml_opt_dataset_shufflePtr
      .asFunction<void Function(ggml_opt_context_t, ggml_opt_dataset_t, int)>();

  void ggml_opt_dataset_get_batch(
    ggml_opt_dataset_t dataset,
    ffi.Pointer<ggml_tensor> data_batch,
    ffi.Pointer<ggml_tensor> labels_batch,
    int ibatch,
  ) {
    return _ggml_opt_dataset_get_batch(
      dataset,
      data_batch,
      labels_batch,
      ibatch,
    );
  }

  late final _ggml_opt_dataset_get_batchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_opt_dataset_t,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ffi.Int64)>>('ggml_opt_dataset_get_batch');
  late final _ggml_opt_dataset_get_batch =
      _ggml_opt_dataset_get_batchPtr.asFunction<
          void Function(ggml_opt_dataset_t, ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>, int)>();

  void ggml_opt_dataset_get_batch_host(
    ggml_opt_dataset_t dataset,
    ffi.Pointer<ffi.Void> data_batch,
    int nb_data_batch,
    ffi.Pointer<ffi.Void> labels_batch,
    int ibatch,
  ) {
    return _ggml_opt_dataset_get_batch_host(
      dataset,
      data_batch,
      nb_data_batch,
      labels_batch,
      ibatch,
    );
  }

  late final _ggml_opt_dataset_get_batch_hostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_opt_dataset_t,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Int64)>>('ggml_opt_dataset_get_batch_host');
  late final _ggml_opt_dataset_get_batch_host =
      _ggml_opt_dataset_get_batch_hostPtr.asFunction<
          void Function(ggml_opt_dataset_t, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, int)>();

  ggml_opt_optimizer_params ggml_opt_get_default_optimizer_params(
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_opt_get_default_optimizer_params(
      userdata,
    );
  }

  late final _ggml_opt_get_default_optimizer_paramsPtr = _lookup<
      ffi.NativeFunction<
          ggml_opt_optimizer_params Function(
              ffi.Pointer<ffi.Void>)>>('ggml_opt_get_default_optimizer_params');
  late final _ggml_opt_get_default_optimizer_params =
      _ggml_opt_get_default_optimizer_paramsPtr.asFunction<
          ggml_opt_optimizer_params Function(ffi.Pointer<ffi.Void>)>();

  ggml_opt_optimizer_params ggml_opt_get_constant_optimizer_params(
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _ggml_opt_get_constant_optimizer_params(
      userdata,
    );
  }

  late final _ggml_opt_get_constant_optimizer_paramsPtr = _lookup<
          ffi.NativeFunction<
              ggml_opt_optimizer_params Function(ffi.Pointer<ffi.Void>)>>(
      'ggml_opt_get_constant_optimizer_params');
  late final _ggml_opt_get_constant_optimizer_params =
      _ggml_opt_get_constant_optimizer_paramsPtr.asFunction<
          ggml_opt_optimizer_params Function(ffi.Pointer<ffi.Void>)>();

  ggml_opt_params ggml_opt_default_params(
    ggml_backend_sched_t backend_sched,
    ggml_opt_loss_type loss_type,
  ) {
    return _ggml_opt_default_params(
      backend_sched,
      loss_type.value,
    );
  }

  late final _ggml_opt_default_paramsPtr = _lookup<
      ffi.NativeFunction<
          ggml_opt_params Function(ggml_backend_sched_t,
              ffi.UnsignedInt)>>('ggml_opt_default_params');
  late final _ggml_opt_default_params = _ggml_opt_default_paramsPtr
      .asFunction<ggml_opt_params Function(ggml_backend_sched_t, int)>();

  ggml_opt_context_t ggml_opt_init(
    ggml_opt_params params,
  ) {
    return _ggml_opt_init(
      params,
    );
  }

  late final _ggml_opt_initPtr =
      _lookup<ffi.NativeFunction<ggml_opt_context_t Function(ggml_opt_params)>>(
          'ggml_opt_init');
  late final _ggml_opt_init = _ggml_opt_initPtr
      .asFunction<ggml_opt_context_t Function(ggml_opt_params)>();

  void ggml_opt_free(
    ggml_opt_context_t opt_ctx,
  ) {
    return _ggml_opt_free(
      opt_ctx,
    );
  }

  late final _ggml_opt_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_opt_context_t)>>(
          'ggml_opt_free');
  late final _ggml_opt_free =
      _ggml_opt_freePtr.asFunction<void Function(ggml_opt_context_t)>();

  void ggml_opt_reset(
    ggml_opt_context_t opt_ctx,
    bool optimizer,
  ) {
    return _ggml_opt_reset(
      opt_ctx,
      optimizer,
    );
  }

  late final _ggml_opt_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ggml_opt_context_t, ffi.Bool)>>(
      'ggml_opt_reset');
  late final _ggml_opt_reset =
      _ggml_opt_resetPtr.asFunction<void Function(ggml_opt_context_t, bool)>();

  bool ggml_opt_static_graphs(
    ggml_opt_context_t opt_ctx,
  ) {
    return _ggml_opt_static_graphs(
      opt_ctx,
    );
  }

  late final _ggml_opt_static_graphsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ggml_opt_context_t)>>(
          'ggml_opt_static_graphs');
  late final _ggml_opt_static_graphs = _ggml_opt_static_graphsPtr
      .asFunction<bool Function(ggml_opt_context_t)>();

  ffi.Pointer<ggml_tensor> ggml_opt_inputs(
    ggml_opt_context_t opt_ctx,
  ) {
    return _ggml_opt_inputs(
      opt_ctx,
    );
  }

  late final _ggml_opt_inputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ggml_opt_context_t)>>('ggml_opt_inputs');
  late final _ggml_opt_inputs = _ggml_opt_inputsPtr
      .asFunction<ffi.Pointer<ggml_tensor> Function(ggml_opt_context_t)>();

  ffi.Pointer<ggml_tensor> ggml_opt_outputs(
    ggml_opt_context_t opt_ctx,
  ) {
    return _ggml_opt_outputs(
      opt_ctx,
    );
  }

  late final _ggml_opt_outputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ggml_opt_context_t)>>('ggml_opt_outputs');
  late final _ggml_opt_outputs = _ggml_opt_outputsPtr
      .asFunction<ffi.Pointer<ggml_tensor> Function(ggml_opt_context_t)>();

  ffi.Pointer<ggml_tensor> ggml_opt_labels(
    ggml_opt_context_t opt_ctx,
  ) {
    return _ggml_opt_labels(
      opt_ctx,
    );
  }

  late final _ggml_opt_labelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ggml_opt_context_t)>>('ggml_opt_labels');
  late final _ggml_opt_labels = _ggml_opt_labelsPtr
      .asFunction<ffi.Pointer<ggml_tensor> Function(ggml_opt_context_t)>();

  ffi.Pointer<ggml_tensor> ggml_opt_loss(
    ggml_opt_context_t opt_ctx,
  ) {
    return _ggml_opt_loss(
      opt_ctx,
    );
  }

  late final _ggml_opt_lossPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ggml_opt_context_t)>>('ggml_opt_loss');
  late final _ggml_opt_loss = _ggml_opt_lossPtr
      .asFunction<ffi.Pointer<ggml_tensor> Function(ggml_opt_context_t)>();

  ffi.Pointer<ggml_tensor> ggml_opt_pred(
    ggml_opt_context_t opt_ctx,
  ) {
    return _ggml_opt_pred(
      opt_ctx,
    );
  }

  late final _ggml_opt_predPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ggml_opt_context_t)>>('ggml_opt_pred');
  late final _ggml_opt_pred = _ggml_opt_predPtr
      .asFunction<ffi.Pointer<ggml_tensor> Function(ggml_opt_context_t)>();

  ffi.Pointer<ggml_tensor> ggml_opt_ncorrect(
    ggml_opt_context_t opt_ctx,
  ) {
    return _ggml_opt_ncorrect(
      opt_ctx,
    );
  }

  late final _ggml_opt_ncorrectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(
              ggml_opt_context_t)>>('ggml_opt_ncorrect');
  late final _ggml_opt_ncorrect = _ggml_opt_ncorrectPtr
      .asFunction<ffi.Pointer<ggml_tensor> Function(ggml_opt_context_t)>();

  ffi.Pointer<ggml_tensor> ggml_opt_grad_acc(
    ggml_opt_context_t opt_ctx,
    ffi.Pointer<ggml_tensor> node,
  ) {
    return _ggml_opt_grad_acc(
      opt_ctx,
      node,
    );
  }

  late final _ggml_opt_grad_accPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ggml_tensor> Function(ggml_opt_context_t,
              ffi.Pointer<ggml_tensor>)>>('ggml_opt_grad_acc');
  late final _ggml_opt_grad_acc = _ggml_opt_grad_accPtr.asFunction<
      ffi.Pointer<ggml_tensor> Function(
          ggml_opt_context_t, ffi.Pointer<ggml_tensor>)>();

  ggml_opt_result_t ggml_opt_result_init() {
    return _ggml_opt_result_init();
  }

  late final _ggml_opt_result_initPtr =
      _lookup<ffi.NativeFunction<ggml_opt_result_t Function()>>(
          'ggml_opt_result_init');
  late final _ggml_opt_result_init =
      _ggml_opt_result_initPtr.asFunction<ggml_opt_result_t Function()>();

  void ggml_opt_result_free(
    ggml_opt_result_t result,
  ) {
    return _ggml_opt_result_free(
      result,
    );
  }

  late final _ggml_opt_result_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_opt_result_t)>>(
          'ggml_opt_result_free');
  late final _ggml_opt_result_free =
      _ggml_opt_result_freePtr.asFunction<void Function(ggml_opt_result_t)>();

  void ggml_opt_result_reset(
    ggml_opt_result_t result,
  ) {
    return _ggml_opt_result_reset(
      result,
    );
  }

  late final _ggml_opt_result_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ggml_opt_result_t)>>(
          'ggml_opt_result_reset');
  late final _ggml_opt_result_reset =
      _ggml_opt_result_resetPtr.asFunction<void Function(ggml_opt_result_t)>();

  void ggml_opt_result_ndata(
    ggml_opt_result_t result,
    ffi.Pointer<ffi.Int64> ndata,
  ) {
    return _ggml_opt_result_ndata(
      result,
      ndata,
    );
  }

  late final _ggml_opt_result_ndataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_opt_result_t,
              ffi.Pointer<ffi.Int64>)>>('ggml_opt_result_ndata');
  late final _ggml_opt_result_ndata = _ggml_opt_result_ndataPtr
      .asFunction<void Function(ggml_opt_result_t, ffi.Pointer<ffi.Int64>)>();

  void ggml_opt_result_loss(
    ggml_opt_result_t result,
    ffi.Pointer<ffi.Double> loss,
    ffi.Pointer<ffi.Double> unc,
  ) {
    return _ggml_opt_result_loss(
      result,
      loss,
      unc,
    );
  }

  late final _ggml_opt_result_lossPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_opt_result_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('ggml_opt_result_loss');
  late final _ggml_opt_result_loss = _ggml_opt_result_lossPtr.asFunction<
      void Function(ggml_opt_result_t, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void ggml_opt_result_pred(
    ggml_opt_result_t result,
    ffi.Pointer<ffi.Int32> pred,
  ) {
    return _ggml_opt_result_pred(
      result,
      pred,
    );
  }

  late final _ggml_opt_result_predPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_opt_result_t,
              ffi.Pointer<ffi.Int32>)>>('ggml_opt_result_pred');
  late final _ggml_opt_result_pred = _ggml_opt_result_predPtr
      .asFunction<void Function(ggml_opt_result_t, ffi.Pointer<ffi.Int32>)>();

  void ggml_opt_result_accuracy(
    ggml_opt_result_t result,
    ffi.Pointer<ffi.Double> accuracy,
    ffi.Pointer<ffi.Double> unc,
  ) {
    return _ggml_opt_result_accuracy(
      result,
      accuracy,
      unc,
    );
  }

  late final _ggml_opt_result_accuracyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ggml_opt_result_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('ggml_opt_result_accuracy');
  late final _ggml_opt_result_accuracy =
      _ggml_opt_result_accuracyPtr.asFunction<
          void Function(ggml_opt_result_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void ggml_opt_prepare_alloc(
    ggml_opt_context_t opt_ctx,
    ffi.Pointer<ggml_context> ctx_compute,
    ffi.Pointer<ggml_cgraph> gf,
    ffi.Pointer<ggml_tensor> inputs,
    ffi.Pointer<ggml_tensor> outputs,
  ) {
    return _ggml_opt_prepare_alloc(
      opt_ctx,
      ctx_compute,
      gf,
      inputs,
      outputs,
    );
  }

  late final _ggml_opt_prepare_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_opt_context_t,
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_cgraph>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>)>>('ggml_opt_prepare_alloc');
  late final _ggml_opt_prepare_alloc = _ggml_opt_prepare_allocPtr.asFunction<
      void Function(
          ggml_opt_context_t,
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_cgraph>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>)>();

  void ggml_opt_alloc(
    ggml_opt_context_t opt_ctx,
    bool backward,
  ) {
    return _ggml_opt_alloc(
      opt_ctx,
      backward,
    );
  }

  late final _ggml_opt_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ggml_opt_context_t, ffi.Bool)>>(
      'ggml_opt_alloc');
  late final _ggml_opt_alloc =
      _ggml_opt_allocPtr.asFunction<void Function(ggml_opt_context_t, bool)>();

  void ggml_opt_eval(
    ggml_opt_context_t opt_ctx,
    ggml_opt_result_t result,
  ) {
    return _ggml_opt_eval(
      opt_ctx,
      result,
    );
  }

  late final _ggml_opt_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_opt_context_t, ggml_opt_result_t)>>('ggml_opt_eval');
  late final _ggml_opt_eval = _ggml_opt_evalPtr
      .asFunction<void Function(ggml_opt_context_t, ggml_opt_result_t)>();

  void ggml_opt_epoch(
    ggml_opt_context_t opt_ctx,
    ggml_opt_dataset_t dataset,
    ggml_opt_result_t result_train,
    ggml_opt_result_t result_eval,
    int idata_split,
    ggml_opt_epoch_callback callback_train,
    ggml_opt_epoch_callback callback_eval,
  ) {
    return _ggml_opt_epoch(
      opt_ctx,
      dataset,
      result_train,
      result_eval,
      idata_split,
      callback_train,
      callback_eval,
    );
  }

  late final _ggml_opt_epochPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_opt_context_t,
              ggml_opt_dataset_t,
              ggml_opt_result_t,
              ggml_opt_result_t,
              ffi.Int64,
              ggml_opt_epoch_callback,
              ggml_opt_epoch_callback)>>('ggml_opt_epoch');
  late final _ggml_opt_epoch = _ggml_opt_epochPtr.asFunction<
      void Function(
          ggml_opt_context_t,
          ggml_opt_dataset_t,
          ggml_opt_result_t,
          ggml_opt_result_t,
          int,
          ggml_opt_epoch_callback,
          ggml_opt_epoch_callback)>();

  void ggml_opt_epoch_callback_progress_bar(
    bool train,
    ggml_opt_context_t opt_ctx,
    ggml_opt_dataset_t dataset,
    ggml_opt_result_t result,
    int ibatch,
    int ibatch_max,
    int t_start_us,
  ) {
    return _ggml_opt_epoch_callback_progress_bar(
      train,
      opt_ctx,
      dataset,
      result,
      ibatch,
      ibatch_max,
      t_start_us,
    );
  }

  late final _ggml_opt_epoch_callback_progress_barPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Bool,
              ggml_opt_context_t,
              ggml_opt_dataset_t,
              ggml_opt_result_t,
              ffi.Int64,
              ffi.Int64,
              ffi.Int64)>>('ggml_opt_epoch_callback_progress_bar');
  late final _ggml_opt_epoch_callback_progress_bar =
      _ggml_opt_epoch_callback_progress_barPtr.asFunction<
          void Function(bool, ggml_opt_context_t, ggml_opt_dataset_t,
              ggml_opt_result_t, int, int, int)>();

  void ggml_opt_fit(
    ggml_backend_sched_t backend_sched,
    ffi.Pointer<ggml_context> ctx_compute,
    ffi.Pointer<ggml_tensor> inputs,
    ffi.Pointer<ggml_tensor> outputs,
    ggml_opt_dataset_t dataset,
    ggml_opt_loss_type loss_type,
    ggml_opt_get_optimizer_params get_opt_pars,
    int nepoch,
    int nbatch_logical,
    double val_split,
    bool silent,
  ) {
    return _ggml_opt_fit(
      backend_sched,
      ctx_compute,
      inputs,
      outputs,
      dataset,
      loss_type.value,
      get_opt_pars,
      nepoch,
      nbatch_logical,
      val_split,
      silent,
    );
  }

  late final _ggml_opt_fitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_backend_sched_t,
              ffi.Pointer<ggml_context>,
              ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ggml_tensor>,
              ggml_opt_dataset_t,
              ffi.UnsignedInt,
              ggml_opt_get_optimizer_params,
              ffi.Int64,
              ffi.Int64,
              ffi.Float,
              ffi.Bool)>>('ggml_opt_fit');
  late final _ggml_opt_fit = _ggml_opt_fitPtr.asFunction<
      void Function(
          ggml_backend_sched_t,
          ffi.Pointer<ggml_context>,
          ffi.Pointer<ggml_tensor>,
          ffi.Pointer<ggml_tensor>,
          ggml_opt_dataset_t,
          int,
          ggml_opt_get_optimizer_params,
          int,
          int,
          double,
          bool)>();

  llama_model_params llama_model_default_params() {
    return _llama_model_default_params();
  }

  late final _llama_model_default_paramsPtr =
      _lookup<ffi.NativeFunction<llama_model_params Function()>>(
          'llama_model_default_params');
  late final _llama_model_default_params = _llama_model_default_paramsPtr
      .asFunction<llama_model_params Function()>();

  llama_context_params llama_context_default_params() {
    return _llama_context_default_params();
  }

  late final _llama_context_default_paramsPtr =
      _lookup<ffi.NativeFunction<llama_context_params Function()>>(
          'llama_context_default_params');
  late final _llama_context_default_params = _llama_context_default_paramsPtr
      .asFunction<llama_context_params Function()>();

  llama_sampler_chain_params llama_sampler_chain_default_params() {
    return _llama_sampler_chain_default_params();
  }

  late final _llama_sampler_chain_default_paramsPtr =
      _lookup<ffi.NativeFunction<llama_sampler_chain_params Function()>>(
          'llama_sampler_chain_default_params');
  late final _llama_sampler_chain_default_params =
      _llama_sampler_chain_default_paramsPtr
          .asFunction<llama_sampler_chain_params Function()>();

  llama_model_quantize_params llama_model_quantize_default_params() {
    return _llama_model_quantize_default_params();
  }

  late final _llama_model_quantize_default_paramsPtr =
      _lookup<ffi.NativeFunction<llama_model_quantize_params Function()>>(
          'llama_model_quantize_default_params');
  late final _llama_model_quantize_default_params =
      _llama_model_quantize_default_paramsPtr
          .asFunction<llama_model_quantize_params Function()>();

  void llama_backend_init() {
    return _llama_backend_init();
  }

  late final _llama_backend_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('llama_backend_init');
  late final _llama_backend_init =
      _llama_backend_initPtr.asFunction<void Function()>();

  void llama_backend_free() {
    return _llama_backend_free();
  }

  late final _llama_backend_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('llama_backend_free');
  late final _llama_backend_free =
      _llama_backend_freePtr.asFunction<void Function()>();

  void llama_numa_init(
    ggml_numa_strategy numa,
  ) {
    return _llama_numa_init(
      numa.value,
    );
  }

  late final _llama_numa_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'llama_numa_init');
  late final _llama_numa_init =
      _llama_numa_initPtr.asFunction<void Function(int)>();

  void llama_attach_threadpool(
    ffi.Pointer<llama_context> ctx,
    ggml_threadpool_t threadpool,
    ggml_threadpool_t threadpool_batch,
  ) {
    return _llama_attach_threadpool(
      ctx,
      threadpool,
      threadpool_batch,
    );
  }

  late final _llama_attach_threadpoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_context>, ggml_threadpool_t,
              ggml_threadpool_t)>>('llama_attach_threadpool');
  late final _llama_attach_threadpool = _llama_attach_threadpoolPtr.asFunction<
      void Function(
          ffi.Pointer<llama_context>, ggml_threadpool_t, ggml_threadpool_t)>();

  void llama_detach_threadpool(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_detach_threadpool(
      ctx,
    );
  }

  late final _llama_detach_threadpoolPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_detach_threadpool');
  late final _llama_detach_threadpool = _llama_detach_threadpoolPtr
      .asFunction<void Function(ffi.Pointer<llama_context>)>();

  ffi.Pointer<llama_model> llama_load_model_from_file(
    ffi.Pointer<ffi.Char> path_model,
    llama_model_params params,
  ) {
    return _llama_load_model_from_file(
      path_model,
      params,
    );
  }

  late final _llama_load_model_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_model> Function(ffi.Pointer<ffi.Char>,
              llama_model_params)>>('llama_load_model_from_file');
  late final _llama_load_model_from_file =
      _llama_load_model_from_filePtr.asFunction<
          ffi.Pointer<llama_model> Function(
              ffi.Pointer<ffi.Char>, llama_model_params)>();

  ffi.Pointer<llama_model> llama_model_load_from_file(
    ffi.Pointer<ffi.Char> path_model,
    llama_model_params params,
  ) {
    return _llama_model_load_from_file(
      path_model,
      params,
    );
  }

  late final _llama_model_load_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_model> Function(ffi.Pointer<ffi.Char>,
              llama_model_params)>>('llama_model_load_from_file');
  late final _llama_model_load_from_file =
      _llama_model_load_from_filePtr.asFunction<
          ffi.Pointer<llama_model> Function(
              ffi.Pointer<ffi.Char>, llama_model_params)>();

  ffi.Pointer<llama_model> llama_model_load_from_splits(
    ffi.Pointer<ffi.Pointer<ffi.Char>> paths,
    int n_paths,
    llama_model_params params,
  ) {
    return _llama_model_load_from_splits(
      paths,
      n_paths,
      params,
    );
  }

  late final _llama_model_load_from_splitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_model> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size, llama_model_params)>>('llama_model_load_from_splits');
  late final _llama_model_load_from_splits =
      _llama_model_load_from_splitsPtr.asFunction<
          ffi.Pointer<llama_model> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int, llama_model_params)>();

  void llama_model_save_to_file(
    ffi.Pointer<llama_model> model,
    ffi.Pointer<ffi.Char> path_model,
  ) {
    return _llama_model_save_to_file(
      model,
      path_model,
    );
  }

  late final _llama_model_save_to_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_model>,
              ffi.Pointer<ffi.Char>)>>('llama_model_save_to_file');
  late final _llama_model_save_to_file =
      _llama_model_save_to_filePtr.asFunction<
          void Function(ffi.Pointer<llama_model>, ffi.Pointer<ffi.Char>)>();

  void llama_free_model(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_free_model(
      model,
    );
  }

  late final _llama_free_modelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_model>)>>(
          'llama_free_model');
  late final _llama_free_model = _llama_free_modelPtr
      .asFunction<void Function(ffi.Pointer<llama_model>)>();

  void llama_model_free(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_free(
      model,
    );
  }

  late final _llama_model_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_model>)>>(
          'llama_model_free');
  late final _llama_model_free = _llama_model_freePtr
      .asFunction<void Function(ffi.Pointer<llama_model>)>();

  ffi.Pointer<llama_context> llama_init_from_model(
    ffi.Pointer<llama_model> model,
    llama_context_params params,
  ) {
    return _llama_init_from_model(
      model,
      params,
    );
  }

  late final _llama_init_from_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_context> Function(ffi.Pointer<llama_model>,
              llama_context_params)>>('llama_init_from_model');
  late final _llama_init_from_model = _llama_init_from_modelPtr.asFunction<
      ffi.Pointer<llama_context> Function(
          ffi.Pointer<llama_model>, llama_context_params)>();

  ffi.Pointer<llama_context> llama_new_context_with_model(
    ffi.Pointer<llama_model> model,
    llama_context_params params,
  ) {
    return _llama_new_context_with_model(
      model,
      params,
    );
  }

  late final _llama_new_context_with_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_context> Function(ffi.Pointer<llama_model>,
              llama_context_params)>>('llama_new_context_with_model');
  late final _llama_new_context_with_model =
      _llama_new_context_with_modelPtr.asFunction<
          ffi.Pointer<llama_context> Function(
              ffi.Pointer<llama_model>, llama_context_params)>();

  void llama_free(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_free(
      ctx,
    );
  }

  late final _llama_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_free');
  late final _llama_free =
      _llama_freePtr.asFunction<void Function(ffi.Pointer<llama_context>)>();

  int llama_time_us() {
    return _llama_time_us();
  }

  late final _llama_time_usPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('llama_time_us');
  late final _llama_time_us = _llama_time_usPtr.asFunction<int Function()>();

  int llama_max_devices() {
    return _llama_max_devices();
  }

  late final _llama_max_devicesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('llama_max_devices');
  late final _llama_max_devices =
      _llama_max_devicesPtr.asFunction<int Function()>();

  int llama_max_parallel_sequences() {
    return _llama_max_parallel_sequences();
  }

  late final _llama_max_parallel_sequencesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'llama_max_parallel_sequences');
  late final _llama_max_parallel_sequences =
      _llama_max_parallel_sequencesPtr.asFunction<int Function()>();

  bool llama_supports_mmap() {
    return _llama_supports_mmap();
  }

  late final _llama_supports_mmapPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('llama_supports_mmap');
  late final _llama_supports_mmap =
      _llama_supports_mmapPtr.asFunction<bool Function()>();

  bool llama_supports_mlock() {
    return _llama_supports_mlock();
  }

  late final _llama_supports_mlockPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('llama_supports_mlock');
  late final _llama_supports_mlock =
      _llama_supports_mlockPtr.asFunction<bool Function()>();

  bool llama_supports_gpu_offload() {
    return _llama_supports_gpu_offload();
  }

  late final _llama_supports_gpu_offloadPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'llama_supports_gpu_offload');
  late final _llama_supports_gpu_offload =
      _llama_supports_gpu_offloadPtr.asFunction<bool Function()>();

  bool llama_supports_rpc() {
    return _llama_supports_rpc();
  }

  late final _llama_supports_rpcPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('llama_supports_rpc');
  late final _llama_supports_rpc =
      _llama_supports_rpcPtr.asFunction<bool Function()>();

  int llama_n_ctx(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_n_ctx(
      ctx,
    );
  }

  late final _llama_n_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<llama_context>)>>(
      'llama_n_ctx');
  late final _llama_n_ctx =
      _llama_n_ctxPtr.asFunction<int Function(ffi.Pointer<llama_context>)>();

  int llama_n_batch(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_n_batch(
      ctx,
    );
  }

  late final _llama_n_batchPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<llama_context>)>>(
      'llama_n_batch');
  late final _llama_n_batch =
      _llama_n_batchPtr.asFunction<int Function(ffi.Pointer<llama_context>)>();

  int llama_n_ubatch(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_n_ubatch(
      ctx,
    );
  }

  late final _llama_n_ubatchPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<llama_context>)>>(
      'llama_n_ubatch');
  late final _llama_n_ubatch =
      _llama_n_ubatchPtr.asFunction<int Function(ffi.Pointer<llama_context>)>();

  int llama_n_seq_max(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_n_seq_max(
      ctx,
    );
  }

  late final _llama_n_seq_maxPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<llama_context>)>>(
      'llama_n_seq_max');
  late final _llama_n_seq_max = _llama_n_seq_maxPtr
      .asFunction<int Function(ffi.Pointer<llama_context>)>();

  int llama_n_ctx_train(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_n_ctx_train(
      model,
    );
  }

  late final _llama_n_ctx_trainPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_n_ctx_train');
  late final _llama_n_ctx_train = _llama_n_ctx_trainPtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  int llama_n_embd(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_n_embd(
      model,
    );
  }

  late final _llama_n_embdPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_n_embd');
  late final _llama_n_embd =
      _llama_n_embdPtr.asFunction<int Function(ffi.Pointer<llama_model>)>();

  int llama_n_layer(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_n_layer(
      model,
    );
  }

  late final _llama_n_layerPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_n_layer');
  late final _llama_n_layer =
      _llama_n_layerPtr.asFunction<int Function(ffi.Pointer<llama_model>)>();

  int llama_n_head(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_n_head(
      model,
    );
  }

  late final _llama_n_headPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_n_head');
  late final _llama_n_head =
      _llama_n_headPtr.asFunction<int Function(ffi.Pointer<llama_model>)>();

  int llama_n_vocab(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_n_vocab(
      vocab,
    );
  }

  late final _llama_n_vocabPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_vocab>)>>(
          'llama_n_vocab');
  late final _llama_n_vocab =
      _llama_n_vocabPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  ffi.Pointer<llama_model> llama_get_model(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_get_model(
      ctx,
    );
  }

  late final _llama_get_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_model> Function(
              ffi.Pointer<llama_context>)>>('llama_get_model');
  late final _llama_get_model = _llama_get_modelPtr.asFunction<
      ffi.Pointer<llama_model> Function(ffi.Pointer<llama_context>)>();

  llama_memory_t llama_get_memory(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_get_memory(
      ctx,
    );
  }

  late final _llama_get_memoryPtr = _lookup<
          ffi
          .NativeFunction<llama_memory_t Function(ffi.Pointer<llama_context>)>>(
      'llama_get_memory');
  late final _llama_get_memory = _llama_get_memoryPtr
      .asFunction<llama_memory_t Function(ffi.Pointer<llama_context>)>();

  llama_pooling_type llama_pooling_type$1(
    ffi.Pointer<llama_context> ctx,
  ) {
    return llama_pooling_type.fromValue(_llama_pooling_type$1(
      ctx,
    ));
  }

  late final _llama_pooling_type$1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<llama_context>)>>(
          'llama_pooling_type');
  late final _llama_pooling_type$1 = _llama_pooling_type$1Ptr
      .asFunction<int Function(ffi.Pointer<llama_context>)>();

  ffi.Pointer<llama_kv_cache> llama_get_kv_self(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_get_kv_self(
      ctx,
    );
  }

  late final _llama_get_kv_selfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_kv_cache> Function(
              ffi.Pointer<llama_context>)>>('llama_get_kv_self');
  late final _llama_get_kv_self = _llama_get_kv_selfPtr.asFunction<
      ffi.Pointer<llama_kv_cache> Function(ffi.Pointer<llama_context>)>();

  ffi.Pointer<llama_vocab> llama_model_get_vocab(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_get_vocab(
      model,
    );
  }

  late final _llama_model_get_vocabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_vocab> Function(
              ffi.Pointer<llama_model>)>>('llama_model_get_vocab');
  late final _llama_model_get_vocab = _llama_model_get_vocabPtr.asFunction<
      ffi.Pointer<llama_vocab> Function(ffi.Pointer<llama_model>)>();

  llama_rope_type llama_model_rope_type(
    ffi.Pointer<llama_model> model,
  ) {
    return llama_rope_type.fromValue(_llama_model_rope_type(
      model,
    ));
  }

  late final _llama_model_rope_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<llama_model>)>>(
          'llama_model_rope_type');
  late final _llama_model_rope_type = _llama_model_rope_typePtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  int llama_model_n_ctx_train(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_n_ctx_train(
      model,
    );
  }

  late final _llama_model_n_ctx_trainPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_model_n_ctx_train');
  late final _llama_model_n_ctx_train = _llama_model_n_ctx_trainPtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  int llama_model_n_embd(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_n_embd(
      model,
    );
  }

  late final _llama_model_n_embdPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_model_n_embd');
  late final _llama_model_n_embd = _llama_model_n_embdPtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  int llama_model_n_layer(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_n_layer(
      model,
    );
  }

  late final _llama_model_n_layerPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_model_n_layer');
  late final _llama_model_n_layer = _llama_model_n_layerPtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  int llama_model_n_head(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_n_head(
      model,
    );
  }

  late final _llama_model_n_headPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_model_n_head');
  late final _llama_model_n_head = _llama_model_n_headPtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  int llama_model_n_head_kv(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_n_head_kv(
      model,
    );
  }

  late final _llama_model_n_head_kvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_model_n_head_kv');
  late final _llama_model_n_head_kv = _llama_model_n_head_kvPtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  int llama_model_n_swa(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_n_swa(
      model,
    );
  }

  late final _llama_model_n_swaPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_model_n_swa');
  late final _llama_model_n_swa = _llama_model_n_swaPtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  double llama_model_rope_freq_scale_train(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_rope_freq_scale_train(
      model,
    );
  }

  late final _llama_model_rope_freq_scale_trainPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<llama_model>)>>(
          'llama_model_rope_freq_scale_train');
  late final _llama_model_rope_freq_scale_train =
      _llama_model_rope_freq_scale_trainPtr
          .asFunction<double Function(ffi.Pointer<llama_model>)>();

  int llama_model_n_cls_out(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_n_cls_out(
      model,
    );
  }

  late final _llama_model_n_cls_outPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<llama_model>)>>(
      'llama_model_n_cls_out');
  late final _llama_model_n_cls_out = _llama_model_n_cls_outPtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  ffi.Pointer<ffi.Char> llama_model_cls_label(
    ffi.Pointer<llama_model> model,
    int i,
  ) {
    return _llama_model_cls_label(
      model,
      i,
    );
  }

  late final _llama_model_cls_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<llama_model>, ffi.Uint32)>>('llama_model_cls_label');
  late final _llama_model_cls_label = _llama_model_cls_labelPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<llama_model>, int)>();

  llama_vocab_type llama_vocab_type$1(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return llama_vocab_type.fromValue(_llama_vocab_type$1(
      vocab,
    ));
  }

  late final _llama_vocab_type$1Ptr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_type');
  late final _llama_vocab_type$1 = _llama_vocab_type$1Ptr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_n_tokens(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_n_tokens(
      vocab,
    );
  }

  late final _llama_vocab_n_tokensPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_vocab>)>>(
          'llama_vocab_n_tokens');
  late final _llama_vocab_n_tokens = _llama_vocab_n_tokensPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_model_meta_val_str(
    ffi.Pointer<llama_model> model,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
  ) {
    return _llama_model_meta_val_str(
      model,
      key,
      buf,
      buf_size,
    );
  }

  late final _llama_model_meta_val_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<llama_model>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('llama_model_meta_val_str');
  late final _llama_model_meta_val_str =
      _llama_model_meta_val_strPtr.asFunction<
          int Function(ffi.Pointer<llama_model>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, int)>();

  int llama_model_meta_count(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_meta_count(
      model,
    );
  }

  late final _llama_model_meta_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_model_meta_count');
  late final _llama_model_meta_count = _llama_model_meta_countPtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  int llama_model_meta_key_by_index(
    ffi.Pointer<llama_model> model,
    int i,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
  ) {
    return _llama_model_meta_key_by_index(
      model,
      i,
      buf,
      buf_size,
    );
  }

  late final _llama_model_meta_key_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_model>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('llama_model_meta_key_by_index');
  late final _llama_model_meta_key_by_index =
      _llama_model_meta_key_by_indexPtr.asFunction<
          int Function(
              ffi.Pointer<llama_model>, int, ffi.Pointer<ffi.Char>, int)>();

  int llama_model_meta_val_str_by_index(
    ffi.Pointer<llama_model> model,
    int i,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
  ) {
    return _llama_model_meta_val_str_by_index(
      model,
      i,
      buf,
      buf_size,
    );
  }

  late final _llama_model_meta_val_str_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_model>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('llama_model_meta_val_str_by_index');
  late final _llama_model_meta_val_str_by_index =
      _llama_model_meta_val_str_by_indexPtr.asFunction<
          int Function(
              ffi.Pointer<llama_model>, int, ffi.Pointer<ffi.Char>, int)>();

  int llama_model_desc(
    ffi.Pointer<llama_model> model,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
  ) {
    return _llama_model_desc(
      model,
      buf,
      buf_size,
    );
  }

  late final _llama_model_descPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<llama_model>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('llama_model_desc');
  late final _llama_model_desc = _llama_model_descPtr.asFunction<
      int Function(ffi.Pointer<llama_model>, ffi.Pointer<ffi.Char>, int)>();

  int llama_model_size(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_size(
      model,
    );
  }

  late final _llama_model_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<llama_model>)>>(
      'llama_model_size');
  late final _llama_model_size =
      _llama_model_sizePtr.asFunction<int Function(ffi.Pointer<llama_model>)>();

  ffi.Pointer<ffi.Char> llama_model_chat_template(
    ffi.Pointer<llama_model> model,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _llama_model_chat_template(
      model,
      name,
    );
  }

  late final _llama_model_chat_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<llama_model>,
              ffi.Pointer<ffi.Char>)>>('llama_model_chat_template');
  late final _llama_model_chat_template =
      _llama_model_chat_templatePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<llama_model>, ffi.Pointer<ffi.Char>)>();

  int llama_model_n_params(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_n_params(
      model,
    );
  }

  late final _llama_model_n_paramsPtr = _lookup<
          ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<llama_model>)>>(
      'llama_model_n_params');
  late final _llama_model_n_params = _llama_model_n_paramsPtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  bool llama_model_has_encoder(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_has_encoder(
      model,
    );
  }

  late final _llama_model_has_encoderPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<llama_model>)>>(
          'llama_model_has_encoder');
  late final _llama_model_has_encoder = _llama_model_has_encoderPtr
      .asFunction<bool Function(ffi.Pointer<llama_model>)>();

  bool llama_model_has_decoder(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_has_decoder(
      model,
    );
  }

  late final _llama_model_has_decoderPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<llama_model>)>>(
          'llama_model_has_decoder');
  late final _llama_model_has_decoder = _llama_model_has_decoderPtr
      .asFunction<bool Function(ffi.Pointer<llama_model>)>();

  int llama_model_decoder_start_token(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_decoder_start_token(
      model,
    );
  }

  late final _llama_model_decoder_start_tokenPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_model>)>>(
      'llama_model_decoder_start_token');
  late final _llama_model_decoder_start_token =
      _llama_model_decoder_start_tokenPtr
          .asFunction<int Function(ffi.Pointer<llama_model>)>();

  bool llama_model_is_recurrent(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_is_recurrent(
      model,
    );
  }

  late final _llama_model_is_recurrentPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<llama_model>)>>(
          'llama_model_is_recurrent');
  late final _llama_model_is_recurrent = _llama_model_is_recurrentPtr
      .asFunction<bool Function(ffi.Pointer<llama_model>)>();

  int llama_model_quantize(
    ffi.Pointer<ffi.Char> fname_inp,
    ffi.Pointer<ffi.Char> fname_out,
    ffi.Pointer<llama_model_quantize_params> params,
  ) {
    return _llama_model_quantize(
      fname_inp,
      fname_out,
      params,
    );
  }

  late final _llama_model_quantizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<llama_model_quantize_params>)>>(
      'llama_model_quantize');
  late final _llama_model_quantize = _llama_model_quantizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<llama_model_quantize_params>)>();

  ffi.Pointer<llama_adapter_lora> llama_adapter_lora_init(
    ffi.Pointer<llama_model> model,
    ffi.Pointer<ffi.Char> path_lora,
  ) {
    return _llama_adapter_lora_init(
      model,
      path_lora,
    );
  }

  late final _llama_adapter_lora_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_adapter_lora> Function(ffi.Pointer<llama_model>,
              ffi.Pointer<ffi.Char>)>>('llama_adapter_lora_init');
  late final _llama_adapter_lora_init = _llama_adapter_lora_initPtr.asFunction<
      ffi.Pointer<llama_adapter_lora> Function(
          ffi.Pointer<llama_model>, ffi.Pointer<ffi.Char>)>();

  void llama_adapter_lora_free(
    ffi.Pointer<llama_adapter_lora> adapter,
  ) {
    return _llama_adapter_lora_free(
      adapter,
    );
  }

  late final _llama_adapter_lora_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<llama_adapter_lora>)>>(
      'llama_adapter_lora_free');
  late final _llama_adapter_lora_free = _llama_adapter_lora_freePtr
      .asFunction<void Function(ffi.Pointer<llama_adapter_lora>)>();

  int llama_set_adapter_lora(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_adapter_lora> adapter,
    double scale,
  ) {
    return _llama_set_adapter_lora(
      ctx,
      adapter,
      scale,
    );
  }

  late final _llama_set_adapter_loraPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<llama_adapter_lora>,
              ffi.Float)>>('llama_set_adapter_lora');
  late final _llama_set_adapter_lora = _llama_set_adapter_loraPtr.asFunction<
      int Function(ffi.Pointer<llama_context>, ffi.Pointer<llama_adapter_lora>,
          double)>();

  int llama_rm_adapter_lora(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<llama_adapter_lora> adapter,
  ) {
    return _llama_rm_adapter_lora(
      ctx,
      adapter,
    );
  }

  late final _llama_rm_adapter_loraPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<llama_context>,
              ffi.Pointer<llama_adapter_lora>)>>('llama_rm_adapter_lora');
  late final _llama_rm_adapter_lora = _llama_rm_adapter_loraPtr.asFunction<
      int Function(
          ffi.Pointer<llama_context>, ffi.Pointer<llama_adapter_lora>)>();

  void llama_clear_adapter_lora(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_clear_adapter_lora(
      ctx,
    );
  }

  late final _llama_clear_adapter_loraPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_clear_adapter_lora');
  late final _llama_clear_adapter_lora = _llama_clear_adapter_loraPtr
      .asFunction<void Function(ffi.Pointer<llama_context>)>();

  int llama_apply_adapter_cvec(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Float> data,
    int len,
    int n_embd,
    int il_start,
    int il_end,
  ) {
    return _llama_apply_adapter_cvec(
      ctx,
      data,
      len,
      n_embd,
      il_start,
      il_end,
    );
  }

  late final _llama_apply_adapter_cvecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Float>,
              ffi.Size,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('llama_apply_adapter_cvec');
  late final _llama_apply_adapter_cvec =
      _llama_apply_adapter_cvecPtr.asFunction<
          int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Float>, int,
              int, int, int)>();

  void llama_memory_clear(
    llama_memory_t mem,
    bool data,
  ) {
    return _llama_memory_clear(
      mem,
      data,
    );
  }

  late final _llama_memory_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(llama_memory_t, ffi.Bool)>>(
          'llama_memory_clear');
  late final _llama_memory_clear =
      _llama_memory_clearPtr.asFunction<void Function(llama_memory_t, bool)>();

  bool llama_memory_seq_rm(
    llama_memory_t mem,
    int seq_id,
    int p0,
    int p1,
  ) {
    return _llama_memory_seq_rm(
      mem,
      seq_id,
      p0,
      p1,
    );
  }

  late final _llama_memory_seq_rmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(llama_memory_t, llama_seq_id, llama_pos,
              llama_pos)>>('llama_memory_seq_rm');
  late final _llama_memory_seq_rm = _llama_memory_seq_rmPtr
      .asFunction<bool Function(llama_memory_t, int, int, int)>();

  void llama_memory_seq_cp(
    llama_memory_t mem,
    int seq_id_src,
    int seq_id_dst,
    int p0,
    int p1,
  ) {
    return _llama_memory_seq_cp(
      mem,
      seq_id_src,
      seq_id_dst,
      p0,
      p1,
    );
  }

  late final _llama_memory_seq_cpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(llama_memory_t, llama_seq_id, llama_seq_id,
              llama_pos, llama_pos)>>('llama_memory_seq_cp');
  late final _llama_memory_seq_cp = _llama_memory_seq_cpPtr
      .asFunction<void Function(llama_memory_t, int, int, int, int)>();

  void llama_memory_seq_keep(
    llama_memory_t mem,
    int seq_id,
  ) {
    return _llama_memory_seq_keep(
      mem,
      seq_id,
    );
  }

  late final _llama_memory_seq_keepPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(llama_memory_t, llama_seq_id)>>(
      'llama_memory_seq_keep');
  late final _llama_memory_seq_keep = _llama_memory_seq_keepPtr
      .asFunction<void Function(llama_memory_t, int)>();

  void llama_memory_seq_add(
    llama_memory_t mem,
    int seq_id,
    int p0,
    int p1,
    int delta,
  ) {
    return _llama_memory_seq_add(
      mem,
      seq_id,
      p0,
      p1,
      delta,
    );
  }

  late final _llama_memory_seq_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(llama_memory_t, llama_seq_id, llama_pos, llama_pos,
              llama_pos)>>('llama_memory_seq_add');
  late final _llama_memory_seq_add = _llama_memory_seq_addPtr
      .asFunction<void Function(llama_memory_t, int, int, int, int)>();

  void llama_memory_seq_div(
    llama_memory_t mem,
    int seq_id,
    int p0,
    int p1,
    int d,
  ) {
    return _llama_memory_seq_div(
      mem,
      seq_id,
      p0,
      p1,
      d,
    );
  }

  late final _llama_memory_seq_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(llama_memory_t, llama_seq_id, llama_pos, llama_pos,
              ffi.Int)>>('llama_memory_seq_div');
  late final _llama_memory_seq_div = _llama_memory_seq_divPtr
      .asFunction<void Function(llama_memory_t, int, int, int, int)>();

  int llama_memory_seq_pos_min(
    llama_memory_t mem,
    int seq_id,
  ) {
    return _llama_memory_seq_pos_min(
      mem,
      seq_id,
    );
  }

  late final _llama_memory_seq_pos_minPtr = _lookup<
          ffi.NativeFunction<llama_pos Function(llama_memory_t, llama_seq_id)>>(
      'llama_memory_seq_pos_min');
  late final _llama_memory_seq_pos_min = _llama_memory_seq_pos_minPtr
      .asFunction<int Function(llama_memory_t, int)>();

  int llama_memory_seq_pos_max(
    llama_memory_t mem,
    int seq_id,
  ) {
    return _llama_memory_seq_pos_max(
      mem,
      seq_id,
    );
  }

  late final _llama_memory_seq_pos_maxPtr = _lookup<
          ffi.NativeFunction<llama_pos Function(llama_memory_t, llama_seq_id)>>(
      'llama_memory_seq_pos_max');
  late final _llama_memory_seq_pos_max = _llama_memory_seq_pos_maxPtr
      .asFunction<int Function(llama_memory_t, int)>();

  bool llama_memory_can_shift(
    llama_memory_t mem,
  ) {
    return _llama_memory_can_shift(
      mem,
    );
  }

  late final _llama_memory_can_shiftPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(llama_memory_t)>>(
          'llama_memory_can_shift');
  late final _llama_memory_can_shift =
      _llama_memory_can_shiftPtr.asFunction<bool Function(llama_memory_t)>();

  int llama_kv_self_n_tokens(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_kv_self_n_tokens(
      ctx,
    );
  }

  late final _llama_kv_self_n_tokensPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_context>)>>(
      'llama_kv_self_n_tokens');
  late final _llama_kv_self_n_tokens = _llama_kv_self_n_tokensPtr
      .asFunction<int Function(ffi.Pointer<llama_context>)>();

  int llama_kv_self_used_cells(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_kv_self_used_cells(
      ctx,
    );
  }

  late final _llama_kv_self_used_cellsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_context>)>>(
      'llama_kv_self_used_cells');
  late final _llama_kv_self_used_cells = _llama_kv_self_used_cellsPtr
      .asFunction<int Function(ffi.Pointer<llama_context>)>();

  void llama_kv_self_clear(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_kv_self_clear(
      ctx,
    );
  }

  late final _llama_kv_self_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_kv_self_clear');
  late final _llama_kv_self_clear = _llama_kv_self_clearPtr
      .asFunction<void Function(ffi.Pointer<llama_context>)>();

  bool llama_kv_self_seq_rm(
    ffi.Pointer<llama_context> ctx,
    int seq_id,
    int p0,
    int p1,
  ) {
    return _llama_kv_self_seq_rm(
      ctx,
      seq_id,
      p0,
      p1,
    );
  }

  late final _llama_kv_self_seq_rmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<llama_context>, llama_seq_id, llama_pos,
              llama_pos)>>('llama_kv_self_seq_rm');
  late final _llama_kv_self_seq_rm = _llama_kv_self_seq_rmPtr
      .asFunction<bool Function(ffi.Pointer<llama_context>, int, int, int)>();

  void llama_kv_self_seq_cp(
    ffi.Pointer<llama_context> ctx,
    int seq_id_src,
    int seq_id_dst,
    int p0,
    int p1,
  ) {
    return _llama_kv_self_seq_cp(
      ctx,
      seq_id_src,
      seq_id_dst,
      p0,
      p1,
    );
  }

  late final _llama_kv_self_seq_cpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_context>, llama_seq_id,
              llama_seq_id, llama_pos, llama_pos)>>('llama_kv_self_seq_cp');
  late final _llama_kv_self_seq_cp = _llama_kv_self_seq_cpPtr.asFunction<
      void Function(ffi.Pointer<llama_context>, int, int, int, int)>();

  void llama_kv_self_seq_keep(
    ffi.Pointer<llama_context> ctx,
    int seq_id,
  ) {
    return _llama_kv_self_seq_keep(
      ctx,
      seq_id,
    );
  }

  late final _llama_kv_self_seq_keepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_context>,
              llama_seq_id)>>('llama_kv_self_seq_keep');
  late final _llama_kv_self_seq_keep = _llama_kv_self_seq_keepPtr
      .asFunction<void Function(ffi.Pointer<llama_context>, int)>();

  void llama_kv_self_seq_add(
    ffi.Pointer<llama_context> ctx,
    int seq_id,
    int p0,
    int p1,
    int delta,
  ) {
    return _llama_kv_self_seq_add(
      ctx,
      seq_id,
      p0,
      p1,
      delta,
    );
  }

  late final _llama_kv_self_seq_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_context>, llama_seq_id, llama_pos,
              llama_pos, llama_pos)>>('llama_kv_self_seq_add');
  late final _llama_kv_self_seq_add = _llama_kv_self_seq_addPtr.asFunction<
      void Function(ffi.Pointer<llama_context>, int, int, int, int)>();

  void llama_kv_self_seq_div(
    ffi.Pointer<llama_context> ctx,
    int seq_id,
    int p0,
    int p1,
    int d,
  ) {
    return _llama_kv_self_seq_div(
      ctx,
      seq_id,
      p0,
      p1,
      d,
    );
  }

  late final _llama_kv_self_seq_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_context>, llama_seq_id, llama_pos,
              llama_pos, ffi.Int)>>('llama_kv_self_seq_div');
  late final _llama_kv_self_seq_div = _llama_kv_self_seq_divPtr.asFunction<
      void Function(ffi.Pointer<llama_context>, int, int, int, int)>();

  int llama_kv_self_seq_pos_min(
    ffi.Pointer<llama_context> ctx,
    int seq_id,
  ) {
    return _llama_kv_self_seq_pos_min(
      ctx,
      seq_id,
    );
  }

  late final _llama_kv_self_seq_pos_minPtr = _lookup<
      ffi.NativeFunction<
          llama_pos Function(ffi.Pointer<llama_context>,
              llama_seq_id)>>('llama_kv_self_seq_pos_min');
  late final _llama_kv_self_seq_pos_min = _llama_kv_self_seq_pos_minPtr
      .asFunction<int Function(ffi.Pointer<llama_context>, int)>();

  int llama_kv_self_seq_pos_max(
    ffi.Pointer<llama_context> ctx,
    int seq_id,
  ) {
    return _llama_kv_self_seq_pos_max(
      ctx,
      seq_id,
    );
  }

  late final _llama_kv_self_seq_pos_maxPtr = _lookup<
      ffi.NativeFunction<
          llama_pos Function(ffi.Pointer<llama_context>,
              llama_seq_id)>>('llama_kv_self_seq_pos_max');
  late final _llama_kv_self_seq_pos_max = _llama_kv_self_seq_pos_maxPtr
      .asFunction<int Function(ffi.Pointer<llama_context>, int)>();

  void llama_kv_self_defrag(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_kv_self_defrag(
      ctx,
    );
  }

  late final _llama_kv_self_defragPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_kv_self_defrag');
  late final _llama_kv_self_defrag = _llama_kv_self_defragPtr
      .asFunction<void Function(ffi.Pointer<llama_context>)>();

  bool llama_kv_self_can_shift(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_kv_self_can_shift(
      ctx,
    );
  }

  late final _llama_kv_self_can_shiftPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<llama_context>)>>(
      'llama_kv_self_can_shift');
  late final _llama_kv_self_can_shift = _llama_kv_self_can_shiftPtr
      .asFunction<bool Function(ffi.Pointer<llama_context>)>();

  void llama_kv_self_update(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_kv_self_update(
      ctx,
    );
  }

  late final _llama_kv_self_updatePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_kv_self_update');
  late final _llama_kv_self_update = _llama_kv_self_updatePtr
      .asFunction<void Function(ffi.Pointer<llama_context>)>();

  int llama_state_get_size(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_state_get_size(
      ctx,
    );
  }

  late final _llama_state_get_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<llama_context>)>>(
      'llama_state_get_size');
  late final _llama_state_get_size = _llama_state_get_sizePtr
      .asFunction<int Function(ffi.Pointer<llama_context>)>();

  int llama_get_state_size(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_get_state_size(
      ctx,
    );
  }

  late final _llama_get_state_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<llama_context>)>>(
      'llama_get_state_size');
  late final _llama_get_state_size = _llama_get_state_sizePtr
      .asFunction<int Function(ffi.Pointer<llama_context>)>();

  int llama_state_get_data(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Uint8> dst,
    int size,
  ) {
    return _llama_state_get_data(
      ctx,
      dst,
      size,
    );
  }

  late final _llama_state_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('llama_state_get_data');
  late final _llama_state_get_data = _llama_state_get_dataPtr.asFunction<
      int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>, int)>();

  int llama_copy_state_data(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Uint8> dst,
  ) {
    return _llama_copy_state_data(
      ctx,
      dst,
    );
  }

  late final _llama_copy_state_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Uint8>)>>('llama_copy_state_data');
  late final _llama_copy_state_data = _llama_copy_state_dataPtr.asFunction<
      int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>)>();

  int llama_state_set_data(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Uint8> src,
    int size,
  ) {
    return _llama_state_set_data(
      ctx,
      src,
      size,
    );
  }

  late final _llama_state_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('llama_state_set_data');
  late final _llama_state_set_data = _llama_state_set_dataPtr.asFunction<
      int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>, int)>();

  int llama_set_state_data(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Uint8> src,
  ) {
    return _llama_set_state_data(
      ctx,
      src,
    );
  }

  late final _llama_set_state_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Uint8>)>>('llama_set_state_data');
  late final _llama_set_state_data = _llama_set_state_dataPtr.asFunction<
      int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>)>();

  bool llama_state_load_file(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Char> path_session,
    ffi.Pointer<llama_token> tokens_out,
    int n_token_capacity,
    ffi.Pointer<ffi.Size> n_token_count_out,
  ) {
    return _llama_state_load_file(
      ctx,
      path_session,
      tokens_out,
      n_token_capacity,
      n_token_count_out,
    );
  }

  late final _llama_state_load_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<llama_token>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('llama_state_load_file');
  late final _llama_state_load_file = _llama_state_load_filePtr.asFunction<
      bool Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<llama_token>, int, ffi.Pointer<ffi.Size>)>();

  bool llama_load_session_file(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Char> path_session,
    ffi.Pointer<llama_token> tokens_out,
    int n_token_capacity,
    ffi.Pointer<ffi.Size> n_token_count_out,
  ) {
    return _llama_load_session_file(
      ctx,
      path_session,
      tokens_out,
      n_token_capacity,
      n_token_count_out,
    );
  }

  late final _llama_load_session_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<llama_token>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('llama_load_session_file');
  late final _llama_load_session_file = _llama_load_session_filePtr.asFunction<
      bool Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<llama_token>, int, ffi.Pointer<ffi.Size>)>();

  bool llama_state_save_file(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Char> path_session,
    ffi.Pointer<llama_token> tokens,
    int n_token_count,
  ) {
    return _llama_state_save_file(
      ctx,
      path_session,
      tokens,
      n_token_count,
    );
  }

  late final _llama_state_save_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<llama_token>, ffi.Size)>>('llama_state_save_file');
  late final _llama_state_save_file = _llama_state_save_filePtr.asFunction<
      bool Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<llama_token>, int)>();

  bool llama_save_session_file(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Char> path_session,
    ffi.Pointer<llama_token> tokens,
    int n_token_count,
  ) {
    return _llama_save_session_file(
      ctx,
      path_session,
      tokens,
      n_token_count,
    );
  }

  late final _llama_save_session_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<llama_token>, ffi.Size)>>('llama_save_session_file');
  late final _llama_save_session_file = _llama_save_session_filePtr.asFunction<
      bool Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<llama_token>, int)>();

  int llama_state_seq_get_size(
    ffi.Pointer<llama_context> ctx,
    int seq_id,
  ) {
    return _llama_state_seq_get_size(
      ctx,
      seq_id,
    );
  }

  late final _llama_state_seq_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<llama_context>,
              llama_seq_id)>>('llama_state_seq_get_size');
  late final _llama_state_seq_get_size = _llama_state_seq_get_sizePtr
      .asFunction<int Function(ffi.Pointer<llama_context>, int)>();

  int llama_state_seq_get_data(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Uint8> dst,
    int size,
    int seq_id,
  ) {
    return _llama_state_seq_get_data(
      ctx,
      dst,
      size,
      seq_id,
    );
  }

  late final _llama_state_seq_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Size, llama_seq_id)>>('llama_state_seq_get_data');
  late final _llama_state_seq_get_data =
      _llama_state_seq_get_dataPtr.asFunction<
          int Function(
              ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>, int, int)>();

  int llama_state_seq_set_data(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Uint8> src,
    int size,
    int dest_seq_id,
  ) {
    return _llama_state_seq_set_data(
      ctx,
      src,
      size,
      dest_seq_id,
    );
  }

  late final _llama_state_seq_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>,
              ffi.Size, llama_seq_id)>>('llama_state_seq_set_data');
  late final _llama_state_seq_set_data =
      _llama_state_seq_set_dataPtr.asFunction<
          int Function(
              ffi.Pointer<llama_context>, ffi.Pointer<ffi.Uint8>, int, int)>();

  int llama_state_seq_save_file(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Char> filepath,
    int seq_id,
    ffi.Pointer<llama_token> tokens,
    int n_token_count,
  ) {
    return _llama_state_seq_save_file(
      ctx,
      filepath,
      seq_id,
      tokens,
      n_token_count,
    );
  }

  late final _llama_state_seq_save_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Char>,
              llama_seq_id,
              ffi.Pointer<llama_token>,
              ffi.Size)>>('llama_state_seq_save_file');
  late final _llama_state_seq_save_file =
      _llama_state_seq_save_filePtr.asFunction<
          int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<llama_token>, int)>();

  int llama_state_seq_load_file(
    ffi.Pointer<llama_context> ctx,
    ffi.Pointer<ffi.Char> filepath,
    int dest_seq_id,
    ffi.Pointer<llama_token> tokens_out,
    int n_token_capacity,
    ffi.Pointer<ffi.Size> n_token_count_out,
  ) {
    return _llama_state_seq_load_file(
      ctx,
      filepath,
      dest_seq_id,
      tokens_out,
      n_token_capacity,
      n_token_count_out,
    );
  }

  late final _llama_state_seq_load_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<llama_context>,
              ffi.Pointer<ffi.Char>,
              llama_seq_id,
              ffi.Pointer<llama_token>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('llama_state_seq_load_file');
  late final _llama_state_seq_load_file =
      _llama_state_seq_load_filePtr.asFunction<
          int Function(ffi.Pointer<llama_context>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<llama_token>, int, ffi.Pointer<ffi.Size>)>();

  llama_batch llama_batch_get_one(
    ffi.Pointer<llama_token> tokens,
    int n_tokens,
  ) {
    return _llama_batch_get_one(
      tokens,
      n_tokens,
    );
  }

  late final _llama_batch_get_onePtr = _lookup<
      ffi.NativeFunction<
          llama_batch Function(
              ffi.Pointer<llama_token>, ffi.Int32)>>('llama_batch_get_one');
  late final _llama_batch_get_one = _llama_batch_get_onePtr
      .asFunction<llama_batch Function(ffi.Pointer<llama_token>, int)>();

  llama_batch llama_batch_init(
    int n_tokens,
    int embd,
    int n_seq_max,
  ) {
    return _llama_batch_init(
      n_tokens,
      embd,
      n_seq_max,
    );
  }

  late final _llama_batch_initPtr = _lookup<
      ffi.NativeFunction<
          llama_batch Function(
              ffi.Int32, ffi.Int32, ffi.Int32)>>('llama_batch_init');
  late final _llama_batch_init =
      _llama_batch_initPtr.asFunction<llama_batch Function(int, int, int)>();

  void llama_batch_free(
    llama_batch batch,
  ) {
    return _llama_batch_free(
      batch,
    );
  }

  late final _llama_batch_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(llama_batch)>>(
          'llama_batch_free');
  late final _llama_batch_free =
      _llama_batch_freePtr.asFunction<void Function(llama_batch)>();

  int llama_encode(
    ffi.Pointer<llama_context> ctx,
    llama_batch batch,
  ) {
    return _llama_encode(
      ctx,
      batch,
    );
  }

  late final _llama_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_context>, llama_batch)>>('llama_encode');
  late final _llama_encode = _llama_encodePtr
      .asFunction<int Function(ffi.Pointer<llama_context>, llama_batch)>();

  int llama_decode(
    ffi.Pointer<llama_context> ctx,
    llama_batch batch,
  ) {
    return _llama_decode(
      ctx,
      batch,
    );
  }

  late final _llama_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_context>, llama_batch)>>('llama_decode');
  late final _llama_decode = _llama_decodePtr
      .asFunction<int Function(ffi.Pointer<llama_context>, llama_batch)>();

  void llama_set_n_threads(
    ffi.Pointer<llama_context> ctx,
    int n_threads,
    int n_threads_batch,
  ) {
    return _llama_set_n_threads(
      ctx,
      n_threads,
      n_threads_batch,
    );
  }

  late final _llama_set_n_threadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_context>, ffi.Int32,
              ffi.Int32)>>('llama_set_n_threads');
  late final _llama_set_n_threads = _llama_set_n_threadsPtr
      .asFunction<void Function(ffi.Pointer<llama_context>, int, int)>();

  int llama_n_threads(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_n_threads(
      ctx,
    );
  }

  late final _llama_n_threadsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_context>)>>(
      'llama_n_threads');
  late final _llama_n_threads = _llama_n_threadsPtr
      .asFunction<int Function(ffi.Pointer<llama_context>)>();

  int llama_n_threads_batch(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_n_threads_batch(
      ctx,
    );
  }

  late final _llama_n_threads_batchPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_context>)>>(
      'llama_n_threads_batch');
  late final _llama_n_threads_batch = _llama_n_threads_batchPtr
      .asFunction<int Function(ffi.Pointer<llama_context>)>();

  void llama_set_embeddings(
    ffi.Pointer<llama_context> ctx,
    bool embeddings,
  ) {
    return _llama_set_embeddings(
      ctx,
      embeddings,
    );
  }

  late final _llama_set_embeddingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>, ffi.Bool)>>('llama_set_embeddings');
  late final _llama_set_embeddings = _llama_set_embeddingsPtr
      .asFunction<void Function(ffi.Pointer<llama_context>, bool)>();

  void llama_set_causal_attn(
    ffi.Pointer<llama_context> ctx,
    bool causal_attn,
  ) {
    return _llama_set_causal_attn(
      ctx,
      causal_attn,
    );
  }

  late final _llama_set_causal_attnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>, ffi.Bool)>>('llama_set_causal_attn');
  late final _llama_set_causal_attn = _llama_set_causal_attnPtr
      .asFunction<void Function(ffi.Pointer<llama_context>, bool)>();

  void llama_set_warmup(
    ffi.Pointer<llama_context> ctx,
    bool warmup,
  ) {
    return _llama_set_warmup(
      ctx,
      warmup,
    );
  }

  late final _llama_set_warmupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>, ffi.Bool)>>('llama_set_warmup');
  late final _llama_set_warmup = _llama_set_warmupPtr
      .asFunction<void Function(ffi.Pointer<llama_context>, bool)>();

  void llama_set_abort_callback(
    ffi.Pointer<llama_context> ctx,
    ggml_abort_callback abort_callback,
    ffi.Pointer<ffi.Void> abort_callback_data,
  ) {
    return _llama_set_abort_callback(
      ctx,
      abort_callback,
      abort_callback_data,
    );
  }

  late final _llama_set_abort_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_context>, ggml_abort_callback,
              ffi.Pointer<ffi.Void>)>>('llama_set_abort_callback');
  late final _llama_set_abort_callback =
      _llama_set_abort_callbackPtr.asFunction<
          void Function(ffi.Pointer<llama_context>, ggml_abort_callback,
              ffi.Pointer<ffi.Void>)>();

  void llama_synchronize(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_synchronize(
      ctx,
    );
  }

  late final _llama_synchronizePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_synchronize');
  late final _llama_synchronize = _llama_synchronizePtr
      .asFunction<void Function(ffi.Pointer<llama_context>)>();

  ffi.Pointer<ffi.Float> llama_get_logits(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_get_logits(
      ctx,
    );
  }

  late final _llama_get_logitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<llama_context>)>>('llama_get_logits');
  late final _llama_get_logits = _llama_get_logitsPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>)>();

  ffi.Pointer<ffi.Float> llama_get_logits_ith(
    ffi.Pointer<llama_context> ctx,
    int i,
  ) {
    return _llama_get_logits_ith(
      ctx,
      i,
    );
  }

  late final _llama_get_logits_ithPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<llama_context>, ffi.Int32)>>('llama_get_logits_ith');
  late final _llama_get_logits_ith = _llama_get_logits_ithPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>, int)>();

  ffi.Pointer<ffi.Float> llama_get_embeddings(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_get_embeddings(
      ctx,
    );
  }

  late final _llama_get_embeddingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<llama_context>)>>('llama_get_embeddings');
  late final _llama_get_embeddings = _llama_get_embeddingsPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>)>();

  ffi.Pointer<ffi.Float> llama_get_embeddings_ith(
    ffi.Pointer<llama_context> ctx,
    int i,
  ) {
    return _llama_get_embeddings_ith(
      ctx,
      i,
    );
  }

  late final _llama_get_embeddings_ithPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>,
              ffi.Int32)>>('llama_get_embeddings_ith');
  late final _llama_get_embeddings_ith =
      _llama_get_embeddings_ithPtr.asFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>, int)>();

  ffi.Pointer<ffi.Float> llama_get_embeddings_seq(
    ffi.Pointer<llama_context> ctx,
    int seq_id,
  ) {
    return _llama_get_embeddings_seq(
      ctx,
      seq_id,
    );
  }

  late final _llama_get_embeddings_seqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>,
              llama_seq_id)>>('llama_get_embeddings_seq');
  late final _llama_get_embeddings_seq =
      _llama_get_embeddings_seqPtr.asFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>, int)>();

  ffi.Pointer<ffi.Char> llama_vocab_get_text(
    ffi.Pointer<llama_vocab> vocab,
    int token,
  ) {
    return _llama_vocab_get_text(
      vocab,
      token,
    );
  }

  late final _llama_vocab_get_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<llama_vocab>, llama_token)>>('llama_vocab_get_text');
  late final _llama_vocab_get_text = _llama_vocab_get_textPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<llama_vocab>, int)>();

  double llama_vocab_get_score(
    ffi.Pointer<llama_vocab> vocab,
    int token,
  ) {
    return _llama_vocab_get_score(
      vocab,
      token,
    );
  }

  late final _llama_vocab_get_scorePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<llama_vocab>, llama_token)>>('llama_vocab_get_score');
  late final _llama_vocab_get_score = _llama_vocab_get_scorePtr
      .asFunction<double Function(ffi.Pointer<llama_vocab>, int)>();

  llama_token_attr llama_vocab_get_attr(
    ffi.Pointer<llama_vocab> vocab,
    Dartllama_token token,
  ) {
    return llama_token_attr.fromValue(_llama_vocab_get_attr(
      vocab,
      token,
    ));
  }

  late final _llama_vocab_get_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<llama_vocab>, llama_token)>>('llama_vocab_get_attr');
  late final _llama_vocab_get_attr = _llama_vocab_get_attrPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>, int)>();

  bool llama_vocab_is_eog(
    ffi.Pointer<llama_vocab> vocab,
    int token,
  ) {
    return _llama_vocab_is_eog(
      vocab,
      token,
    );
  }

  late final _llama_vocab_is_eogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<llama_vocab>, llama_token)>>('llama_vocab_is_eog');
  late final _llama_vocab_is_eog = _llama_vocab_is_eogPtr
      .asFunction<bool Function(ffi.Pointer<llama_vocab>, int)>();

  bool llama_vocab_is_control(
    ffi.Pointer<llama_vocab> vocab,
    int token,
  ) {
    return _llama_vocab_is_control(
      vocab,
      token,
    );
  }

  late final _llama_vocab_is_controlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<llama_vocab>,
              llama_token)>>('llama_vocab_is_control');
  late final _llama_vocab_is_control = _llama_vocab_is_controlPtr
      .asFunction<bool Function(ffi.Pointer<llama_vocab>, int)>();

  int llama_vocab_bos(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_bos(
      vocab,
    );
  }

  late final _llama_vocab_bosPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_bos');
  late final _llama_vocab_bos =
      _llama_vocab_bosPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_eos(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_eos(
      vocab,
    );
  }

  late final _llama_vocab_eosPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_eos');
  late final _llama_vocab_eos =
      _llama_vocab_eosPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_eot(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_eot(
      vocab,
    );
  }

  late final _llama_vocab_eotPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_eot');
  late final _llama_vocab_eot =
      _llama_vocab_eotPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_sep(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_sep(
      vocab,
    );
  }

  late final _llama_vocab_sepPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_sep');
  late final _llama_vocab_sep =
      _llama_vocab_sepPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_nl(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_nl(
      vocab,
    );
  }

  late final _llama_vocab_nlPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_nl');
  late final _llama_vocab_nl =
      _llama_vocab_nlPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_pad(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_pad(
      vocab,
    );
  }

  late final _llama_vocab_padPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_pad');
  late final _llama_vocab_pad =
      _llama_vocab_padPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  bool llama_vocab_get_add_bos(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_get_add_bos(
      vocab,
    );
  }

  late final _llama_vocab_get_add_bosPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<llama_vocab>)>>(
          'llama_vocab_get_add_bos');
  late final _llama_vocab_get_add_bos = _llama_vocab_get_add_bosPtr
      .asFunction<bool Function(ffi.Pointer<llama_vocab>)>();

  bool llama_vocab_get_add_eos(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_get_add_eos(
      vocab,
    );
  }

  late final _llama_vocab_get_add_eosPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<llama_vocab>)>>(
          'llama_vocab_get_add_eos');
  late final _llama_vocab_get_add_eos = _llama_vocab_get_add_eosPtr
      .asFunction<bool Function(ffi.Pointer<llama_vocab>)>();

  bool llama_vocab_get_add_sep(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_get_add_sep(
      vocab,
    );
  }

  late final _llama_vocab_get_add_sepPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<llama_vocab>)>>(
          'llama_vocab_get_add_sep');
  late final _llama_vocab_get_add_sep = _llama_vocab_get_add_sepPtr
      .asFunction<bool Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_fim_pre(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_fim_pre(
      vocab,
    );
  }

  late final _llama_vocab_fim_prePtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_fim_pre');
  late final _llama_vocab_fim_pre = _llama_vocab_fim_prePtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_fim_suf(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_fim_suf(
      vocab,
    );
  }

  late final _llama_vocab_fim_sufPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_fim_suf');
  late final _llama_vocab_fim_suf = _llama_vocab_fim_sufPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_fim_mid(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_fim_mid(
      vocab,
    );
  }

  late final _llama_vocab_fim_midPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_fim_mid');
  late final _llama_vocab_fim_mid = _llama_vocab_fim_midPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_fim_pad(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_fim_pad(
      vocab,
    );
  }

  late final _llama_vocab_fim_padPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_fim_pad');
  late final _llama_vocab_fim_pad = _llama_vocab_fim_padPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_fim_rep(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_fim_rep(
      vocab,
    );
  }

  late final _llama_vocab_fim_repPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_fim_rep');
  late final _llama_vocab_fim_rep = _llama_vocab_fim_repPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_fim_sep(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_fim_sep(
      vocab,
    );
  }

  late final _llama_vocab_fim_sepPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_fim_sep');
  late final _llama_vocab_fim_sep = _llama_vocab_fim_sepPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  ffi.Pointer<ffi.Char> llama_token_get_text(
    ffi.Pointer<llama_vocab> vocab,
    int token,
  ) {
    return _llama_token_get_text(
      vocab,
      token,
    );
  }

  late final _llama_token_get_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<llama_vocab>, llama_token)>>('llama_token_get_text');
  late final _llama_token_get_text = _llama_token_get_textPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<llama_vocab>, int)>();

  double llama_token_get_score(
    ffi.Pointer<llama_vocab> vocab,
    int token,
  ) {
    return _llama_token_get_score(
      vocab,
      token,
    );
  }

  late final _llama_token_get_scorePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<llama_vocab>, llama_token)>>('llama_token_get_score');
  late final _llama_token_get_score = _llama_token_get_scorePtr
      .asFunction<double Function(ffi.Pointer<llama_vocab>, int)>();

  llama_token_attr llama_token_get_attr(
    ffi.Pointer<llama_vocab> vocab,
    Dartllama_token token,
  ) {
    return llama_token_attr.fromValue(_llama_token_get_attr(
      vocab,
      token,
    ));
  }

  late final _llama_token_get_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<llama_vocab>, llama_token)>>('llama_token_get_attr');
  late final _llama_token_get_attr = _llama_token_get_attrPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>, int)>();

  bool llama_token_is_eog(
    ffi.Pointer<llama_vocab> vocab,
    int token,
  ) {
    return _llama_token_is_eog(
      vocab,
      token,
    );
  }

  late final _llama_token_is_eogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<llama_vocab>, llama_token)>>('llama_token_is_eog');
  late final _llama_token_is_eog = _llama_token_is_eogPtr
      .asFunction<bool Function(ffi.Pointer<llama_vocab>, int)>();

  bool llama_token_is_control(
    ffi.Pointer<llama_vocab> vocab,
    int token,
  ) {
    return _llama_token_is_control(
      vocab,
      token,
    );
  }

  late final _llama_token_is_controlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<llama_vocab>,
              llama_token)>>('llama_token_is_control');
  late final _llama_token_is_control = _llama_token_is_controlPtr
      .asFunction<bool Function(ffi.Pointer<llama_vocab>, int)>();

  int llama_token_bos(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_bos(
      vocab,
    );
  }

  late final _llama_token_bosPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_bos');
  late final _llama_token_bos =
      _llama_token_bosPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_eos(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_eos(
      vocab,
    );
  }

  late final _llama_token_eosPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_eos');
  late final _llama_token_eos =
      _llama_token_eosPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_eot(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_eot(
      vocab,
    );
  }

  late final _llama_token_eotPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_eot');
  late final _llama_token_eot =
      _llama_token_eotPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_cls(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_cls(
      vocab,
    );
  }

  late final _llama_token_clsPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_cls');
  late final _llama_token_cls =
      _llama_token_clsPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_sep(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_sep(
      vocab,
    );
  }

  late final _llama_token_sepPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_sep');
  late final _llama_token_sep =
      _llama_token_sepPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_nl(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_nl(
      vocab,
    );
  }

  late final _llama_token_nlPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_nl');
  late final _llama_token_nl =
      _llama_token_nlPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_pad(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_pad(
      vocab,
    );
  }

  late final _llama_token_padPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_pad');
  late final _llama_token_pad =
      _llama_token_padPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  bool llama_add_bos_token(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_add_bos_token(
      vocab,
    );
  }

  late final _llama_add_bos_tokenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<llama_vocab>)>>(
          'llama_add_bos_token');
  late final _llama_add_bos_token = _llama_add_bos_tokenPtr
      .asFunction<bool Function(ffi.Pointer<llama_vocab>)>();

  bool llama_add_eos_token(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_add_eos_token(
      vocab,
    );
  }

  late final _llama_add_eos_tokenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<llama_vocab>)>>(
          'llama_add_eos_token');
  late final _llama_add_eos_token = _llama_add_eos_tokenPtr
      .asFunction<bool Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_fim_pre(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_fim_pre(
      vocab,
    );
  }

  late final _llama_token_fim_prePtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_fim_pre');
  late final _llama_token_fim_pre = _llama_token_fim_prePtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_fim_suf(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_fim_suf(
      vocab,
    );
  }

  late final _llama_token_fim_sufPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_fim_suf');
  late final _llama_token_fim_suf = _llama_token_fim_sufPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_fim_mid(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_fim_mid(
      vocab,
    );
  }

  late final _llama_token_fim_midPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_fim_mid');
  late final _llama_token_fim_mid = _llama_token_fim_midPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_fim_pad(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_fim_pad(
      vocab,
    );
  }

  late final _llama_token_fim_padPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_fim_pad');
  late final _llama_token_fim_pad = _llama_token_fim_padPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_fim_rep(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_fim_rep(
      vocab,
    );
  }

  late final _llama_token_fim_repPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_fim_rep');
  late final _llama_token_fim_rep = _llama_token_fim_repPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_token_fim_sep(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_token_fim_sep(
      vocab,
    );
  }

  late final _llama_token_fim_sepPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_token_fim_sep');
  late final _llama_token_fim_sep = _llama_token_fim_sepPtr
      .asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  int llama_vocab_cls(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_vocab_cls(
      vocab,
    );
  }

  late final _llama_vocab_clsPtr = _lookup<
          ffi.NativeFunction<llama_token Function(ffi.Pointer<llama_vocab>)>>(
      'llama_vocab_cls');
  late final _llama_vocab_cls =
      _llama_vocab_clsPtr.asFunction<int Function(ffi.Pointer<llama_vocab>)>();

  /// @details Convert the provided text into tokens.
  /// @param tokens The tokens pointer must be large enough to hold the resulting tokens.
  /// @return Returns the number of tokens on success, no more than n_tokens_max
  /// @return Returns a negative number on failure - the number of tokens that would have been returned
  /// @return Returns INT32_MIN on overflow (e.g., tokenization result size exceeds int32_t limit)
  /// @param add_special Allow to add BOS and EOS tokens if model is configured to do so.
  /// @param parse_special Allow tokenizing special and/or control tokens which otherwise are not exposed and treated
  /// as plaintext. Does not insert a leading space.
  int llama_tokenize(
    ffi.Pointer<llama_vocab> vocab,
    ffi.Pointer<ffi.Char> text,
    int text_len,
    ffi.Pointer<llama_token> tokens,
    int n_tokens_max,
    bool add_special,
    bool parse_special,
  ) {
    return _llama_tokenize(
      vocab,
      text,
      text_len,
      tokens,
      n_tokens_max,
      add_special,
      parse_special,
    );
  }

  late final _llama_tokenizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_vocab>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<llama_token>,
              ffi.Int32,
              ffi.Bool,
              ffi.Bool)>>('llama_tokenize');
  late final _llama_tokenize = _llama_tokenizePtr.asFunction<
      int Function(ffi.Pointer<llama_vocab>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<llama_token>, int, bool, bool)>();

  int llama_token_to_piece(
    ffi.Pointer<llama_vocab> vocab,
    int token,
    ffi.Pointer<ffi.Char> buf,
    int length,
    int lstrip,
    bool special,
  ) {
    return _llama_token_to_piece(
      vocab,
      token,
      buf,
      length,
      lstrip,
      special,
    );
  }

  late final _llama_token_to_piecePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_vocab>,
              llama_token,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int32,
              ffi.Bool)>>('llama_token_to_piece');
  late final _llama_token_to_piece = _llama_token_to_piecePtr.asFunction<
      int Function(ffi.Pointer<llama_vocab>, int, ffi.Pointer<ffi.Char>, int,
          int, bool)>();

  /// @details Convert the provided tokens into text (inverse of llama_tokenize()).
  /// @param text The char pointer must be large enough to hold the resulting text.
  /// @return Returns the number of chars/bytes on success, no more than text_len_max.
  /// @return Returns a negative number on failure - the number of chars/bytes that would have been returned.
  /// @param remove_special Allow to remove BOS and EOS tokens if model is configured to do so.
  /// @param unparse_special If true, special tokens are rendered in the output.
  int llama_detokenize(
    ffi.Pointer<llama_vocab> vocab,
    ffi.Pointer<llama_token> tokens,
    int n_tokens,
    ffi.Pointer<ffi.Char> text,
    int text_len_max,
    bool remove_special,
    bool unparse_special,
  ) {
    return _llama_detokenize(
      vocab,
      tokens,
      n_tokens,
      text,
      text_len_max,
      remove_special,
      unparse_special,
    );
  }

  late final _llama_detokenizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_vocab>,
              ffi.Pointer<llama_token>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Bool,
              ffi.Bool)>>('llama_detokenize');
  late final _llama_detokenize = _llama_detokenizePtr.asFunction<
      int Function(ffi.Pointer<llama_vocab>, ffi.Pointer<llama_token>, int,
          ffi.Pointer<ffi.Char>, int, bool, bool)>();

  /// Apply chat template. Inspired by hf apply_chat_template() on python.
  /// Both "model" and "custom_template" are optional, but at least one is required. "custom_template" has higher precedence than "model"
  /// NOTE: This function does not use a jinja parser. It only support a pre-defined list of template. See more: https://github.com/ggml-org/llama.cpp/wiki/Templates-supported-by-llama_chat_apply_template
  /// @param tmpl A Jinja template to use for this chat. If this is nullptr, the model’s default chat template will be used instead.
  /// @param chat Pointer to a list of multiple llama_chat_message
  /// @param n_msg Number of llama_chat_message in this chat
  /// @param add_ass Whether to end the prompt with the token(s) that indicate the start of an assistant message.
  /// @param buf A buffer to hold the output formatted prompt. The recommended alloc size is 2 * (total number of characters of all messages)
  /// @param length The size of the allocated buffer
  /// @return The total number of bytes of the formatted prompt. If is it larger than the size of buffer, you may need to re-alloc it and then re-apply the template.
  int llama_chat_apply_template(
    ffi.Pointer<ffi.Char> tmpl,
    ffi.Pointer<llama_chat_message> chat,
    int n_msg,
    bool add_ass,
    ffi.Pointer<ffi.Char> buf,
    int length,
  ) {
    return _llama_chat_apply_template(
      tmpl,
      chat,
      n_msg,
      add_ass,
      buf,
      length,
    );
  }

  late final _llama_chat_apply_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<llama_chat_message>,
              ffi.Size,
              ffi.Bool,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('llama_chat_apply_template');
  late final _llama_chat_apply_template =
      _llama_chat_apply_templatePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<llama_chat_message>,
              int, bool, ffi.Pointer<ffi.Char>, int)>();

  int llama_chat_builtin_templates(
    ffi.Pointer<ffi.Pointer<ffi.Char>> output,
    int len,
  ) {
    return _llama_chat_builtin_templates(
      output,
      len,
    );
  }

  late final _llama_chat_builtin_templatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size)>>('llama_chat_builtin_templates');
  late final _llama_chat_builtin_templates = _llama_chat_builtin_templatesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<llama_sampler> llama_sampler_init(
    ffi.Pointer<llama_sampler_i> iface,
    llama_sampler_context_t ctx,
  ) {
    return _llama_sampler_init(
      iface,
      ctx,
    );
  }

  late final _llama_sampler_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(ffi.Pointer<llama_sampler_i>,
              llama_sampler_context_t)>>('llama_sampler_init');
  late final _llama_sampler_init = _llama_sampler_initPtr.asFunction<
      ffi.Pointer<llama_sampler> Function(
          ffi.Pointer<llama_sampler_i>, llama_sampler_context_t)>();

  ffi.Pointer<ffi.Char> llama_sampler_name(
    ffi.Pointer<llama_sampler> smpl,
  ) {
    return _llama_sampler_name(
      smpl,
    );
  }

  late final _llama_sampler_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<llama_sampler>)>>('llama_sampler_name');
  late final _llama_sampler_name = _llama_sampler_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<llama_sampler>)>();

  void llama_sampler_accept(
    ffi.Pointer<llama_sampler> smpl,
    int token,
  ) {
    return _llama_sampler_accept(
      smpl,
      token,
    );
  }

  late final _llama_sampler_acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_sampler>,
              llama_token)>>('llama_sampler_accept');
  late final _llama_sampler_accept = _llama_sampler_acceptPtr
      .asFunction<void Function(ffi.Pointer<llama_sampler>, int)>();

  void llama_sampler_apply(
    ffi.Pointer<llama_sampler> smpl,
    ffi.Pointer<llama_token_data_array> cur_p,
  ) {
    return _llama_sampler_apply(
      smpl,
      cur_p,
    );
  }

  late final _llama_sampler_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_sampler>,
              ffi.Pointer<llama_token_data_array>)>>('llama_sampler_apply');
  late final _llama_sampler_apply = _llama_sampler_applyPtr.asFunction<
      void Function(
          ffi.Pointer<llama_sampler>, ffi.Pointer<llama_token_data_array>)>();

  void llama_sampler_reset(
    ffi.Pointer<llama_sampler> smpl,
  ) {
    return _llama_sampler_reset(
      smpl,
    );
  }

  late final _llama_sampler_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_sampler>)>>(
      'llama_sampler_reset');
  late final _llama_sampler_reset = _llama_sampler_resetPtr
      .asFunction<void Function(ffi.Pointer<llama_sampler>)>();

  ffi.Pointer<llama_sampler> llama_sampler_clone(
    ffi.Pointer<llama_sampler> smpl,
  ) {
    return _llama_sampler_clone(
      smpl,
    );
  }

  late final _llama_sampler_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Pointer<llama_sampler>)>>('llama_sampler_clone');
  late final _llama_sampler_clone = _llama_sampler_clonePtr.asFunction<
      ffi.Pointer<llama_sampler> Function(ffi.Pointer<llama_sampler>)>();

  void llama_sampler_free(
    ffi.Pointer<llama_sampler> smpl,
  ) {
    return _llama_sampler_free(
      smpl,
    );
  }

  late final _llama_sampler_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_sampler>)>>(
      'llama_sampler_free');
  late final _llama_sampler_free = _llama_sampler_freePtr
      .asFunction<void Function(ffi.Pointer<llama_sampler>)>();

  ffi.Pointer<llama_sampler> llama_sampler_chain_init(
    llama_sampler_chain_params params,
  ) {
    return _llama_sampler_chain_init(
      params,
    );
  }

  late final _llama_sampler_chain_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              llama_sampler_chain_params)>>('llama_sampler_chain_init');
  late final _llama_sampler_chain_init =
      _llama_sampler_chain_initPtr.asFunction<
          ffi.Pointer<llama_sampler> Function(llama_sampler_chain_params)>();

  void llama_sampler_chain_add(
    ffi.Pointer<llama_sampler> chain,
    ffi.Pointer<llama_sampler> smpl,
  ) {
    return _llama_sampler_chain_add(
      chain,
      smpl,
    );
  }

  late final _llama_sampler_chain_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_sampler>,
              ffi.Pointer<llama_sampler>)>>('llama_sampler_chain_add');
  late final _llama_sampler_chain_add = _llama_sampler_chain_addPtr.asFunction<
      void Function(ffi.Pointer<llama_sampler>, ffi.Pointer<llama_sampler>)>();

  ffi.Pointer<llama_sampler> llama_sampler_chain_get(
    ffi.Pointer<llama_sampler> chain,
    int i,
  ) {
    return _llama_sampler_chain_get(
      chain,
      i,
    );
  }

  late final _llama_sampler_chain_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(ffi.Pointer<llama_sampler>,
              ffi.Int32)>>('llama_sampler_chain_get');
  late final _llama_sampler_chain_get = _llama_sampler_chain_getPtr.asFunction<
      ffi.Pointer<llama_sampler> Function(ffi.Pointer<llama_sampler>, int)>();

  int llama_sampler_chain_n(
    ffi.Pointer<llama_sampler> chain,
  ) {
    return _llama_sampler_chain_n(
      chain,
    );
  }

  late final _llama_sampler_chain_nPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<llama_sampler>)>>(
          'llama_sampler_chain_n');
  late final _llama_sampler_chain_n = _llama_sampler_chain_nPtr
      .asFunction<int Function(ffi.Pointer<llama_sampler>)>();

  ffi.Pointer<llama_sampler> llama_sampler_chain_remove(
    ffi.Pointer<llama_sampler> chain,
    int i,
  ) {
    return _llama_sampler_chain_remove(
      chain,
      i,
    );
  }

  late final _llama_sampler_chain_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(ffi.Pointer<llama_sampler>,
              ffi.Int32)>>('llama_sampler_chain_remove');
  late final _llama_sampler_chain_remove =
      _llama_sampler_chain_removePtr.asFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Pointer<llama_sampler>, int)>();

  ffi.Pointer<llama_sampler> llama_sampler_init_greedy() {
    return _llama_sampler_init_greedy();
  }

  late final _llama_sampler_init_greedyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<llama_sampler> Function()>>(
          'llama_sampler_init_greedy');
  late final _llama_sampler_init_greedy = _llama_sampler_init_greedyPtr
      .asFunction<ffi.Pointer<llama_sampler> Function()>();

  ffi.Pointer<llama_sampler> llama_sampler_init_dist(
    int seed,
  ) {
    return _llama_sampler_init_dist(
      seed,
    );
  }

  late final _llama_sampler_init_distPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<llama_sampler> Function(ffi.Uint32)>>(
      'llama_sampler_init_dist');
  late final _llama_sampler_init_dist = _llama_sampler_init_distPtr
      .asFunction<ffi.Pointer<llama_sampler> Function(int)>();

  /// @details Sorts candidate tokens by their logits in descending order and calculate probabilities based on logits.
  /// NOTE: Avoid using on the full vocabulary as the sorting can become slow. For example, apply top-k or top-p sampling first.
  ffi.Pointer<llama_sampler> llama_sampler_init_softmax() {
    return _llama_sampler_init_softmax();
  }

  late final _llama_sampler_init_softmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<llama_sampler> Function()>>(
          'llama_sampler_init_softmax');
  late final _llama_sampler_init_softmax = _llama_sampler_init_softmaxPtr
      .asFunction<ffi.Pointer<llama_sampler> Function()>();

  /// @details Top-K sampling described in academic paper "The Curious Case of Neural Text Degeneration" https://arxiv.org/abs/1904.09751
  /// Setting k <= 0 makes this a noop
  ffi.Pointer<llama_sampler> llama_sampler_init_top_k(
    int k,
  ) {
    return _llama_sampler_init_top_k(
      k,
    );
  }

  late final _llama_sampler_init_top_kPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<llama_sampler> Function(ffi.Int32)>>(
      'llama_sampler_init_top_k');
  late final _llama_sampler_init_top_k = _llama_sampler_init_top_kPtr
      .asFunction<ffi.Pointer<llama_sampler> Function(int)>();

  /// @details Nucleus sampling described in academic paper "The Curious Case of Neural Text Degeneration" https://arxiv.org/abs/1904.09751
  ffi.Pointer<llama_sampler> llama_sampler_init_top_p(
    double p,
    int min_keep,
  ) {
    return _llama_sampler_init_top_p(
      p,
      min_keep,
    );
  }

  late final _llama_sampler_init_top_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Float, ffi.Size)>>('llama_sampler_init_top_p');
  late final _llama_sampler_init_top_p = _llama_sampler_init_top_pPtr
      .asFunction<ffi.Pointer<llama_sampler> Function(double, int)>();

  /// @details Minimum P sampling as described in https://github.com/ggml-org/llama.cpp/pull/3841
  ffi.Pointer<llama_sampler> llama_sampler_init_min_p(
    double p,
    int min_keep,
  ) {
    return _llama_sampler_init_min_p(
      p,
      min_keep,
    );
  }

  late final _llama_sampler_init_min_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Float, ffi.Size)>>('llama_sampler_init_min_p');
  late final _llama_sampler_init_min_p = _llama_sampler_init_min_pPtr
      .asFunction<ffi.Pointer<llama_sampler> Function(double, int)>();

  /// @details Locally Typical Sampling implementation described in the paper https://arxiv.org/abs/2202.00666.
  ffi.Pointer<llama_sampler> llama_sampler_init_typical(
    double p,
    int min_keep,
  ) {
    return _llama_sampler_init_typical(
      p,
      min_keep,
    );
  }

  late final _llama_sampler_init_typicalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Float, ffi.Size)>>('llama_sampler_init_typical');
  late final _llama_sampler_init_typical = _llama_sampler_init_typicalPtr
      .asFunction<ffi.Pointer<llama_sampler> Function(double, int)>();

  /// #details Updates the logits l_i` = l_i/t. When t <= 0.0f, the maximum logit is kept at it's original value, the rest are set to -inf
  ffi.Pointer<llama_sampler> llama_sampler_init_temp(
    double t,
  ) {
    return _llama_sampler_init_temp(
      t,
    );
  }

  late final _llama_sampler_init_tempPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<llama_sampler> Function(ffi.Float)>>(
      'llama_sampler_init_temp');
  late final _llama_sampler_init_temp = _llama_sampler_init_tempPtr
      .asFunction<ffi.Pointer<llama_sampler> Function(double)>();

  /// @details Dynamic temperature implementation (a.k.a. entropy) described in the paper https://arxiv.org/abs/2309.02772.
  ffi.Pointer<llama_sampler> llama_sampler_init_temp_ext(
    double t,
    double delta,
    double exponent,
  ) {
    return _llama_sampler_init_temp_ext(
      t,
      delta,
      exponent,
    );
  }

  late final _llama_sampler_init_temp_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Float, ffi.Float, ffi.Float)>>('llama_sampler_init_temp_ext');
  late final _llama_sampler_init_temp_ext =
      _llama_sampler_init_temp_extPtr.asFunction<
          ffi.Pointer<llama_sampler> Function(double, double, double)>();

  /// @details XTC sampler as described in https://github.com/oobabooga/text-generation-webui/pull/6335
  ffi.Pointer<llama_sampler> llama_sampler_init_xtc(
    double p,
    double t,
    int min_keep,
    int seed,
  ) {
    return _llama_sampler_init_xtc(
      p,
      t,
      min_keep,
      seed,
    );
  }

  late final _llama_sampler_init_xtcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(ffi.Float, ffi.Float, ffi.Size,
              ffi.Uint32)>>('llama_sampler_init_xtc');
  late final _llama_sampler_init_xtc = _llama_sampler_init_xtcPtr.asFunction<
      ffi.Pointer<llama_sampler> Function(double, double, int, int)>();

  /// @details Top n sigma sampling as described in academic paper "Top-nσ: Not All Logits Are You Need" https://arxiv.org/pdf/2411.07641
  ffi.Pointer<llama_sampler> llama_sampler_init_top_n_sigma(
    double n,
  ) {
    return _llama_sampler_init_top_n_sigma(
      n,
    );
  }

  late final _llama_sampler_init_top_n_sigmaPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<llama_sampler> Function(ffi.Float)>>(
      'llama_sampler_init_top_n_sigma');
  late final _llama_sampler_init_top_n_sigma =
      _llama_sampler_init_top_n_sigmaPtr
          .asFunction<ffi.Pointer<llama_sampler> Function(double)>();

  /// @details Mirostat 1.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.
  /// @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.
  /// @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.
  /// @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.
  /// @param m The number of tokens considered in the estimation of `s_hat`. This is an arbitrary value that is used to calculate `s_hat`, which in turn helps to calculate the value of `k`. In the paper, they use `m = 100`, but you can experiment with different values to see how it affects the performance of the algorithm.
  /// @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal.
  ffi.Pointer<llama_sampler> llama_sampler_init_mirostat(
    int n_vocab,
    int seed,
    double tau,
    double eta,
    int m,
  ) {
    return _llama_sampler_init_mirostat(
      n_vocab,
      seed,
      tau,
      eta,
      m,
    );
  }

  late final _llama_sampler_init_mirostatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(ffi.Int32, ffi.Uint32, ffi.Float,
              ffi.Float, ffi.Int32)>>('llama_sampler_init_mirostat');
  late final _llama_sampler_init_mirostat =
      _llama_sampler_init_mirostatPtr.asFunction<
          ffi.Pointer<llama_sampler> Function(int, int, double, double, int)>();

  /// @details Mirostat 2.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.
  /// @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.
  /// @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.
  /// @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.
  /// @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal.
  ffi.Pointer<llama_sampler> llama_sampler_init_mirostat_v2(
    int seed,
    double tau,
    double eta,
  ) {
    return _llama_sampler_init_mirostat_v2(
      seed,
      tau,
      eta,
    );
  }

  late final _llama_sampler_init_mirostat_v2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(ffi.Uint32, ffi.Float,
              ffi.Float)>>('llama_sampler_init_mirostat_v2');
  late final _llama_sampler_init_mirostat_v2 =
      _llama_sampler_init_mirostat_v2Ptr.asFunction<
          ffi.Pointer<llama_sampler> Function(int, double, double)>();

  /// @details Intializes a GBNF grammar, see grammars/README.md for details.
  /// @param vocab The vocabulary that this grammar will be used with.
  /// @param grammar_str The production rules for the grammar, encoded as a string. Returns an empty grammar if empty. Returns NULL if parsing of grammar_str fails.
  /// @param grammar_root The name of the start symbol for the grammar.
  ffi.Pointer<llama_sampler> llama_sampler_init_grammar(
    ffi.Pointer<llama_vocab> vocab,
    ffi.Pointer<ffi.Char> grammar_str,
    ffi.Pointer<ffi.Char> grammar_root,
  ) {
    return _llama_sampler_init_grammar(
      vocab,
      grammar_str,
      grammar_root,
    );
  }

  late final _llama_sampler_init_grammarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Pointer<llama_vocab>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('llama_sampler_init_grammar');
  late final _llama_sampler_init_grammar =
      _llama_sampler_init_grammarPtr.asFunction<
          ffi.Pointer<llama_sampler> Function(ffi.Pointer<llama_vocab>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<llama_sampler> llama_sampler_init_grammar_lazy(
    ffi.Pointer<llama_vocab> vocab,
    ffi.Pointer<ffi.Char> grammar_str,
    ffi.Pointer<ffi.Char> grammar_root,
    ffi.Pointer<ffi.Pointer<ffi.Char>> trigger_words,
    int num_trigger_words,
    ffi.Pointer<llama_token> trigger_tokens,
    int num_trigger_tokens,
  ) {
    return _llama_sampler_init_grammar_lazy(
      vocab,
      grammar_str,
      grammar_root,
      trigger_words,
      num_trigger_words,
      trigger_tokens,
      num_trigger_tokens,
    );
  }

  late final _llama_sampler_init_grammar_lazyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Pointer<llama_vocab>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size,
              ffi.Pointer<llama_token>,
              ffi.Size)>>('llama_sampler_init_grammar_lazy');
  late final _llama_sampler_init_grammar_lazy =
      _llama_sampler_init_grammar_lazyPtr.asFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Pointer<llama_vocab>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int,
              ffi.Pointer<llama_token>,
              int)>();

  /// @details Lazy grammar sampler, introduced in https://github.com/ggml-org/llama.cpp/pull/9639
  /// @param trigger_patterns A list of patterns that will trigger the grammar sampler. Pattern will be matched from the start of the generation output, and grammar sampler will be fed content starting from its first match group.
  /// @param trigger_tokens A list of tokens that will trigger the grammar sampler. Grammar sampler will be fed content starting from the trigger token included.
  ffi.Pointer<llama_sampler> llama_sampler_init_grammar_lazy_patterns(
    ffi.Pointer<llama_vocab> vocab,
    ffi.Pointer<ffi.Char> grammar_str,
    ffi.Pointer<ffi.Char> grammar_root,
    ffi.Pointer<ffi.Pointer<ffi.Char>> trigger_patterns,
    int num_trigger_patterns,
    ffi.Pointer<llama_token> trigger_tokens,
    int num_trigger_tokens,
  ) {
    return _llama_sampler_init_grammar_lazy_patterns(
      vocab,
      grammar_str,
      grammar_root,
      trigger_patterns,
      num_trigger_patterns,
      trigger_tokens,
      num_trigger_tokens,
    );
  }

  late final _llama_sampler_init_grammar_lazy_patternsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Pointer<llama_vocab>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size,
              ffi.Pointer<llama_token>,
              ffi.Size)>>('llama_sampler_init_grammar_lazy_patterns');
  late final _llama_sampler_init_grammar_lazy_patterns =
      _llama_sampler_init_grammar_lazy_patternsPtr.asFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Pointer<llama_vocab>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int,
              ffi.Pointer<llama_token>,
              int)>();

  /// NOTE: Avoid using on the full vocabulary as searching for repeated tokens can become slow. For example, apply top-k or top-p sampling first.
  ffi.Pointer<llama_sampler> llama_sampler_init_penalties(
    int penalty_last_n,
    double penalty_repeat,
    double penalty_freq,
    double penalty_present,
  ) {
    return _llama_sampler_init_penalties(
      penalty_last_n,
      penalty_repeat,
      penalty_freq,
      penalty_present,
    );
  }

  late final _llama_sampler_init_penaltiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(ffi.Int32, ffi.Float, ffi.Float,
              ffi.Float)>>('llama_sampler_init_penalties');
  late final _llama_sampler_init_penalties =
      _llama_sampler_init_penaltiesPtr.asFunction<
          ffi.Pointer<llama_sampler> Function(int, double, double, double)>();

  /// @details DRY sampler, designed by p-e-w, as described in: https://github.com/oobabooga/text-generation-webui/pull/5677, porting Koboldcpp implementation authored by pi6am: https://github.com/LostRuins/koboldcpp/pull/982
  ffi.Pointer<llama_sampler> llama_sampler_init_dry(
    ffi.Pointer<llama_vocab> vocab,
    int n_ctx_train,
    double dry_multiplier,
    double dry_base,
    int dry_allowed_length,
    int dry_penalty_last_n,
    ffi.Pointer<ffi.Pointer<ffi.Char>> seq_breakers,
    int num_breakers,
  ) {
    return _llama_sampler_init_dry(
      vocab,
      n_ctx_train,
      dry_multiplier,
      dry_base,
      dry_allowed_length,
      dry_penalty_last_n,
      seq_breakers,
      num_breakers,
    );
  }

  late final _llama_sampler_init_dryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Pointer<llama_vocab>,
              ffi.Int32,
              ffi.Float,
              ffi.Float,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size)>>('llama_sampler_init_dry');
  late final _llama_sampler_init_dry = _llama_sampler_init_dryPtr.asFunction<
      ffi.Pointer<llama_sampler> Function(ffi.Pointer<llama_vocab>, int, double,
          double, int, int, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<llama_sampler> llama_sampler_init_logit_bias(
    int n_vocab,
    int n_logit_bias,
    ffi.Pointer<llama_logit_bias> logit_bias,
  ) {
    return _llama_sampler_init_logit_bias(
      n_vocab,
      n_logit_bias,
      logit_bias,
    );
  }

  late final _llama_sampler_init_logit_biasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(ffi.Int32, ffi.Int32,
              ffi.Pointer<llama_logit_bias>)>>('llama_sampler_init_logit_bias');
  late final _llama_sampler_init_logit_bias =
      _llama_sampler_init_logit_biasPtr.asFunction<
          ffi.Pointer<llama_sampler> Function(
              int, int, ffi.Pointer<llama_logit_bias>)>();

  ffi.Pointer<llama_sampler> llama_sampler_init_infill(
    ffi.Pointer<llama_vocab> vocab,
  ) {
    return _llama_sampler_init_infill(
      vocab,
    );
  }

  late final _llama_sampler_init_infillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Pointer<llama_vocab>)>>('llama_sampler_init_infill');
  late final _llama_sampler_init_infill =
      _llama_sampler_init_infillPtr.asFunction<
          ffi.Pointer<llama_sampler> Function(ffi.Pointer<llama_vocab>)>();

  int llama_sampler_get_seed(
    ffi.Pointer<llama_sampler> smpl,
  ) {
    return _llama_sampler_get_seed(
      smpl,
    );
  }

  late final _llama_sampler_get_seedPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<llama_sampler>)>>(
      'llama_sampler_get_seed');
  late final _llama_sampler_get_seed = _llama_sampler_get_seedPtr
      .asFunction<int Function(ffi.Pointer<llama_sampler>)>();

  int llama_sampler_sample(
    ffi.Pointer<llama_sampler> smpl,
    ffi.Pointer<llama_context> ctx,
    int idx,
  ) {
    return _llama_sampler_sample(
      smpl,
      ctx,
      idx,
    );
  }

  late final _llama_sampler_samplePtr = _lookup<
      ffi.NativeFunction<
          llama_token Function(ffi.Pointer<llama_sampler>,
              ffi.Pointer<llama_context>, ffi.Int32)>>('llama_sampler_sample');
  late final _llama_sampler_sample = _llama_sampler_samplePtr.asFunction<
      int Function(
          ffi.Pointer<llama_sampler>, ffi.Pointer<llama_context>, int)>();

  /// @details Build a split GGUF final path for this chunk.
  /// llama_split_path(split_path, sizeof(split_path), "/models/ggml-model-q4_0", 2, 4) => split_path = "/models/ggml-model-q4_0-00002-of-00004.gguf"
  int llama_split_path(
    ffi.Pointer<ffi.Char> split_path,
    int maxlen,
    ffi.Pointer<ffi.Char> path_prefix,
    int split_no,
    int split_count,
  ) {
    return _llama_split_path(
      split_path,
      maxlen,
      path_prefix,
      split_no,
      split_count,
    );
  }

  late final _llama_split_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('llama_split_path');
  late final _llama_split_path = _llama_split_pathPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int, int)>();

  /// @details Extract the path prefix from the split_path if and only if the split_no and split_count match.
  /// llama_split_prefix(split_prefix, 64, "/models/ggml-model-q4_0-00002-of-00004.gguf", 2, 4) => split_prefix = "/models/ggml-model-q4_0"
  int llama_split_prefix(
    ffi.Pointer<ffi.Char> split_prefix,
    int maxlen,
    ffi.Pointer<ffi.Char> split_path,
    int split_no,
    int split_count,
  ) {
    return _llama_split_prefix(
      split_prefix,
      maxlen,
      split_path,
      split_no,
      split_count,
    );
  }

  late final _llama_split_prefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('llama_split_prefix');
  late final _llama_split_prefix = _llama_split_prefixPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> llama_print_system_info() {
    return _llama_print_system_info();
  }

  late final _llama_print_system_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'llama_print_system_info');
  late final _llama_print_system_info = _llama_print_system_infoPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  void llama_log_set(
    ggml_log_callback log_callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _llama_log_set(
      log_callback,
      user_data,
    );
  }

  late final _llama_log_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ggml_log_callback, ffi.Pointer<ffi.Void>)>>('llama_log_set');
  late final _llama_log_set = _llama_log_setPtr
      .asFunction<void Function(ggml_log_callback, ffi.Pointer<ffi.Void>)>();

  llama_perf_context_data llama_perf_context(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_perf_context(
      ctx,
    );
  }

  late final _llama_perf_contextPtr = _lookup<
      ffi.NativeFunction<
          llama_perf_context_data Function(
              ffi.Pointer<llama_context>)>>('llama_perf_context');
  late final _llama_perf_context = _llama_perf_contextPtr.asFunction<
      llama_perf_context_data Function(ffi.Pointer<llama_context>)>();

  void llama_perf_context_print(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_perf_context_print(
      ctx,
    );
  }

  late final _llama_perf_context_printPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_perf_context_print');
  late final _llama_perf_context_print = _llama_perf_context_printPtr
      .asFunction<void Function(ffi.Pointer<llama_context>)>();

  void llama_perf_context_reset(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_perf_context_reset(
      ctx,
    );
  }

  late final _llama_perf_context_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_perf_context_reset');
  late final _llama_perf_context_reset = _llama_perf_context_resetPtr
      .asFunction<void Function(ffi.Pointer<llama_context>)>();

  llama_perf_sampler_data llama_perf_sampler(
    ffi.Pointer<llama_sampler> chain,
  ) {
    return _llama_perf_sampler(
      chain,
    );
  }

  late final _llama_perf_samplerPtr = _lookup<
      ffi.NativeFunction<
          llama_perf_sampler_data Function(
              ffi.Pointer<llama_sampler>)>>('llama_perf_sampler');
  late final _llama_perf_sampler = _llama_perf_samplerPtr.asFunction<
      llama_perf_sampler_data Function(ffi.Pointer<llama_sampler>)>();

  void llama_perf_sampler_print(
    ffi.Pointer<llama_sampler> chain,
  ) {
    return _llama_perf_sampler_print(
      chain,
    );
  }

  late final _llama_perf_sampler_printPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_sampler>)>>(
      'llama_perf_sampler_print');
  late final _llama_perf_sampler_print = _llama_perf_sampler_printPtr
      .asFunction<void Function(ffi.Pointer<llama_sampler>)>();

  void llama_perf_sampler_reset(
    ffi.Pointer<llama_sampler> chain,
  ) {
    return _llama_perf_sampler_reset(
      chain,
    );
  }

  late final _llama_perf_sampler_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_sampler>)>>(
      'llama_perf_sampler_reset');
  late final _llama_perf_sampler_reset = _llama_perf_sampler_resetPtr
      .asFunction<void Function(ffi.Pointer<llama_sampler>)>();

  bool llama_opt_param_filter_all(
    ffi.Pointer<ggml_tensor> tensor,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _llama_opt_param_filter_all(
      tensor,
      userdata,
    );
  }

  late final _llama_opt_param_filter_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ggml_tensor>,
              ffi.Pointer<ffi.Void>)>>('llama_opt_param_filter_all');
  late final _llama_opt_param_filter_all =
      _llama_opt_param_filter_allPtr.asFunction<
          bool Function(ffi.Pointer<ggml_tensor>, ffi.Pointer<ffi.Void>)>();

  void llama_opt_init(
    ffi.Pointer<llama_context> lctx,
    ffi.Pointer<llama_model> model,
    llama_opt_params lopt_params,
  ) {
    return _llama_opt_init(
      lctx,
      model,
      lopt_params,
    );
  }

  late final _llama_opt_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_context>,
              ffi.Pointer<llama_model>, llama_opt_params)>>('llama_opt_init');
  late final _llama_opt_init = _llama_opt_initPtr.asFunction<
      void Function(ffi.Pointer<llama_context>, ffi.Pointer<llama_model>,
          llama_opt_params)>();

  void llama_opt_epoch(
    ffi.Pointer<llama_context> lctx,
    ggml_opt_dataset_t dataset,
    ggml_opt_result_t result_train,
    ggml_opt_result_t result_eval,
    int idata_split,
    ggml_opt_epoch_callback callback_train,
    ggml_opt_epoch_callback callback_eval,
  ) {
    return _llama_opt_epoch(
      lctx,
      dataset,
      result_train,
      result_eval,
      idata_split,
      callback_train,
      callback_eval,
    );
  }

  late final _llama_opt_epochPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_context>,
              ggml_opt_dataset_t,
              ggml_opt_result_t,
              ggml_opt_result_t,
              ffi.Int64,
              ggml_opt_epoch_callback,
              ggml_opt_epoch_callback)>>('llama_opt_epoch');
  late final _llama_opt_epoch = _llama_opt_epochPtr.asFunction<
      void Function(
          ffi.Pointer<llama_context>,
          ggml_opt_dataset_t,
          ggml_opt_result_t,
          ggml_opt_result_t,
          int,
          ggml_opt_epoch_callback,
          ggml_opt_epoch_callback)>();

  ffi.Pointer<ffi.Char> mtmd_default_marker() {
    return _mtmd_default_marker();
  }

  late final _mtmd_default_markerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'mtmd_default_marker');
  late final _mtmd_default_marker =
      _mtmd_default_markerPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  mtmd_context_params mtmd_context_params_default() {
    return _mtmd_context_params_default();
  }

  late final _mtmd_context_params_defaultPtr =
      _lookup<ffi.NativeFunction<mtmd_context_params Function()>>(
          'mtmd_context_params_default');
  late final _mtmd_context_params_default = _mtmd_context_params_defaultPtr
      .asFunction<mtmd_context_params Function()>();

  ffi.Pointer<mtmd_context> mtmd_init_from_file(
    ffi.Pointer<ffi.Char> mmproj_fname,
    ffi.Pointer<llama_model> text_model,
    mtmd_context_params ctx_params,
  ) {
    return _mtmd_init_from_file(
      mmproj_fname,
      text_model,
      ctx_params,
    );
  }

  late final _mtmd_init_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<mtmd_context> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<llama_model>,
              mtmd_context_params)>>('mtmd_init_from_file');
  late final _mtmd_init_from_file = _mtmd_init_from_filePtr.asFunction<
      ffi.Pointer<mtmd_context> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<llama_model>, mtmd_context_params)>();

  void mtmd_free(
    ffi.Pointer<mtmd_context> ctx,
  ) {
    return _mtmd_free(
      ctx,
    );
  }

  late final _mtmd_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mtmd_context>)>>(
          'mtmd_free');
  late final _mtmd_free =
      _mtmd_freePtr.asFunction<void Function(ffi.Pointer<mtmd_context>)>();

  bool mtmd_decode_use_non_causal(
    ffi.Pointer<mtmd_context> ctx,
  ) {
    return _mtmd_decode_use_non_causal(
      ctx,
    );
  }

  late final _mtmd_decode_use_non_causalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<mtmd_context>)>>(
          'mtmd_decode_use_non_causal');
  late final _mtmd_decode_use_non_causal = _mtmd_decode_use_non_causalPtr
      .asFunction<bool Function(ffi.Pointer<mtmd_context>)>();

  bool mtmd_decode_use_mrope(
    ffi.Pointer<mtmd_context> ctx,
  ) {
    return _mtmd_decode_use_mrope(
      ctx,
    );
  }

  late final _mtmd_decode_use_mropePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<mtmd_context>)>>(
          'mtmd_decode_use_mrope');
  late final _mtmd_decode_use_mrope = _mtmd_decode_use_mropePtr
      .asFunction<bool Function(ffi.Pointer<mtmd_context>)>();

  bool mtmd_support_vision(
    ffi.Pointer<mtmd_context> ctx,
  ) {
    return _mtmd_support_vision(
      ctx,
    );
  }

  late final _mtmd_support_visionPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<mtmd_context>)>>(
          'mtmd_support_vision');
  late final _mtmd_support_vision = _mtmd_support_visionPtr
      .asFunction<bool Function(ffi.Pointer<mtmd_context>)>();

  bool mtmd_support_audio(
    ffi.Pointer<mtmd_context> ctx,
  ) {
    return _mtmd_support_audio(
      ctx,
    );
  }

  late final _mtmd_support_audioPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<mtmd_context>)>>(
          'mtmd_support_audio');
  late final _mtmd_support_audio = _mtmd_support_audioPtr
      .asFunction<bool Function(ffi.Pointer<mtmd_context>)>();

  int mtmd_get_audio_bitrate(
    ffi.Pointer<mtmd_context> ctx,
  ) {
    return _mtmd_get_audio_bitrate(
      ctx,
    );
  }

  late final _mtmd_get_audio_bitratePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mtmd_context>)>>(
          'mtmd_get_audio_bitrate');
  late final _mtmd_get_audio_bitrate = _mtmd_get_audio_bitratePtr
      .asFunction<int Function(ffi.Pointer<mtmd_context>)>();

  ffi.Pointer<mtmd_bitmap> mtmd_bitmap_init(
    int nx,
    int ny,
    ffi.Pointer<ffi.UnsignedChar> data,
  ) {
    return _mtmd_bitmap_init(
      nx,
      ny,
      data,
    );
  }

  late final _mtmd_bitmap_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<mtmd_bitmap> Function(ffi.Uint32, ffi.Uint32,
              ffi.Pointer<ffi.UnsignedChar>)>>('mtmd_bitmap_init');
  late final _mtmd_bitmap_init = _mtmd_bitmap_initPtr.asFunction<
      ffi.Pointer<mtmd_bitmap> Function(
          int, int, ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<mtmd_bitmap> mtmd_bitmap_init_from_audio(
    int n_samples,
    ffi.Pointer<ffi.Float> data,
  ) {
    return _mtmd_bitmap_init_from_audio(
      n_samples,
      data,
    );
  }

  late final _mtmd_bitmap_init_from_audioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<mtmd_bitmap> Function(ffi.Size,
              ffi.Pointer<ffi.Float>)>>('mtmd_bitmap_init_from_audio');
  late final _mtmd_bitmap_init_from_audio =
      _mtmd_bitmap_init_from_audioPtr.asFunction<
          ffi.Pointer<mtmd_bitmap> Function(int, ffi.Pointer<ffi.Float>)>();

  int mtmd_bitmap_get_nx(
    ffi.Pointer<mtmd_bitmap> bitmap,
  ) {
    return _mtmd_bitmap_get_nx(
      bitmap,
    );
  }

  late final _mtmd_bitmap_get_nxPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<mtmd_bitmap>)>>(
      'mtmd_bitmap_get_nx');
  late final _mtmd_bitmap_get_nx = _mtmd_bitmap_get_nxPtr
      .asFunction<int Function(ffi.Pointer<mtmd_bitmap>)>();

  int mtmd_bitmap_get_ny(
    ffi.Pointer<mtmd_bitmap> bitmap,
  ) {
    return _mtmd_bitmap_get_ny(
      bitmap,
    );
  }

  late final _mtmd_bitmap_get_nyPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<mtmd_bitmap>)>>(
      'mtmd_bitmap_get_ny');
  late final _mtmd_bitmap_get_ny = _mtmd_bitmap_get_nyPtr
      .asFunction<int Function(ffi.Pointer<mtmd_bitmap>)>();

  ffi.Pointer<ffi.UnsignedChar> mtmd_bitmap_get_data(
    ffi.Pointer<mtmd_bitmap> bitmap,
  ) {
    return _mtmd_bitmap_get_data(
      bitmap,
    );
  }

  late final _mtmd_bitmap_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<mtmd_bitmap>)>>('mtmd_bitmap_get_data');
  late final _mtmd_bitmap_get_data = _mtmd_bitmap_get_dataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<mtmd_bitmap>)>();

  int mtmd_bitmap_get_n_bytes(
    ffi.Pointer<mtmd_bitmap> bitmap,
  ) {
    return _mtmd_bitmap_get_n_bytes(
      bitmap,
    );
  }

  late final _mtmd_bitmap_get_n_bytesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<mtmd_bitmap>)>>(
          'mtmd_bitmap_get_n_bytes');
  late final _mtmd_bitmap_get_n_bytes = _mtmd_bitmap_get_n_bytesPtr
      .asFunction<int Function(ffi.Pointer<mtmd_bitmap>)>();

  bool mtmd_bitmap_is_audio(
    ffi.Pointer<mtmd_bitmap> bitmap,
  ) {
    return _mtmd_bitmap_is_audio(
      bitmap,
    );
  }

  late final _mtmd_bitmap_is_audioPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<mtmd_bitmap>)>>(
          'mtmd_bitmap_is_audio');
  late final _mtmd_bitmap_is_audio = _mtmd_bitmap_is_audioPtr
      .asFunction<bool Function(ffi.Pointer<mtmd_bitmap>)>();

  void mtmd_bitmap_free(
    ffi.Pointer<mtmd_bitmap> bitmap,
  ) {
    return _mtmd_bitmap_free(
      bitmap,
    );
  }

  late final _mtmd_bitmap_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mtmd_bitmap>)>>(
          'mtmd_bitmap_free');
  late final _mtmd_bitmap_free = _mtmd_bitmap_freePtr
      .asFunction<void Function(ffi.Pointer<mtmd_bitmap>)>();

  ffi.Pointer<ffi.Char> mtmd_bitmap_get_id(
    ffi.Pointer<mtmd_bitmap> bitmap,
  ) {
    return _mtmd_bitmap_get_id(
      bitmap,
    );
  }

  late final _mtmd_bitmap_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<mtmd_bitmap>)>>('mtmd_bitmap_get_id');
  late final _mtmd_bitmap_get_id = _mtmd_bitmap_get_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<mtmd_bitmap>)>();

  void mtmd_bitmap_set_id(
    ffi.Pointer<mtmd_bitmap> bitmap,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _mtmd_bitmap_set_id(
      bitmap,
      id,
    );
  }

  late final _mtmd_bitmap_set_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<mtmd_bitmap>,
              ffi.Pointer<ffi.Char>)>>('mtmd_bitmap_set_id');
  late final _mtmd_bitmap_set_id = _mtmd_bitmap_set_idPtr.asFunction<
      void Function(ffi.Pointer<mtmd_bitmap>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<mtmd_input_chunks> mtmd_input_chunks_init() {
    return _mtmd_input_chunks_init();
  }

  late final _mtmd_input_chunks_initPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<mtmd_input_chunks> Function()>>(
          'mtmd_input_chunks_init');
  late final _mtmd_input_chunks_init = _mtmd_input_chunks_initPtr
      .asFunction<ffi.Pointer<mtmd_input_chunks> Function()>();

  int mtmd_input_chunks_size(
    ffi.Pointer<mtmd_input_chunks> chunks,
  ) {
    return _mtmd_input_chunks_size(
      chunks,
    );
  }

  late final _mtmd_input_chunks_sizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<mtmd_input_chunks>)>>(
      'mtmd_input_chunks_size');
  late final _mtmd_input_chunks_size = _mtmd_input_chunks_sizePtr
      .asFunction<int Function(ffi.Pointer<mtmd_input_chunks>)>();

  ffi.Pointer<mtmd_input_chunk> mtmd_input_chunks_get(
    ffi.Pointer<mtmd_input_chunks> chunks,
    int idx,
  ) {
    return _mtmd_input_chunks_get(
      chunks,
      idx,
    );
  }

  late final _mtmd_input_chunks_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<mtmd_input_chunk> Function(ffi.Pointer<mtmd_input_chunks>,
              ffi.Size)>>('mtmd_input_chunks_get');
  late final _mtmd_input_chunks_get = _mtmd_input_chunks_getPtr.asFunction<
      ffi.Pointer<mtmd_input_chunk> Function(
          ffi.Pointer<mtmd_input_chunks>, int)>();

  void mtmd_input_chunks_free(
    ffi.Pointer<mtmd_input_chunks> chunks,
  ) {
    return _mtmd_input_chunks_free(
      chunks,
    );
  }

  late final _mtmd_input_chunks_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<mtmd_input_chunks>)>>(
      'mtmd_input_chunks_free');
  late final _mtmd_input_chunks_free = _mtmd_input_chunks_freePtr
      .asFunction<void Function(ffi.Pointer<mtmd_input_chunks>)>();

  mtmd_input_chunk_type mtmd_input_chunk_get_type(
    ffi.Pointer<mtmd_input_chunk> chunk,
  ) {
    return mtmd_input_chunk_type.fromValue(_mtmd_input_chunk_get_type(
      chunk,
    ));
  }

  late final _mtmd_input_chunk_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<mtmd_input_chunk>)>>('mtmd_input_chunk_get_type');
  late final _mtmd_input_chunk_get_type = _mtmd_input_chunk_get_typePtr
      .asFunction<int Function(ffi.Pointer<mtmd_input_chunk>)>();

  ffi.Pointer<llama_token> mtmd_input_chunk_get_tokens_text(
    ffi.Pointer<mtmd_input_chunk> chunk,
    ffi.Pointer<ffi.Size> n_tokens_output,
  ) {
    return _mtmd_input_chunk_get_tokens_text(
      chunk,
      n_tokens_output,
    );
  }

  late final _mtmd_input_chunk_get_tokens_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_token> Function(ffi.Pointer<mtmd_input_chunk>,
              ffi.Pointer<ffi.Size>)>>('mtmd_input_chunk_get_tokens_text');
  late final _mtmd_input_chunk_get_tokens_text =
      _mtmd_input_chunk_get_tokens_textPtr.asFunction<
          ffi.Pointer<llama_token> Function(
              ffi.Pointer<mtmd_input_chunk>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<mtmd_image_tokens> mtmd_input_chunk_get_tokens_image(
    ffi.Pointer<mtmd_input_chunk> chunk,
  ) {
    return _mtmd_input_chunk_get_tokens_image(
      chunk,
    );
  }

  late final _mtmd_input_chunk_get_tokens_imagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<mtmd_image_tokens> Function(
                  ffi.Pointer<mtmd_input_chunk>)>>(
      'mtmd_input_chunk_get_tokens_image');
  late final _mtmd_input_chunk_get_tokens_image =
      _mtmd_input_chunk_get_tokens_imagePtr.asFunction<
          ffi.Pointer<mtmd_image_tokens> Function(
              ffi.Pointer<mtmd_input_chunk>)>();

  int mtmd_input_chunk_get_n_tokens(
    ffi.Pointer<mtmd_input_chunk> chunk,
  ) {
    return _mtmd_input_chunk_get_n_tokens(
      chunk,
    );
  }

  late final _mtmd_input_chunk_get_n_tokensPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<mtmd_input_chunk>)>>(
      'mtmd_input_chunk_get_n_tokens');
  late final _mtmd_input_chunk_get_n_tokens = _mtmd_input_chunk_get_n_tokensPtr
      .asFunction<int Function(ffi.Pointer<mtmd_input_chunk>)>();

  ffi.Pointer<ffi.Char> mtmd_input_chunk_get_id(
    ffi.Pointer<mtmd_input_chunk> chunk,
  ) {
    return _mtmd_input_chunk_get_id(
      chunk,
    );
  }

  late final _mtmd_input_chunk_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<mtmd_input_chunk>)>>('mtmd_input_chunk_get_id');
  late final _mtmd_input_chunk_get_id = _mtmd_input_chunk_get_idPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<mtmd_input_chunk>)>();

  int mtmd_input_chunk_get_n_pos(
    ffi.Pointer<mtmd_input_chunk> chunk,
  ) {
    return _mtmd_input_chunk_get_n_pos(
      chunk,
    );
  }

  late final _mtmd_input_chunk_get_n_posPtr = _lookup<
          ffi
          .NativeFunction<llama_pos Function(ffi.Pointer<mtmd_input_chunk>)>>(
      'mtmd_input_chunk_get_n_pos');
  late final _mtmd_input_chunk_get_n_pos = _mtmd_input_chunk_get_n_posPtr
      .asFunction<int Function(ffi.Pointer<mtmd_input_chunk>)>();

  ffi.Pointer<mtmd_input_chunk> mtmd_input_chunk_copy(
    ffi.Pointer<mtmd_input_chunk> chunk,
  ) {
    return _mtmd_input_chunk_copy(
      chunk,
    );
  }

  late final _mtmd_input_chunk_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<mtmd_input_chunk> Function(
              ffi.Pointer<mtmd_input_chunk>)>>('mtmd_input_chunk_copy');
  late final _mtmd_input_chunk_copy = _mtmd_input_chunk_copyPtr.asFunction<
      ffi.Pointer<mtmd_input_chunk> Function(ffi.Pointer<mtmd_input_chunk>)>();

  void mtmd_input_chunk_free(
    ffi.Pointer<mtmd_input_chunk> chunk,
  ) {
    return _mtmd_input_chunk_free(
      chunk,
    );
  }

  late final _mtmd_input_chunk_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mtmd_input_chunk>)>>(
      'mtmd_input_chunk_free');
  late final _mtmd_input_chunk_free = _mtmd_input_chunk_freePtr
      .asFunction<void Function(ffi.Pointer<mtmd_input_chunk>)>();

  int mtmd_image_tokens_get_n_tokens(
    ffi.Pointer<mtmd_image_tokens> image_tokens,
  ) {
    return _mtmd_image_tokens_get_n_tokens(
      image_tokens,
    );
  }

  late final _mtmd_image_tokens_get_n_tokensPtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<mtmd_image_tokens>)>>(
      'mtmd_image_tokens_get_n_tokens');
  late final _mtmd_image_tokens_get_n_tokens =
      _mtmd_image_tokens_get_n_tokensPtr
          .asFunction<int Function(ffi.Pointer<mtmd_image_tokens>)>();

  int mtmd_image_tokens_get_nx(
    ffi.Pointer<mtmd_image_tokens> image_tokens,
  ) {
    return _mtmd_image_tokens_get_nx(
      image_tokens,
    );
  }

  late final _mtmd_image_tokens_get_nxPtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<mtmd_image_tokens>)>>(
      'mtmd_image_tokens_get_nx');
  late final _mtmd_image_tokens_get_nx = _mtmd_image_tokens_get_nxPtr
      .asFunction<int Function(ffi.Pointer<mtmd_image_tokens>)>();

  int mtmd_image_tokens_get_ny(
    ffi.Pointer<mtmd_image_tokens> image_tokens,
  ) {
    return _mtmd_image_tokens_get_ny(
      image_tokens,
    );
  }

  late final _mtmd_image_tokens_get_nyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<mtmd_image_tokens>)>>(
      'mtmd_image_tokens_get_ny');
  late final _mtmd_image_tokens_get_ny = _mtmd_image_tokens_get_nyPtr
      .asFunction<int Function(ffi.Pointer<mtmd_image_tokens>)>();

  ffi.Pointer<ffi.Char> mtmd_image_tokens_get_id(
    ffi.Pointer<mtmd_image_tokens> image_tokens,
  ) {
    return _mtmd_image_tokens_get_id(
      image_tokens,
    );
  }

  late final _mtmd_image_tokens_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<mtmd_image_tokens>)>>('mtmd_image_tokens_get_id');
  late final _mtmd_image_tokens_get_id =
      _mtmd_image_tokens_get_idPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<mtmd_image_tokens>)>();

  int mtmd_image_tokens_get_n_pos(
    ffi.Pointer<mtmd_image_tokens> image_tokens,
  ) {
    return _mtmd_image_tokens_get_n_pos(
      image_tokens,
    );
  }

  late final _mtmd_image_tokens_get_n_posPtr = _lookup<
          ffi
          .NativeFunction<llama_pos Function(ffi.Pointer<mtmd_image_tokens>)>>(
      'mtmd_image_tokens_get_n_pos');
  late final _mtmd_image_tokens_get_n_pos = _mtmd_image_tokens_get_n_posPtr
      .asFunction<int Function(ffi.Pointer<mtmd_image_tokens>)>();

  int mtmd_tokenize(
    ffi.Pointer<mtmd_context> ctx,
    ffi.Pointer<mtmd_input_chunks> output,
    ffi.Pointer<mtmd_input_text> text,
    ffi.Pointer<ffi.Pointer<mtmd_bitmap>> bitmaps,
    int n_bitmaps,
  ) {
    return _mtmd_tokenize(
      ctx,
      output,
      text,
      bitmaps,
      n_bitmaps,
    );
  }

  late final _mtmd_tokenizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<mtmd_context>,
              ffi.Pointer<mtmd_input_chunks>,
              ffi.Pointer<mtmd_input_text>,
              ffi.Pointer<ffi.Pointer<mtmd_bitmap>>,
              ffi.Size)>>('mtmd_tokenize');
  late final _mtmd_tokenize = _mtmd_tokenizePtr.asFunction<
      int Function(
          ffi.Pointer<mtmd_context>,
          ffi.Pointer<mtmd_input_chunks>,
          ffi.Pointer<mtmd_input_text>,
          ffi.Pointer<ffi.Pointer<mtmd_bitmap>>,
          int)>();

  int mtmd_encode(
    ffi.Pointer<mtmd_context> ctx,
    ffi.Pointer<mtmd_image_tokens> image_tokens,
  ) {
    return _mtmd_encode(
      ctx,
      image_tokens,
    );
  }

  late final _mtmd_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<mtmd_context>,
              ffi.Pointer<mtmd_image_tokens>)>>('mtmd_encode');
  late final _mtmd_encode = _mtmd_encodePtr.asFunction<
      int Function(
          ffi.Pointer<mtmd_context>, ffi.Pointer<mtmd_image_tokens>)>();

  int mtmd_encode_chunk(
    ffi.Pointer<mtmd_context> ctx,
    ffi.Pointer<mtmd_input_chunk> chunk,
  ) {
    return _mtmd_encode_chunk(
      ctx,
      chunk,
    );
  }

  late final _mtmd_encode_chunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<mtmd_context>,
              ffi.Pointer<mtmd_input_chunk>)>>('mtmd_encode_chunk');
  late final _mtmd_encode_chunk = _mtmd_encode_chunkPtr.asFunction<
      int Function(ffi.Pointer<mtmd_context>, ffi.Pointer<mtmd_input_chunk>)>();

  ffi.Pointer<ffi.Float> mtmd_get_output_embd(
    ffi.Pointer<mtmd_context> ctx,
  ) {
    return _mtmd_get_output_embd(
      ctx,
    );
  }

  late final _mtmd_get_output_embdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<mtmd_context>)>>('mtmd_get_output_embd');
  late final _mtmd_get_output_embd = _mtmd_get_output_embdPtr
      .asFunction<ffi.Pointer<ffi.Float> Function(ffi.Pointer<mtmd_context>)>();

  /// //////////////////////////////////////
  ffi.Pointer<mtmd_input_chunks> mtmd_test_create_input_chunks() {
    return _mtmd_test_create_input_chunks();
  }

  late final _mtmd_test_create_input_chunksPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<mtmd_input_chunks> Function()>>(
          'mtmd_test_create_input_chunks');
  late final _mtmd_test_create_input_chunks = _mtmd_test_create_input_chunksPtr
      .asFunction<ffi.Pointer<mtmd_input_chunks> Function()>();
}

typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;
typedef __darwin_intptr_t = ffi.Long;
typedef Dart__darwin_intptr_t = int;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef Dart__darwin_natural_t = int;
typedef __darwin_ct_rune_t = ffi.Int;
typedef Dart__darwin_ct_rune_t = int;

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

typedef __darwin_mbstate_t = __mbstate_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;
typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef __darwin_va_list = __builtin_va_list;
typedef __darwin_wchar_t = ffi.Int;
typedef Dart__darwin_wchar_t = int;
typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wint_t = ffi.Int;
typedef Dart__darwin_wint_t = int;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef Dart__darwin_clock_t = int;
typedef __darwin_socklen_t = __uint32_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_blkcnt_t = __int64_t;
typedef __darwin_blksize_t = __int32_t;
typedef __darwin_dev_t = __int32_t;
typedef __darwin_fsblkcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsblkcnt_t = int;
typedef __darwin_fsfilcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsfilcnt_t = int;
typedef __darwin_gid_t = __uint32_t;
typedef __darwin_id_t = __uint32_t;
typedef __darwin_ino64_t = __uint64_t;
typedef __darwin_ino_t = __darwin_ino64_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mode_t = __uint16_t;
typedef __darwin_off_t = __int64_t;
typedef __darwin_pid_t = __int32_t;
typedef __darwin_sigset_t = __uint32_t;
typedef __darwin_suseconds_t = __int32_t;
typedef __darwin_uid_t = __uint32_t;
typedef __darwin_useconds_t = __uint32_t;

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;
typedef __darwin_pthread_cond_t = _opaque_pthread_cond_t;
typedef __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef Dart__darwin_pthread_key_t = int;
typedef __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
typedef __darwin_pthread_once_t = _opaque_pthread_once_t;
typedef __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef __darwin_nl_item = ffi.Int;
typedef Dart__darwin_nl_item = int;
typedef __darwin_wctrans_t = ffi.Int;
typedef Dart__darwin_wctrans_t = int;
typedef __darwin_wctype_t = __uint32_t;
typedef u_int8_t = ffi.UnsignedChar;
typedef Dartu_int8_t = int;
typedef u_int16_t = ffi.UnsignedShort;
typedef Dartu_int16_t = int;
typedef u_int32_t = ffi.UnsignedInt;
typedef Dartu_int32_t = int;
typedef u_int64_t = ffi.UnsignedLongLong;
typedef Dartu_int64_t = int;
typedef register_t = ffi.Int64;
typedef Dartregister_t = int;
typedef user_addr_t = u_int64_t;
typedef user_size_t = u_int64_t;
typedef user_ssize_t = ffi.Int64;
typedef Dartuser_ssize_t = int;
typedef user_long_t = ffi.Int64;
typedef Dartuser_long_t = int;
typedef user_ulong_t = u_int64_t;
typedef user_time_t = ffi.Int64;
typedef Dartuser_time_t = int;
typedef user_off_t = ffi.Int64;
typedef Dartuser_off_t = int;
typedef syscall_arg_t = u_int64_t;
typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef rsize_t = __darwin_size_t;
typedef wint_t = __darwin_wint_t;
typedef int_least8_t = ffi.Int8;
typedef Dartint_least8_t = int;
typedef int_least16_t = ffi.Int16;
typedef Dartint_least16_t = int;
typedef int_least32_t = ffi.Int32;
typedef Dartint_least32_t = int;
typedef int_least64_t = ffi.Int64;
typedef Dartint_least64_t = int;
typedef uint_least8_t = ffi.Uint8;
typedef Dartuint_least8_t = int;
typedef uint_least16_t = ffi.Uint16;
typedef Dartuint_least16_t = int;
typedef uint_least32_t = ffi.Uint32;
typedef Dartuint_least32_t = int;
typedef uint_least64_t = ffi.Uint64;
typedef Dartuint_least64_t = int;
typedef int_fast8_t = ffi.Int8;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Int16;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Int32;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.Int64;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.Uint8;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.Uint16;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.Uint32;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.Uint64;
typedef Dartuint_fast64_t = int;
typedef intmax_t = ffi.Long;
typedef Dartintmax_t = int;
typedef uintmax_t = ffi.UnsignedLong;
typedef Dartuintmax_t = int;
typedef va_list = __darwin_va_list;
typedef fpos_t = __darwin_off_t;

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef FILE = __sFILE;
typedef off_t = __darwin_off_t;
typedef ssize_t = __darwin_ssize_t;
typedef ggml_abort_callback_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Char> error_message);
typedef Dartggml_abort_callback_tFunction = void Function(
    ffi.Pointer<ffi.Char> error_message);
typedef ggml_abort_callback_t
    = ffi.Pointer<ffi.NativeFunction<ggml_abort_callback_tFunction>>;

enum ggml_status {
  GGML_STATUS_ALLOC_FAILED(-2),
  GGML_STATUS_FAILED(-1),
  GGML_STATUS_SUCCESS(0),
  GGML_STATUS_ABORTED(1);

  final int value;
  const ggml_status(this.value);

  static ggml_status fromValue(int value) => switch (value) {
        -2 => GGML_STATUS_ALLOC_FAILED,
        -1 => GGML_STATUS_FAILED,
        0 => GGML_STATUS_SUCCESS,
        1 => GGML_STATUS_ABORTED,
        _ => throw ArgumentError('Unknown value for ggml_status: $value'),
      };
}

typedef ggml_fp16_t = ffi.Uint16;
typedef Dartggml_fp16_t = int;

final class ggml_bf16_t extends ffi.Struct {
  @ffi.Uint16()
  external int bits;
}

final class ggml_object extends ffi.Opaque {}

final class ggml_context extends ffi.Opaque {}

final class ggml_cgraph extends ffi.Opaque {}

enum ggml_type {
  GGML_TYPE_F32(0),
  GGML_TYPE_F16(1),
  GGML_TYPE_Q4_0(2),
  GGML_TYPE_Q4_1(3),
  GGML_TYPE_Q5_0(6),
  GGML_TYPE_Q5_1(7),
  GGML_TYPE_Q8_0(8),
  GGML_TYPE_Q8_1(9),
  GGML_TYPE_Q2_K(10),
  GGML_TYPE_Q3_K(11),
  GGML_TYPE_Q4_K(12),
  GGML_TYPE_Q5_K(13),
  GGML_TYPE_Q6_K(14),
  GGML_TYPE_Q8_K(15),
  GGML_TYPE_IQ2_XXS(16),
  GGML_TYPE_IQ2_XS(17),
  GGML_TYPE_IQ3_XXS(18),
  GGML_TYPE_IQ1_S(19),
  GGML_TYPE_IQ4_NL(20),
  GGML_TYPE_IQ3_S(21),
  GGML_TYPE_IQ2_S(22),
  GGML_TYPE_IQ4_XS(23),
  GGML_TYPE_I8(24),
  GGML_TYPE_I16(25),
  GGML_TYPE_I32(26),
  GGML_TYPE_I64(27),
  GGML_TYPE_F64(28),
  GGML_TYPE_IQ1_M(29),
  GGML_TYPE_BF16(30),
  GGML_TYPE_TQ1_0(34),
  GGML_TYPE_TQ2_0(35),
  GGML_TYPE_COUNT(39);

  final int value;
  const ggml_type(this.value);

  static ggml_type fromValue(int value) => switch (value) {
        0 => GGML_TYPE_F32,
        1 => GGML_TYPE_F16,
        2 => GGML_TYPE_Q4_0,
        3 => GGML_TYPE_Q4_1,
        6 => GGML_TYPE_Q5_0,
        7 => GGML_TYPE_Q5_1,
        8 => GGML_TYPE_Q8_0,
        9 => GGML_TYPE_Q8_1,
        10 => GGML_TYPE_Q2_K,
        11 => GGML_TYPE_Q3_K,
        12 => GGML_TYPE_Q4_K,
        13 => GGML_TYPE_Q5_K,
        14 => GGML_TYPE_Q6_K,
        15 => GGML_TYPE_Q8_K,
        16 => GGML_TYPE_IQ2_XXS,
        17 => GGML_TYPE_IQ2_XS,
        18 => GGML_TYPE_IQ3_XXS,
        19 => GGML_TYPE_IQ1_S,
        20 => GGML_TYPE_IQ4_NL,
        21 => GGML_TYPE_IQ3_S,
        22 => GGML_TYPE_IQ2_S,
        23 => GGML_TYPE_IQ4_XS,
        24 => GGML_TYPE_I8,
        25 => GGML_TYPE_I16,
        26 => GGML_TYPE_I32,
        27 => GGML_TYPE_I64,
        28 => GGML_TYPE_F64,
        29 => GGML_TYPE_IQ1_M,
        30 => GGML_TYPE_BF16,
        34 => GGML_TYPE_TQ1_0,
        35 => GGML_TYPE_TQ2_0,
        39 => GGML_TYPE_COUNT,
        _ => throw ArgumentError('Unknown value for ggml_type: $value'),
      };
}

enum ggml_prec {
  GGML_PREC_DEFAULT(0),
  GGML_PREC_F32(10);

  final int value;
  const ggml_prec(this.value);

  static ggml_prec fromValue(int value) => switch (value) {
        0 => GGML_PREC_DEFAULT,
        10 => GGML_PREC_F32,
        _ => throw ArgumentError('Unknown value for ggml_prec: $value'),
      };
}

enum ggml_ftype {
  GGML_FTYPE_UNKNOWN(-1),
  GGML_FTYPE_ALL_F32(0),
  GGML_FTYPE_MOSTLY_F16(1),
  GGML_FTYPE_MOSTLY_Q4_0(2),
  GGML_FTYPE_MOSTLY_Q4_1(3),
  GGML_FTYPE_MOSTLY_Q4_1_SOME_F16(4),
  GGML_FTYPE_MOSTLY_Q8_0(7),
  GGML_FTYPE_MOSTLY_Q5_0(8),
  GGML_FTYPE_MOSTLY_Q5_1(9),
  GGML_FTYPE_MOSTLY_Q2_K(10),
  GGML_FTYPE_MOSTLY_Q3_K(11),
  GGML_FTYPE_MOSTLY_Q4_K(12),
  GGML_FTYPE_MOSTLY_Q5_K(13),
  GGML_FTYPE_MOSTLY_Q6_K(14),
  GGML_FTYPE_MOSTLY_IQ2_XXS(15),
  GGML_FTYPE_MOSTLY_IQ2_XS(16),
  GGML_FTYPE_MOSTLY_IQ3_XXS(17),
  GGML_FTYPE_MOSTLY_IQ1_S(18),
  GGML_FTYPE_MOSTLY_IQ4_NL(19),
  GGML_FTYPE_MOSTLY_IQ3_S(20),
  GGML_FTYPE_MOSTLY_IQ2_S(21),
  GGML_FTYPE_MOSTLY_IQ4_XS(22),
  GGML_FTYPE_MOSTLY_IQ1_M(23),
  GGML_FTYPE_MOSTLY_BF16(24);

  final int value;
  const ggml_ftype(this.value);

  static ggml_ftype fromValue(int value) => switch (value) {
        -1 => GGML_FTYPE_UNKNOWN,
        0 => GGML_FTYPE_ALL_F32,
        1 => GGML_FTYPE_MOSTLY_F16,
        2 => GGML_FTYPE_MOSTLY_Q4_0,
        3 => GGML_FTYPE_MOSTLY_Q4_1,
        4 => GGML_FTYPE_MOSTLY_Q4_1_SOME_F16,
        7 => GGML_FTYPE_MOSTLY_Q8_0,
        8 => GGML_FTYPE_MOSTLY_Q5_0,
        9 => GGML_FTYPE_MOSTLY_Q5_1,
        10 => GGML_FTYPE_MOSTLY_Q2_K,
        11 => GGML_FTYPE_MOSTLY_Q3_K,
        12 => GGML_FTYPE_MOSTLY_Q4_K,
        13 => GGML_FTYPE_MOSTLY_Q5_K,
        14 => GGML_FTYPE_MOSTLY_Q6_K,
        15 => GGML_FTYPE_MOSTLY_IQ2_XXS,
        16 => GGML_FTYPE_MOSTLY_IQ2_XS,
        17 => GGML_FTYPE_MOSTLY_IQ3_XXS,
        18 => GGML_FTYPE_MOSTLY_IQ1_S,
        19 => GGML_FTYPE_MOSTLY_IQ4_NL,
        20 => GGML_FTYPE_MOSTLY_IQ3_S,
        21 => GGML_FTYPE_MOSTLY_IQ2_S,
        22 => GGML_FTYPE_MOSTLY_IQ4_XS,
        23 => GGML_FTYPE_MOSTLY_IQ1_M,
        24 => GGML_FTYPE_MOSTLY_BF16,
        _ => throw ArgumentError('Unknown value for ggml_ftype: $value'),
      };
}

enum ggml_op {
  GGML_OP_NONE(0),
  GGML_OP_DUP(1),
  GGML_OP_ADD(2),
  GGML_OP_ADD1(3),
  GGML_OP_ACC(4),
  GGML_OP_SUB(5),
  GGML_OP_MUL(6),
  GGML_OP_DIV(7),
  GGML_OP_SQR(8),
  GGML_OP_SQRT(9),
  GGML_OP_LOG(10),
  GGML_OP_SIN(11),
  GGML_OP_COS(12),
  GGML_OP_SUM(13),
  GGML_OP_SUM_ROWS(14),
  GGML_OP_MEAN(15),
  GGML_OP_ARGMAX(16),
  GGML_OP_COUNT_EQUAL(17),
  GGML_OP_REPEAT(18),
  GGML_OP_REPEAT_BACK(19),
  GGML_OP_CONCAT(20),
  GGML_OP_SILU_BACK(21),
  GGML_OP_NORM(22),
  GGML_OP_RMS_NORM(23),
  GGML_OP_RMS_NORM_BACK(24),
  GGML_OP_GROUP_NORM(25),
  GGML_OP_L2_NORM(26),
  GGML_OP_MUL_MAT(27),
  GGML_OP_MUL_MAT_ID(28),
  GGML_OP_OUT_PROD(29),
  GGML_OP_SCALE(30),
  GGML_OP_SET(31),
  GGML_OP_CPY(32),
  GGML_OP_CONT(33),
  GGML_OP_RESHAPE(34),
  GGML_OP_VIEW(35),
  GGML_OP_PERMUTE(36),
  GGML_OP_TRANSPOSE(37),
  GGML_OP_GET_ROWS(38),
  GGML_OP_GET_ROWS_BACK(39),
  GGML_OP_SET_ROWS(40),
  GGML_OP_DIAG(41),
  GGML_OP_DIAG_MASK_INF(42),
  GGML_OP_DIAG_MASK_ZERO(43),
  GGML_OP_SOFT_MAX(44),
  GGML_OP_SOFT_MAX_BACK(45),
  GGML_OP_ROPE(46),
  GGML_OP_ROPE_BACK(47),
  GGML_OP_CLAMP(48),
  GGML_OP_CONV_TRANSPOSE_1D(49),
  GGML_OP_IM2COL(50),
  GGML_OP_IM2COL_BACK(51),
  GGML_OP_CONV_2D(52),
  GGML_OP_CONV_2D_DW(53),
  GGML_OP_CONV_TRANSPOSE_2D(54),
  GGML_OP_POOL_1D(55),
  GGML_OP_POOL_2D(56),
  GGML_OP_POOL_2D_BACK(57),
  GGML_OP_UPSCALE(58),
  GGML_OP_PAD(59),
  GGML_OP_PAD_REFLECT_1D(60),
  GGML_OP_ROLL(61),
  GGML_OP_ARANGE(62),
  GGML_OP_TIMESTEP_EMBEDDING(63),
  GGML_OP_ARGSORT(64),
  GGML_OP_LEAKY_RELU(65),
  GGML_OP_FLASH_ATTN_EXT(66),
  GGML_OP_FLASH_ATTN_BACK(67),
  GGML_OP_SSM_CONV(68),
  GGML_OP_SSM_SCAN(69),
  GGML_OP_WIN_PART(70),
  GGML_OP_WIN_UNPART(71),
  GGML_OP_GET_REL_POS(72),
  GGML_OP_ADD_REL_POS(73),
  GGML_OP_RWKV_WKV6(74),
  GGML_OP_GATED_LINEAR_ATTN(75),
  GGML_OP_RWKV_WKV7(76),
  GGML_OP_UNARY(77),
  GGML_OP_MAP_CUSTOM1(78),
  GGML_OP_MAP_CUSTOM2(79),
  GGML_OP_MAP_CUSTOM3(80),
  GGML_OP_CUSTOM(81),
  GGML_OP_CROSS_ENTROPY_LOSS(82),
  GGML_OP_CROSS_ENTROPY_LOSS_BACK(83),
  GGML_OP_OPT_STEP_ADAMW(84),
  GGML_OP_GLU(85),
  GGML_OP_COUNT(86);

  final int value;
  const ggml_op(this.value);

  static ggml_op fromValue(int value) => switch (value) {
        0 => GGML_OP_NONE,
        1 => GGML_OP_DUP,
        2 => GGML_OP_ADD,
        3 => GGML_OP_ADD1,
        4 => GGML_OP_ACC,
        5 => GGML_OP_SUB,
        6 => GGML_OP_MUL,
        7 => GGML_OP_DIV,
        8 => GGML_OP_SQR,
        9 => GGML_OP_SQRT,
        10 => GGML_OP_LOG,
        11 => GGML_OP_SIN,
        12 => GGML_OP_COS,
        13 => GGML_OP_SUM,
        14 => GGML_OP_SUM_ROWS,
        15 => GGML_OP_MEAN,
        16 => GGML_OP_ARGMAX,
        17 => GGML_OP_COUNT_EQUAL,
        18 => GGML_OP_REPEAT,
        19 => GGML_OP_REPEAT_BACK,
        20 => GGML_OP_CONCAT,
        21 => GGML_OP_SILU_BACK,
        22 => GGML_OP_NORM,
        23 => GGML_OP_RMS_NORM,
        24 => GGML_OP_RMS_NORM_BACK,
        25 => GGML_OP_GROUP_NORM,
        26 => GGML_OP_L2_NORM,
        27 => GGML_OP_MUL_MAT,
        28 => GGML_OP_MUL_MAT_ID,
        29 => GGML_OP_OUT_PROD,
        30 => GGML_OP_SCALE,
        31 => GGML_OP_SET,
        32 => GGML_OP_CPY,
        33 => GGML_OP_CONT,
        34 => GGML_OP_RESHAPE,
        35 => GGML_OP_VIEW,
        36 => GGML_OP_PERMUTE,
        37 => GGML_OP_TRANSPOSE,
        38 => GGML_OP_GET_ROWS,
        39 => GGML_OP_GET_ROWS_BACK,
        40 => GGML_OP_SET_ROWS,
        41 => GGML_OP_DIAG,
        42 => GGML_OP_DIAG_MASK_INF,
        43 => GGML_OP_DIAG_MASK_ZERO,
        44 => GGML_OP_SOFT_MAX,
        45 => GGML_OP_SOFT_MAX_BACK,
        46 => GGML_OP_ROPE,
        47 => GGML_OP_ROPE_BACK,
        48 => GGML_OP_CLAMP,
        49 => GGML_OP_CONV_TRANSPOSE_1D,
        50 => GGML_OP_IM2COL,
        51 => GGML_OP_IM2COL_BACK,
        52 => GGML_OP_CONV_2D,
        53 => GGML_OP_CONV_2D_DW,
        54 => GGML_OP_CONV_TRANSPOSE_2D,
        55 => GGML_OP_POOL_1D,
        56 => GGML_OP_POOL_2D,
        57 => GGML_OP_POOL_2D_BACK,
        58 => GGML_OP_UPSCALE,
        59 => GGML_OP_PAD,
        60 => GGML_OP_PAD_REFLECT_1D,
        61 => GGML_OP_ROLL,
        62 => GGML_OP_ARANGE,
        63 => GGML_OP_TIMESTEP_EMBEDDING,
        64 => GGML_OP_ARGSORT,
        65 => GGML_OP_LEAKY_RELU,
        66 => GGML_OP_FLASH_ATTN_EXT,
        67 => GGML_OP_FLASH_ATTN_BACK,
        68 => GGML_OP_SSM_CONV,
        69 => GGML_OP_SSM_SCAN,
        70 => GGML_OP_WIN_PART,
        71 => GGML_OP_WIN_UNPART,
        72 => GGML_OP_GET_REL_POS,
        73 => GGML_OP_ADD_REL_POS,
        74 => GGML_OP_RWKV_WKV6,
        75 => GGML_OP_GATED_LINEAR_ATTN,
        76 => GGML_OP_RWKV_WKV7,
        77 => GGML_OP_UNARY,
        78 => GGML_OP_MAP_CUSTOM1,
        79 => GGML_OP_MAP_CUSTOM2,
        80 => GGML_OP_MAP_CUSTOM3,
        81 => GGML_OP_CUSTOM,
        82 => GGML_OP_CROSS_ENTROPY_LOSS,
        83 => GGML_OP_CROSS_ENTROPY_LOSS_BACK,
        84 => GGML_OP_OPT_STEP_ADAMW,
        85 => GGML_OP_GLU,
        86 => GGML_OP_COUNT,
        _ => throw ArgumentError('Unknown value for ggml_op: $value'),
      };
}

enum ggml_unary_op {
  GGML_UNARY_OP_ABS(0),
  GGML_UNARY_OP_SGN(1),
  GGML_UNARY_OP_NEG(2),
  GGML_UNARY_OP_STEP(3),
  GGML_UNARY_OP_TANH(4),
  GGML_UNARY_OP_ELU(5),
  GGML_UNARY_OP_RELU(6),
  GGML_UNARY_OP_SIGMOID(7),
  GGML_UNARY_OP_GELU(8),
  GGML_UNARY_OP_GELU_QUICK(9),
  GGML_UNARY_OP_SILU(10),
  GGML_UNARY_OP_HARDSWISH(11),
  GGML_UNARY_OP_HARDSIGMOID(12),
  GGML_UNARY_OP_EXP(13),
  GGML_UNARY_OP_GELU_ERF(14),
  GGML_UNARY_OP_COUNT(15);

  final int value;
  const ggml_unary_op(this.value);

  static ggml_unary_op fromValue(int value) => switch (value) {
        0 => GGML_UNARY_OP_ABS,
        1 => GGML_UNARY_OP_SGN,
        2 => GGML_UNARY_OP_NEG,
        3 => GGML_UNARY_OP_STEP,
        4 => GGML_UNARY_OP_TANH,
        5 => GGML_UNARY_OP_ELU,
        6 => GGML_UNARY_OP_RELU,
        7 => GGML_UNARY_OP_SIGMOID,
        8 => GGML_UNARY_OP_GELU,
        9 => GGML_UNARY_OP_GELU_QUICK,
        10 => GGML_UNARY_OP_SILU,
        11 => GGML_UNARY_OP_HARDSWISH,
        12 => GGML_UNARY_OP_HARDSIGMOID,
        13 => GGML_UNARY_OP_EXP,
        14 => GGML_UNARY_OP_GELU_ERF,
        15 => GGML_UNARY_OP_COUNT,
        _ => throw ArgumentError('Unknown value for ggml_unary_op: $value'),
      };
}

enum ggml_glu_op {
  GGML_GLU_OP_REGLU(0),
  GGML_GLU_OP_GEGLU(1),
  GGML_GLU_OP_SWIGLU(2),
  GGML_GLU_OP_GEGLU_ERF(3),
  GGML_GLU_OP_GEGLU_QUICK(4),
  GGML_GLU_OP_COUNT(5);

  final int value;
  const ggml_glu_op(this.value);

  static ggml_glu_op fromValue(int value) => switch (value) {
        0 => GGML_GLU_OP_REGLU,
        1 => GGML_GLU_OP_GEGLU,
        2 => GGML_GLU_OP_SWIGLU,
        3 => GGML_GLU_OP_GEGLU_ERF,
        4 => GGML_GLU_OP_GEGLU_QUICK,
        5 => GGML_GLU_OP_COUNT,
        _ => throw ArgumentError('Unknown value for ggml_glu_op: $value'),
      };
}

enum ggml_object_type {
  GGML_OBJECT_TYPE_TENSOR(0),
  GGML_OBJECT_TYPE_GRAPH(1),
  GGML_OBJECT_TYPE_WORK_BUFFER(2);

  final int value;
  const ggml_object_type(this.value);

  static ggml_object_type fromValue(int value) => switch (value) {
        0 => GGML_OBJECT_TYPE_TENSOR,
        1 => GGML_OBJECT_TYPE_GRAPH,
        2 => GGML_OBJECT_TYPE_WORK_BUFFER,
        _ => throw ArgumentError('Unknown value for ggml_object_type: $value'),
      };
}

enum ggml_log_level {
  GGML_LOG_LEVEL_NONE(0),
  GGML_LOG_LEVEL_DEBUG(1),
  GGML_LOG_LEVEL_INFO(2),
  GGML_LOG_LEVEL_WARN(3),
  GGML_LOG_LEVEL_ERROR(4),
  GGML_LOG_LEVEL_CONT(5);

  final int value;
  const ggml_log_level(this.value);

  static ggml_log_level fromValue(int value) => switch (value) {
        0 => GGML_LOG_LEVEL_NONE,
        1 => GGML_LOG_LEVEL_DEBUG,
        2 => GGML_LOG_LEVEL_INFO,
        3 => GGML_LOG_LEVEL_WARN,
        4 => GGML_LOG_LEVEL_ERROR,
        5 => GGML_LOG_LEVEL_CONT,
        _ => throw ArgumentError('Unknown value for ggml_log_level: $value'),
      };
}

enum ggml_tensor_flag {
  GGML_TENSOR_FLAG_INPUT(1),
  GGML_TENSOR_FLAG_OUTPUT(2),
  GGML_TENSOR_FLAG_PARAM(4),
  GGML_TENSOR_FLAG_LOSS(8);

  final int value;
  const ggml_tensor_flag(this.value);

  static ggml_tensor_flag fromValue(int value) => switch (value) {
        1 => GGML_TENSOR_FLAG_INPUT,
        2 => GGML_TENSOR_FLAG_OUTPUT,
        4 => GGML_TENSOR_FLAG_PARAM,
        8 => GGML_TENSOR_FLAG_LOSS,
        _ => throw ArgumentError('Unknown value for ggml_tensor_flag: $value'),
      };
}

final class ggml_init_params extends ffi.Struct {
  @ffi.Size()
  external int mem_size;

  external ffi.Pointer<ffi.Void> mem_buffer;

  @ffi.Bool()
  external bool no_alloc;
}

final class ggml_backend_buffer extends ffi.Opaque {}

final class ggml_tensor extends ffi.Struct {
  @ffi.UnsignedInt()
  external int typeAsInt;

  ggml_type get type => ggml_type.fromValue(typeAsInt);

  external ffi.Pointer<ggml_backend_buffer> buffer;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int64> ne;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Size> nb;

  @ffi.UnsignedInt()
  external int opAsInt;

  ggml_op get op => ggml_op.fromValue(opAsInt);

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int32> op_params;

  @ffi.Int32()
  external int flags;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Pointer<ggml_tensor>> src;

  external ffi.Pointer<ggml_tensor> view_src;

  @ffi.Size()
  external int view_offs;

  external ffi.Pointer<ffi.Void> data;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> name;

  external ffi.Pointer<ffi.Void> extra;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> padding;
}

typedef ggml_abort_callbackFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Void> data);
typedef Dartggml_abort_callbackFunction = bool Function(
    ffi.Pointer<ffi.Void> data);
typedef ggml_abort_callback
    = ffi.Pointer<ffi.NativeFunction<ggml_abort_callbackFunction>>;
typedef ggml_guid_t = ffi.Pointer<ffi.Pointer<ffi.Uint8>>;

enum ggml_op_pool {
  GGML_OP_POOL_MAX(0),
  GGML_OP_POOL_AVG(1),
  GGML_OP_POOL_COUNT(2);

  final int value;
  const ggml_op_pool(this.value);

  static ggml_op_pool fromValue(int value) => switch (value) {
        0 => GGML_OP_POOL_MAX,
        1 => GGML_OP_POOL_AVG,
        2 => GGML_OP_POOL_COUNT,
        _ => throw ArgumentError('Unknown value for ggml_op_pool: $value'),
      };
}

enum ggml_scale_mode {
  GGML_SCALE_MODE_NEAREST(0),
  GGML_SCALE_MODE_BILINEAR(1),
  GGML_SCALE_MODE_COUNT(2);

  final int value;
  const ggml_scale_mode(this.value);

  static ggml_scale_mode fromValue(int value) => switch (value) {
        0 => GGML_SCALE_MODE_NEAREST,
        1 => GGML_SCALE_MODE_BILINEAR,
        2 => GGML_SCALE_MODE_COUNT,
        _ => throw ArgumentError('Unknown value for ggml_scale_mode: $value'),
      };
}

enum ggml_scale_flag {
  GGML_SCALE_FLAG_ALIGN_CORNERS(256);

  final int value;
  const ggml_scale_flag(this.value);

  static ggml_scale_flag fromValue(int value) => switch (value) {
        256 => GGML_SCALE_FLAG_ALIGN_CORNERS,
        _ => throw ArgumentError('Unknown value for ggml_scale_flag: $value'),
      };
}

enum ggml_sort_order {
  GGML_SORT_ORDER_ASC(0),
  GGML_SORT_ORDER_DESC(1);

  final int value;
  const ggml_sort_order(this.value);

  static ggml_sort_order fromValue(int value) => switch (value) {
        0 => GGML_SORT_ORDER_ASC,
        1 => GGML_SORT_ORDER_DESC,
        _ => throw ArgumentError('Unknown value for ggml_sort_order: $value'),
      };
}

typedef ggml_custom1_op_tFunction = ffi.Void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    ffi.Int ith,
    ffi.Int nth,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartggml_custom1_op_tFunction = void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    int ith,
    int nth,
    ffi.Pointer<ffi.Void> userdata);
typedef ggml_custom1_op_t
    = ffi.Pointer<ffi.NativeFunction<ggml_custom1_op_tFunction>>;
typedef ggml_custom2_op_tFunction = ffi.Void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Int ith,
    ffi.Int nth,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartggml_custom2_op_tFunction = void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    int ith,
    int nth,
    ffi.Pointer<ffi.Void> userdata);
typedef ggml_custom2_op_t
    = ffi.Pointer<ffi.NativeFunction<ggml_custom2_op_tFunction>>;
typedef ggml_custom3_op_tFunction = ffi.Void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    ffi.Int ith,
    ffi.Int nth,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartggml_custom3_op_tFunction = void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Pointer<ggml_tensor> a,
    ffi.Pointer<ggml_tensor> b,
    ffi.Pointer<ggml_tensor> c,
    int ith,
    int nth,
    ffi.Pointer<ffi.Void> userdata);
typedef ggml_custom3_op_t
    = ffi.Pointer<ffi.NativeFunction<ggml_custom3_op_tFunction>>;
typedef ggml_custom_op_tFunction = ffi.Void Function(
    ffi.Pointer<ggml_tensor> dst,
    ffi.Int ith,
    ffi.Int nth,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartggml_custom_op_tFunction = void Function(
    ffi.Pointer<ggml_tensor> dst,
    int ith,
    int nth,
    ffi.Pointer<ffi.Void> userdata);
typedef ggml_custom_op_t
    = ffi.Pointer<ffi.NativeFunction<ggml_custom_op_tFunction>>;
typedef ggml_log_callbackFunction = ffi.Void Function(ffi.UnsignedInt level,
    ffi.Pointer<ffi.Char> text, ffi.Pointer<ffi.Void> user_data);
typedef Dartggml_log_callbackFunction = void Function(ggml_log_level level,
    ffi.Pointer<ffi.Char> text, ffi.Pointer<ffi.Void> user_data);
typedef ggml_log_callback
    = ffi.Pointer<ffi.NativeFunction<ggml_log_callbackFunction>>;
typedef ggml_to_float_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> x, ffi.Pointer<ffi.Float> y, ffi.Int64 k);
typedef Dartggml_to_float_tFunction = void Function(
    ffi.Pointer<ffi.Void> x, ffi.Pointer<ffi.Float> y, int k);
typedef ggml_to_float_t
    = ffi.Pointer<ffi.NativeFunction<ggml_to_float_tFunction>>;
typedef ggml_from_float_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Float> x, ffi.Pointer<ffi.Void> y, ffi.Int64 k);
typedef Dartggml_from_float_tFunction = void Function(
    ffi.Pointer<ffi.Float> x, ffi.Pointer<ffi.Void> y, int k);
typedef ggml_from_float_t
    = ffi.Pointer<ffi.NativeFunction<ggml_from_float_tFunction>>;

final class ggml_type_traits extends ffi.Struct {
  external ffi.Pointer<ffi.Char> type_name;

  @ffi.Int64()
  external int blck_size;

  @ffi.Int64()
  external int blck_size_interleave;

  @ffi.Size()
  external int type_size;

  @ffi.Bool()
  external bool is_quantized;

  external ggml_to_float_t to_float;

  external ggml_from_float_t from_float_ref;
}

enum ggml_sched_priority {
  GGML_SCHED_PRIO_LOW(-1),
  GGML_SCHED_PRIO_NORMAL(0),
  GGML_SCHED_PRIO_MEDIUM(1),
  GGML_SCHED_PRIO_HIGH(2),
  GGML_SCHED_PRIO_REALTIME(3);

  final int value;
  const ggml_sched_priority(this.value);

  static ggml_sched_priority fromValue(int value) => switch (value) {
        -1 => GGML_SCHED_PRIO_LOW,
        0 => GGML_SCHED_PRIO_NORMAL,
        1 => GGML_SCHED_PRIO_MEDIUM,
        2 => GGML_SCHED_PRIO_HIGH,
        3 => GGML_SCHED_PRIO_REALTIME,
        _ =>
          throw ArgumentError('Unknown value for ggml_sched_priority: $value'),
      };
}

final class ggml_threadpool_params extends ffi.Struct {
  @ffi.Array.multi([512])
  external ffi.Array<ffi.Bool> cpumask;

  @ffi.Int()
  external int n_threads;

  @ffi.Int()
  external int prioAsInt;

  ggml_sched_priority get prio => ggml_sched_priority.fromValue(prioAsInt);

  @ffi.Uint32()
  external int poll;

  @ffi.Bool()
  external bool strict_cpu;

  @ffi.Bool()
  external bool paused;
}

final class ggml_threadpool extends ffi.Opaque {}

typedef ggml_threadpool_t = ffi.Pointer<ggml_threadpool>;

final class ggml_backend_buffer_type extends ffi.Opaque {}

typedef ggml_backend_buffer_type_t = ffi.Pointer<ggml_backend_buffer_type>;
typedef ggml_backend_buffer_t = ffi.Pointer<ggml_backend_buffer>;

final class ggml_backend extends ffi.Opaque {}

typedef ggml_backend_t = ffi.Pointer<ggml_backend>;

final class ggml_tallocr extends ffi.Struct {
  external ggml_backend_buffer_t buffer;

  external ffi.Pointer<ffi.Void> base;

  @ffi.Size()
  external int alignment;

  @ffi.Size()
  external int offset;
}

final class ggml_gallocr extends ffi.Opaque {}

typedef ggml_gallocr_t = ffi.Pointer<ggml_gallocr>;

final class ggml_backend_event extends ffi.Opaque {}

typedef ggml_backend_event_t = ffi.Pointer<ggml_backend_event>;
typedef ggml_backend_graph_plan_t = ffi.Pointer<ffi.Void>;

final class ggml_backend_reg extends ffi.Opaque {}

typedef ggml_backend_reg_t = ffi.Pointer<ggml_backend_reg>;

final class ggml_backend_device extends ffi.Opaque {}

typedef ggml_backend_dev_t = ffi.Pointer<ggml_backend_device>;

enum ggml_backend_buffer_usage {
  GGML_BACKEND_BUFFER_USAGE_ANY(0),
  GGML_BACKEND_BUFFER_USAGE_WEIGHTS(1),
  GGML_BACKEND_BUFFER_USAGE_COMPUTE(2);

  final int value;
  const ggml_backend_buffer_usage(this.value);

  static ggml_backend_buffer_usage fromValue(int value) => switch (value) {
        0 => GGML_BACKEND_BUFFER_USAGE_ANY,
        1 => GGML_BACKEND_BUFFER_USAGE_WEIGHTS,
        2 => GGML_BACKEND_BUFFER_USAGE_COMPUTE,
        _ => throw ArgumentError(
            'Unknown value for ggml_backend_buffer_usage: $value'),
      };
}

enum ggml_backend_dev_type {
  GGML_BACKEND_DEVICE_TYPE_CPU(0),
  GGML_BACKEND_DEVICE_TYPE_GPU(1),
  GGML_BACKEND_DEVICE_TYPE_ACCEL(2);

  final int value;
  const ggml_backend_dev_type(this.value);

  static ggml_backend_dev_type fromValue(int value) => switch (value) {
        0 => GGML_BACKEND_DEVICE_TYPE_CPU,
        1 => GGML_BACKEND_DEVICE_TYPE_GPU,
        2 => GGML_BACKEND_DEVICE_TYPE_ACCEL,
        _ => throw ArgumentError(
            'Unknown value for ggml_backend_dev_type: $value'),
      };
}

final class ggml_backend_dev_caps extends ffi.Struct {
  @ffi.Bool()
  external bool async$;

  @ffi.Bool()
  external bool host_buffer;

  @ffi.Bool()
  external bool buffer_from_host_ptr;

  @ffi.Bool()
  external bool events;
}

final class ggml_backend_dev_props extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  @ffi.Size()
  external int memory_free;

  @ffi.Size()
  external int memory_total;

  @ffi.UnsignedInt()
  external int typeAsInt;

  ggml_backend_dev_type get type => ggml_backend_dev_type.fromValue(typeAsInt);

  external ggml_backend_dev_caps caps;
}

typedef ggml_backend_split_buffer_type_tFunction = ggml_backend_buffer_type_t
    Function(ffi.Int main_device, ffi.Pointer<ffi.Float> tensor_split);
typedef Dartggml_backend_split_buffer_type_tFunction
    = ggml_backend_buffer_type_t Function(
        int main_device, ffi.Pointer<ffi.Float> tensor_split);
typedef ggml_backend_split_buffer_type_t
    = ffi.Pointer<ffi.NativeFunction<ggml_backend_split_buffer_type_tFunction>>;
typedef ggml_backend_set_n_threads_tFunction = ffi.Void Function(
    ggml_backend_t backend, ffi.Int n_threads);
typedef Dartggml_backend_set_n_threads_tFunction = void Function(
    ggml_backend_t backend, int n_threads);
typedef ggml_backend_set_n_threads_t
    = ffi.Pointer<ffi.NativeFunction<ggml_backend_set_n_threads_tFunction>>;
typedef ggml_backend_dev_get_extra_bufts_tFunction
    = ffi.Pointer<ggml_backend_buffer_type_t> Function(
        ggml_backend_dev_t device);
typedef ggml_backend_dev_get_extra_bufts_t = ffi
    .Pointer<ffi.NativeFunction<ggml_backend_dev_get_extra_bufts_tFunction>>;
typedef ggml_backend_set_abort_callback_tFunction = ffi.Void Function(
    ggml_backend_t backend,
    ggml_abort_callback abort_callback,
    ffi.Pointer<ffi.Void> abort_callback_data);
typedef Dartggml_backend_set_abort_callback_tFunction = void Function(
    ggml_backend_t backend,
    ggml_abort_callback abort_callback,
    ffi.Pointer<ffi.Void> abort_callback_data);
typedef ggml_backend_set_abort_callback_t = ffi
    .Pointer<ffi.NativeFunction<ggml_backend_set_abort_callback_tFunction>>;

final class ggml_backend_feature extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> value;
}

typedef ggml_backend_get_features_tFunction = ffi.Pointer<ggml_backend_feature>
    Function(ggml_backend_reg_t reg);
typedef ggml_backend_get_features_t
    = ffi.Pointer<ffi.NativeFunction<ggml_backend_get_features_tFunction>>;

final class ggml_backend_sched extends ffi.Opaque {}

typedef ggml_backend_sched_t = ffi.Pointer<ggml_backend_sched>;
typedef ggml_backend_sched_eval_callbackFunction = ffi.Bool Function(
    ffi.Pointer<ggml_tensor> t, ffi.Bool ask, ffi.Pointer<ffi.Void> user_data);
typedef Dartggml_backend_sched_eval_callbackFunction = bool Function(
    ffi.Pointer<ggml_tensor> t, bool ask, ffi.Pointer<ffi.Void> user_data);
typedef ggml_backend_sched_eval_callback
    = ffi.Pointer<ffi.NativeFunction<ggml_backend_sched_eval_callbackFunction>>;

final class ggml_backend_graph_copy extends ffi.Struct {
  external ggml_backend_buffer_t buffer;

  external ffi.Pointer<ggml_context> ctx_allocated;

  external ffi.Pointer<ggml_context> ctx_unallocated;

  external ffi.Pointer<ggml_cgraph> graph;
}

typedef ggml_backend_eval_callbackFunction = ffi.Bool Function(
    ffi.Int node_index,
    ffi.Pointer<ggml_tensor> t1,
    ffi.Pointer<ggml_tensor> t2,
    ffi.Pointer<ffi.Void> user_data);
typedef Dartggml_backend_eval_callbackFunction = bool Function(
    int node_index,
    ffi.Pointer<ggml_tensor> t1,
    ffi.Pointer<ggml_tensor> t2,
    ffi.Pointer<ffi.Void> user_data);
typedef ggml_backend_eval_callback
    = ffi.Pointer<ffi.NativeFunction<ggml_backend_eval_callbackFunction>>;

final class ggml_cplan extends ffi.Struct {
  @ffi.Size()
  external int work_size;

  external ffi.Pointer<ffi.Uint8> work_data;

  @ffi.Int()
  external int n_threads;

  external ffi.Pointer<ggml_threadpool> threadpool;

  external ggml_abort_callback abort_callback;

  external ffi.Pointer<ffi.Void> abort_callback_data;
}

enum ggml_numa_strategy {
  GGML_NUMA_STRATEGY_DISABLED(0),
  GGML_NUMA_STRATEGY_DISTRIBUTE(1),
  GGML_NUMA_STRATEGY_ISOLATE(2),
  GGML_NUMA_STRATEGY_NUMACTL(3),
  GGML_NUMA_STRATEGY_MIRROR(4),
  GGML_NUMA_STRATEGY_COUNT(5);

  final int value;
  const ggml_numa_strategy(this.value);

  static ggml_numa_strategy fromValue(int value) => switch (value) {
        0 => GGML_NUMA_STRATEGY_DISABLED,
        1 => GGML_NUMA_STRATEGY_DISTRIBUTE,
        2 => GGML_NUMA_STRATEGY_ISOLATE,
        3 => GGML_NUMA_STRATEGY_NUMACTL,
        4 => GGML_NUMA_STRATEGY_MIRROR,
        5 => GGML_NUMA_STRATEGY_COUNT,
        _ =>
          throw ArgumentError('Unknown value for ggml_numa_strategy: $value'),
      };
}

typedef ggml_vec_dot_tFunction = ffi.Void Function(
    ffi.Int n,
    ffi.Pointer<ffi.Float> s,
    ffi.Size bs,
    ffi.Pointer<ffi.Void> x,
    ffi.Size bx,
    ffi.Pointer<ffi.Void> y,
    ffi.Size by,
    ffi.Int nrc);
typedef Dartggml_vec_dot_tFunction = void Function(
    int n,
    ffi.Pointer<ffi.Float> s,
    int bs,
    ffi.Pointer<ffi.Void> x,
    int bx,
    ffi.Pointer<ffi.Void> y,
    int by,
    int nrc);
typedef ggml_vec_dot_t
    = ffi.Pointer<ffi.NativeFunction<ggml_vec_dot_tFunction>>;

final class ggml_type_traits_cpu extends ffi.Struct {
  external ggml_from_float_t from_float;

  external ggml_vec_dot_t vec_dot;

  @ffi.UnsignedInt()
  external int vec_dot_typeAsInt;

  ggml_type get vec_dot_type => ggml_type.fromValue(vec_dot_typeAsInt);

  @ffi.Int64()
  external int nrows;
}

final class ggml_opt_dataset extends ffi.Opaque {}

final class ggml_opt_context extends ffi.Opaque {}

final class ggml_opt_result extends ffi.Opaque {}

typedef ggml_opt_dataset_t = ffi.Pointer<ggml_opt_dataset>;
typedef ggml_opt_context_t = ffi.Pointer<ggml_opt_context>;
typedef ggml_opt_result_t = ffi.Pointer<ggml_opt_result>;

enum ggml_opt_loss_type {
  GGML_OPT_LOSS_TYPE_MEAN(0),
  GGML_OPT_LOSS_TYPE_SUM(1),
  GGML_OPT_LOSS_TYPE_CROSS_ENTROPY(2),
  GGML_OPT_LOSS_TYPE_MEAN_SQUARED_ERROR(3);

  final int value;
  const ggml_opt_loss_type(this.value);

  static ggml_opt_loss_type fromValue(int value) => switch (value) {
        0 => GGML_OPT_LOSS_TYPE_MEAN,
        1 => GGML_OPT_LOSS_TYPE_SUM,
        2 => GGML_OPT_LOSS_TYPE_CROSS_ENTROPY,
        3 => GGML_OPT_LOSS_TYPE_MEAN_SQUARED_ERROR,
        _ =>
          throw ArgumentError('Unknown value for ggml_opt_loss_type: $value'),
      };
}

enum ggml_opt_build_type {
  GGML_OPT_BUILD_TYPE_FORWARD(10),
  GGML_OPT_BUILD_TYPE_GRAD(20),
  GGML_OPT_BUILD_TYPE_OPT(30);

  final int value;
  const ggml_opt_build_type(this.value);

  static ggml_opt_build_type fromValue(int value) => switch (value) {
        10 => GGML_OPT_BUILD_TYPE_FORWARD,
        20 => GGML_OPT_BUILD_TYPE_GRAD,
        30 => GGML_OPT_BUILD_TYPE_OPT,
        _ =>
          throw ArgumentError('Unknown value for ggml_opt_build_type: $value'),
      };
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.Float()
  external double alpha;

  @ffi.Float()
  external double beta1;

  @ffi.Float()
  external double beta2;

  @ffi.Float()
  external double eps;

  @ffi.Float()
  external double wd;
}

final class ggml_opt_optimizer_params extends ffi.Struct {
  external UnnamedStruct1 adamw;
}

typedef ggml_opt_get_optimizer_paramsFunction = ggml_opt_optimizer_params
    Function(ffi.Pointer<ffi.Void> userdata);
typedef ggml_opt_get_optimizer_params
    = ffi.Pointer<ffi.NativeFunction<ggml_opt_get_optimizer_paramsFunction>>;

final class ggml_opt_params extends ffi.Struct {
  external ggml_backend_sched_t backend_sched;

  external ffi.Pointer<ggml_context> ctx_compute;

  external ffi.Pointer<ggml_tensor> inputs;

  external ffi.Pointer<ggml_tensor> outputs;

  @ffi.UnsignedInt()
  external int loss_typeAsInt;

  ggml_opt_loss_type get loss_type =>
      ggml_opt_loss_type.fromValue(loss_typeAsInt);

  @ffi.UnsignedInt()
  external int build_typeAsInt;

  ggml_opt_build_type get build_type =>
      ggml_opt_build_type.fromValue(build_typeAsInt);

  @ffi.Int32()
  external int opt_period;

  external ggml_opt_get_optimizer_params get_opt_pars;

  external ffi.Pointer<ffi.Void> get_opt_pars_ud;
}

typedef ggml_opt_epoch_callbackFunction = ffi.Void Function(
    ffi.Bool train,
    ggml_opt_context_t opt_ctx,
    ggml_opt_dataset_t dataset,
    ggml_opt_result_t result,
    ffi.Int64 ibatch,
    ffi.Int64 ibatch_max,
    ffi.Int64 t_start_us);
typedef Dartggml_opt_epoch_callbackFunction = void Function(
    bool train,
    ggml_opt_context_t opt_ctx,
    ggml_opt_dataset_t dataset,
    ggml_opt_result_t result,
    int ibatch,
    int ibatch_max,
    int t_start_us);
typedef ggml_opt_epoch_callback
    = ffi.Pointer<ffi.NativeFunction<ggml_opt_epoch_callbackFunction>>;

final class llama_vocab extends ffi.Opaque {}

final class llama_model extends ffi.Opaque {}

final class llama_context extends ffi.Opaque {}

typedef llama_token = ffi.Int32;
typedef Dartllama_token = int;

final class llama_token_data extends ffi.Struct {
  @llama_token()
  external int id;

  @ffi.Float()
  external double logit;

  @ffi.Float()
  external double p;
}

final class llama_token_data_array extends ffi.Struct {
  external ffi.Pointer<llama_token_data> data;

  @ffi.Size()
  external int size;

  @ffi.Int64()
  external int selected;

  @ffi.Bool()
  external bool sorted;
}

final class llama_sampler_i extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<llama_sampler> smpl)>>
      name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<llama_sampler> smpl, llama_token token)>> accept;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_sampler> smpl,
              ffi.Pointer<llama_token_data_array> cur_p)>> apply;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<llama_sampler> smpl)>>
      reset;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Pointer<llama_sampler> smpl)>> clone;

  external ffi.Pointer<
      ffi
      .NativeFunction<ffi.Void Function(ffi.Pointer<llama_sampler> smpl)>> free;
}

typedef llama_sampler_context_t = ffi.Pointer<ffi.Void>;

final class llama_sampler extends ffi.Struct {
  external ffi.Pointer<llama_sampler_i> iface;

  external llama_sampler_context_t ctx;
}

final class llama_memory_i extends ffi.Opaque {}

typedef llama_memory_t = ffi.Pointer<llama_memory_i>;

final class llama_kv_cache extends ffi.Opaque {}

typedef llama_pos = ffi.Int32;
typedef Dartllama_pos = int;
typedef llama_seq_id = ffi.Int32;
typedef Dartllama_seq_id = int;

enum llama_vocab_type {
  LLAMA_VOCAB_TYPE_NONE(0),
  LLAMA_VOCAB_TYPE_SPM(1),
  LLAMA_VOCAB_TYPE_BPE(2),
  LLAMA_VOCAB_TYPE_WPM(3),
  LLAMA_VOCAB_TYPE_UGM(4),
  LLAMA_VOCAB_TYPE_RWKV(5);

  final int value;
  const llama_vocab_type(this.value);

  static llama_vocab_type fromValue(int value) => switch (value) {
        0 => LLAMA_VOCAB_TYPE_NONE,
        1 => LLAMA_VOCAB_TYPE_SPM,
        2 => LLAMA_VOCAB_TYPE_BPE,
        3 => LLAMA_VOCAB_TYPE_WPM,
        4 => LLAMA_VOCAB_TYPE_UGM,
        5 => LLAMA_VOCAB_TYPE_RWKV,
        _ => throw ArgumentError('Unknown value for llama_vocab_type: $value'),
      };
}

enum llama_vocab_pre_type {
  LLAMA_VOCAB_PRE_TYPE_DEFAULT(0),
  LLAMA_VOCAB_PRE_TYPE_LLAMA3(1),
  LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM(2),
  LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER(3),
  LLAMA_VOCAB_PRE_TYPE_FALCON(4),
  LLAMA_VOCAB_PRE_TYPE_MPT(5),
  LLAMA_VOCAB_PRE_TYPE_STARCODER(6),
  LLAMA_VOCAB_PRE_TYPE_GPT2(7),
  LLAMA_VOCAB_PRE_TYPE_REFACT(8),
  LLAMA_VOCAB_PRE_TYPE_COMMAND_R(9),
  LLAMA_VOCAB_PRE_TYPE_STABLELM2(10),
  LLAMA_VOCAB_PRE_TYPE_QWEN2(11),
  LLAMA_VOCAB_PRE_TYPE_OLMO(12),
  LLAMA_VOCAB_PRE_TYPE_DBRX(13),
  LLAMA_VOCAB_PRE_TYPE_SMAUG(14),
  LLAMA_VOCAB_PRE_TYPE_PORO(15),
  LLAMA_VOCAB_PRE_TYPE_CHATGLM3(16),
  LLAMA_VOCAB_PRE_TYPE_CHATGLM4(17),
  LLAMA_VOCAB_PRE_TYPE_VIKING(18),
  LLAMA_VOCAB_PRE_TYPE_JAIS(19),
  LLAMA_VOCAB_PRE_TYPE_TEKKEN(20),
  LLAMA_VOCAB_PRE_TYPE_SMOLLM(21),
  LLAMA_VOCAB_PRE_TYPE_CODESHELL(22),
  LLAMA_VOCAB_PRE_TYPE_BLOOM(23),
  LLAMA_VOCAB_PRE_TYPE_GPT3_FINNISH(24),
  LLAMA_VOCAB_PRE_TYPE_EXAONE(25),
  LLAMA_VOCAB_PRE_TYPE_CHAMELEON(26),
  LLAMA_VOCAB_PRE_TYPE_MINERVA(27),
  LLAMA_VOCAB_PRE_TYPE_DEEPSEEK3_LLM(28),
  LLAMA_VOCAB_PRE_TYPE_GPT4O(29),
  LLAMA_VOCAB_PRE_TYPE_SUPERBPE(30),
  LLAMA_VOCAB_PRE_TYPE_TRILLION(31),
  LLAMA_VOCAB_PRE_TYPE_BAILINGMOE(32),
  LLAMA_VOCAB_PRE_TYPE_LLAMA4(33),
  LLAMA_VOCAB_PRE_TYPE_PIXTRAL(34),
  LLAMA_VOCAB_PRE_TYPE_SEED_CODER(35),
  LLAMA_VOCAB_PRE_TYPE_HUNYUAN(36);

  final int value;
  const llama_vocab_pre_type(this.value);

  static llama_vocab_pre_type fromValue(int value) => switch (value) {
        0 => LLAMA_VOCAB_PRE_TYPE_DEFAULT,
        1 => LLAMA_VOCAB_PRE_TYPE_LLAMA3,
        2 => LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM,
        3 => LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER,
        4 => LLAMA_VOCAB_PRE_TYPE_FALCON,
        5 => LLAMA_VOCAB_PRE_TYPE_MPT,
        6 => LLAMA_VOCAB_PRE_TYPE_STARCODER,
        7 => LLAMA_VOCAB_PRE_TYPE_GPT2,
        8 => LLAMA_VOCAB_PRE_TYPE_REFACT,
        9 => LLAMA_VOCAB_PRE_TYPE_COMMAND_R,
        10 => LLAMA_VOCAB_PRE_TYPE_STABLELM2,
        11 => LLAMA_VOCAB_PRE_TYPE_QWEN2,
        12 => LLAMA_VOCAB_PRE_TYPE_OLMO,
        13 => LLAMA_VOCAB_PRE_TYPE_DBRX,
        14 => LLAMA_VOCAB_PRE_TYPE_SMAUG,
        15 => LLAMA_VOCAB_PRE_TYPE_PORO,
        16 => LLAMA_VOCAB_PRE_TYPE_CHATGLM3,
        17 => LLAMA_VOCAB_PRE_TYPE_CHATGLM4,
        18 => LLAMA_VOCAB_PRE_TYPE_VIKING,
        19 => LLAMA_VOCAB_PRE_TYPE_JAIS,
        20 => LLAMA_VOCAB_PRE_TYPE_TEKKEN,
        21 => LLAMA_VOCAB_PRE_TYPE_SMOLLM,
        22 => LLAMA_VOCAB_PRE_TYPE_CODESHELL,
        23 => LLAMA_VOCAB_PRE_TYPE_BLOOM,
        24 => LLAMA_VOCAB_PRE_TYPE_GPT3_FINNISH,
        25 => LLAMA_VOCAB_PRE_TYPE_EXAONE,
        26 => LLAMA_VOCAB_PRE_TYPE_CHAMELEON,
        27 => LLAMA_VOCAB_PRE_TYPE_MINERVA,
        28 => LLAMA_VOCAB_PRE_TYPE_DEEPSEEK3_LLM,
        29 => LLAMA_VOCAB_PRE_TYPE_GPT4O,
        30 => LLAMA_VOCAB_PRE_TYPE_SUPERBPE,
        31 => LLAMA_VOCAB_PRE_TYPE_TRILLION,
        32 => LLAMA_VOCAB_PRE_TYPE_BAILINGMOE,
        33 => LLAMA_VOCAB_PRE_TYPE_LLAMA4,
        34 => LLAMA_VOCAB_PRE_TYPE_PIXTRAL,
        35 => LLAMA_VOCAB_PRE_TYPE_SEED_CODER,
        36 => LLAMA_VOCAB_PRE_TYPE_HUNYUAN,
        _ =>
          throw ArgumentError('Unknown value for llama_vocab_pre_type: $value'),
      };
}

enum llama_rope_type {
  LLAMA_ROPE_TYPE_NONE(-1),
  LLAMA_ROPE_TYPE_NORM(0),
  LLAMA_ROPE_TYPE_NEOX(2),
  LLAMA_ROPE_TYPE_MROPE(8),
  LLAMA_ROPE_TYPE_VISION(24);

  final int value;
  const llama_rope_type(this.value);

  static llama_rope_type fromValue(int value) => switch (value) {
        -1 => LLAMA_ROPE_TYPE_NONE,
        0 => LLAMA_ROPE_TYPE_NORM,
        2 => LLAMA_ROPE_TYPE_NEOX,
        8 => LLAMA_ROPE_TYPE_MROPE,
        24 => LLAMA_ROPE_TYPE_VISION,
        _ => throw ArgumentError('Unknown value for llama_rope_type: $value'),
      };
}

enum llama_token_type {
  LLAMA_TOKEN_TYPE_UNDEFINED(0),
  LLAMA_TOKEN_TYPE_NORMAL(1),
  LLAMA_TOKEN_TYPE_UNKNOWN(2),
  LLAMA_TOKEN_TYPE_CONTROL(3),
  LLAMA_TOKEN_TYPE_USER_DEFINED(4),
  LLAMA_TOKEN_TYPE_UNUSED(5),
  LLAMA_TOKEN_TYPE_BYTE(6);

  final int value;
  const llama_token_type(this.value);

  static llama_token_type fromValue(int value) => switch (value) {
        0 => LLAMA_TOKEN_TYPE_UNDEFINED,
        1 => LLAMA_TOKEN_TYPE_NORMAL,
        2 => LLAMA_TOKEN_TYPE_UNKNOWN,
        3 => LLAMA_TOKEN_TYPE_CONTROL,
        4 => LLAMA_TOKEN_TYPE_USER_DEFINED,
        5 => LLAMA_TOKEN_TYPE_UNUSED,
        6 => LLAMA_TOKEN_TYPE_BYTE,
        _ => throw ArgumentError('Unknown value for llama_token_type: $value'),
      };
}

enum llama_token_attr {
  LLAMA_TOKEN_ATTR_UNDEFINED(0),
  LLAMA_TOKEN_ATTR_UNKNOWN(1),
  LLAMA_TOKEN_ATTR_UNUSED(2),
  LLAMA_TOKEN_ATTR_NORMAL(4),
  LLAMA_TOKEN_ATTR_CONTROL(8),
  LLAMA_TOKEN_ATTR_USER_DEFINED(16),
  LLAMA_TOKEN_ATTR_BYTE(32),
  LLAMA_TOKEN_ATTR_NORMALIZED(64),
  LLAMA_TOKEN_ATTR_LSTRIP(128),
  LLAMA_TOKEN_ATTR_RSTRIP(256),
  LLAMA_TOKEN_ATTR_SINGLE_WORD(512);

  final int value;
  const llama_token_attr(this.value);

  static llama_token_attr fromValue(int value) => switch (value) {
        0 => LLAMA_TOKEN_ATTR_UNDEFINED,
        1 => LLAMA_TOKEN_ATTR_UNKNOWN,
        2 => LLAMA_TOKEN_ATTR_UNUSED,
        4 => LLAMA_TOKEN_ATTR_NORMAL,
        8 => LLAMA_TOKEN_ATTR_CONTROL,
        16 => LLAMA_TOKEN_ATTR_USER_DEFINED,
        32 => LLAMA_TOKEN_ATTR_BYTE,
        64 => LLAMA_TOKEN_ATTR_NORMALIZED,
        128 => LLAMA_TOKEN_ATTR_LSTRIP,
        256 => LLAMA_TOKEN_ATTR_RSTRIP,
        512 => LLAMA_TOKEN_ATTR_SINGLE_WORD,
        _ => throw ArgumentError('Unknown value for llama_token_attr: $value'),
      };
}

enum llama_ftype {
  LLAMA_FTYPE_ALL_F32(0),
  LLAMA_FTYPE_MOSTLY_F16(1),
  LLAMA_FTYPE_MOSTLY_Q4_0(2),
  LLAMA_FTYPE_MOSTLY_Q4_1(3),
  LLAMA_FTYPE_MOSTLY_Q8_0(7),
  LLAMA_FTYPE_MOSTLY_Q5_0(8),
  LLAMA_FTYPE_MOSTLY_Q5_1(9),
  LLAMA_FTYPE_MOSTLY_Q2_K(10),
  LLAMA_FTYPE_MOSTLY_Q3_K_S(11),
  LLAMA_FTYPE_MOSTLY_Q3_K_M(12),
  LLAMA_FTYPE_MOSTLY_Q3_K_L(13),
  LLAMA_FTYPE_MOSTLY_Q4_K_S(14),
  LLAMA_FTYPE_MOSTLY_Q4_K_M(15),
  LLAMA_FTYPE_MOSTLY_Q5_K_S(16),
  LLAMA_FTYPE_MOSTLY_Q5_K_M(17),
  LLAMA_FTYPE_MOSTLY_Q6_K(18),
  LLAMA_FTYPE_MOSTLY_IQ2_XXS(19),
  LLAMA_FTYPE_MOSTLY_IQ2_XS(20),
  LLAMA_FTYPE_MOSTLY_Q2_K_S(21),
  LLAMA_FTYPE_MOSTLY_IQ3_XS(22),
  LLAMA_FTYPE_MOSTLY_IQ3_XXS(23),
  LLAMA_FTYPE_MOSTLY_IQ1_S(24),
  LLAMA_FTYPE_MOSTLY_IQ4_NL(25),
  LLAMA_FTYPE_MOSTLY_IQ3_S(26),
  LLAMA_FTYPE_MOSTLY_IQ3_M(27),
  LLAMA_FTYPE_MOSTLY_IQ2_S(28),
  LLAMA_FTYPE_MOSTLY_IQ2_M(29),
  LLAMA_FTYPE_MOSTLY_IQ4_XS(30),
  LLAMA_FTYPE_MOSTLY_IQ1_M(31),
  LLAMA_FTYPE_MOSTLY_BF16(32),
  LLAMA_FTYPE_MOSTLY_TQ1_0(36),
  LLAMA_FTYPE_MOSTLY_TQ2_0(37),
  LLAMA_FTYPE_GUESSED(1024);

  final int value;
  const llama_ftype(this.value);

  static llama_ftype fromValue(int value) => switch (value) {
        0 => LLAMA_FTYPE_ALL_F32,
        1 => LLAMA_FTYPE_MOSTLY_F16,
        2 => LLAMA_FTYPE_MOSTLY_Q4_0,
        3 => LLAMA_FTYPE_MOSTLY_Q4_1,
        7 => LLAMA_FTYPE_MOSTLY_Q8_0,
        8 => LLAMA_FTYPE_MOSTLY_Q5_0,
        9 => LLAMA_FTYPE_MOSTLY_Q5_1,
        10 => LLAMA_FTYPE_MOSTLY_Q2_K,
        11 => LLAMA_FTYPE_MOSTLY_Q3_K_S,
        12 => LLAMA_FTYPE_MOSTLY_Q3_K_M,
        13 => LLAMA_FTYPE_MOSTLY_Q3_K_L,
        14 => LLAMA_FTYPE_MOSTLY_Q4_K_S,
        15 => LLAMA_FTYPE_MOSTLY_Q4_K_M,
        16 => LLAMA_FTYPE_MOSTLY_Q5_K_S,
        17 => LLAMA_FTYPE_MOSTLY_Q5_K_M,
        18 => LLAMA_FTYPE_MOSTLY_Q6_K,
        19 => LLAMA_FTYPE_MOSTLY_IQ2_XXS,
        20 => LLAMA_FTYPE_MOSTLY_IQ2_XS,
        21 => LLAMA_FTYPE_MOSTLY_Q2_K_S,
        22 => LLAMA_FTYPE_MOSTLY_IQ3_XS,
        23 => LLAMA_FTYPE_MOSTLY_IQ3_XXS,
        24 => LLAMA_FTYPE_MOSTLY_IQ1_S,
        25 => LLAMA_FTYPE_MOSTLY_IQ4_NL,
        26 => LLAMA_FTYPE_MOSTLY_IQ3_S,
        27 => LLAMA_FTYPE_MOSTLY_IQ3_M,
        28 => LLAMA_FTYPE_MOSTLY_IQ2_S,
        29 => LLAMA_FTYPE_MOSTLY_IQ2_M,
        30 => LLAMA_FTYPE_MOSTLY_IQ4_XS,
        31 => LLAMA_FTYPE_MOSTLY_IQ1_M,
        32 => LLAMA_FTYPE_MOSTLY_BF16,
        36 => LLAMA_FTYPE_MOSTLY_TQ1_0,
        37 => LLAMA_FTYPE_MOSTLY_TQ2_0,
        1024 => LLAMA_FTYPE_GUESSED,
        _ => throw ArgumentError('Unknown value for llama_ftype: $value'),
      };
}

enum llama_rope_scaling_type {
  LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED(-1),
  LLAMA_ROPE_SCALING_TYPE_NONE(0),
  LLAMA_ROPE_SCALING_TYPE_LINEAR(1),
  LLAMA_ROPE_SCALING_TYPE_YARN(2),
  LLAMA_ROPE_SCALING_TYPE_LONGROPE(3);

  static const LLAMA_ROPE_SCALING_TYPE_MAX_VALUE =
      LLAMA_ROPE_SCALING_TYPE_LONGROPE;

  final int value;
  const llama_rope_scaling_type(this.value);

  static llama_rope_scaling_type fromValue(int value) => switch (value) {
        -1 => LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED,
        0 => LLAMA_ROPE_SCALING_TYPE_NONE,
        1 => LLAMA_ROPE_SCALING_TYPE_LINEAR,
        2 => LLAMA_ROPE_SCALING_TYPE_YARN,
        3 => LLAMA_ROPE_SCALING_TYPE_LONGROPE,
        _ => throw ArgumentError(
            'Unknown value for llama_rope_scaling_type: $value'),
      };

  @override
  String toString() {
    if (this == LLAMA_ROPE_SCALING_TYPE_LONGROPE)
      return "llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_LONGROPE, llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_MAX_VALUE";
    return super.toString();
  }
}

enum llama_pooling_type {
  LLAMA_POOLING_TYPE_UNSPECIFIED(-1),
  LLAMA_POOLING_TYPE_NONE(0),
  LLAMA_POOLING_TYPE_MEAN(1),
  LLAMA_POOLING_TYPE_CLS(2),
  LLAMA_POOLING_TYPE_LAST(3),
  LLAMA_POOLING_TYPE_RANK(4);

  final int value;
  const llama_pooling_type(this.value);

  static llama_pooling_type fromValue(int value) => switch (value) {
        -1 => LLAMA_POOLING_TYPE_UNSPECIFIED,
        0 => LLAMA_POOLING_TYPE_NONE,
        1 => LLAMA_POOLING_TYPE_MEAN,
        2 => LLAMA_POOLING_TYPE_CLS,
        3 => LLAMA_POOLING_TYPE_LAST,
        4 => LLAMA_POOLING_TYPE_RANK,
        _ =>
          throw ArgumentError('Unknown value for llama_pooling_type: $value'),
      };
}

enum llama_attention_type {
  LLAMA_ATTENTION_TYPE_UNSPECIFIED(-1),
  LLAMA_ATTENTION_TYPE_CAUSAL(0),
  LLAMA_ATTENTION_TYPE_NON_CAUSAL(1);

  final int value;
  const llama_attention_type(this.value);

  static llama_attention_type fromValue(int value) => switch (value) {
        -1 => LLAMA_ATTENTION_TYPE_UNSPECIFIED,
        0 => LLAMA_ATTENTION_TYPE_CAUSAL,
        1 => LLAMA_ATTENTION_TYPE_NON_CAUSAL,
        _ =>
          throw ArgumentError('Unknown value for llama_attention_type: $value'),
      };
}

enum llama_split_mode {
  LLAMA_SPLIT_MODE_NONE(0),
  LLAMA_SPLIT_MODE_LAYER(1),
  LLAMA_SPLIT_MODE_ROW(2);

  final int value;
  const llama_split_mode(this.value);

  static llama_split_mode fromValue(int value) => switch (value) {
        0 => LLAMA_SPLIT_MODE_NONE,
        1 => LLAMA_SPLIT_MODE_LAYER,
        2 => LLAMA_SPLIT_MODE_ROW,
        _ => throw ArgumentError('Unknown value for llama_split_mode: $value'),
      };
}

typedef llama_progress_callbackFunction = ffi.Bool Function(
    ffi.Float progress, ffi.Pointer<ffi.Void> user_data);
typedef Dartllama_progress_callbackFunction = bool Function(
    double progress, ffi.Pointer<ffi.Void> user_data);
typedef llama_progress_callback
    = ffi.Pointer<ffi.NativeFunction<llama_progress_callbackFunction>>;

final class llama_batch extends ffi.Struct {
  @ffi.Int32()
  external int n_tokens;

  external ffi.Pointer<llama_token> token;

  external ffi.Pointer<ffi.Float> embd;

  external ffi.Pointer<llama_pos> pos;

  external ffi.Pointer<ffi.Int32> n_seq_id;

  external ffi.Pointer<ffi.Pointer<llama_seq_id>> seq_id;

  external ffi.Pointer<ffi.Int8> logits;
}

enum llama_model_kv_override_type {
  LLAMA_KV_OVERRIDE_TYPE_INT(0),
  LLAMA_KV_OVERRIDE_TYPE_FLOAT(1),
  LLAMA_KV_OVERRIDE_TYPE_BOOL(2),
  LLAMA_KV_OVERRIDE_TYPE_STR(3);

  final int value;
  const llama_model_kv_override_type(this.value);

  static llama_model_kv_override_type fromValue(int value) => switch (value) {
        0 => LLAMA_KV_OVERRIDE_TYPE_INT,
        1 => LLAMA_KV_OVERRIDE_TYPE_FLOAT,
        2 => LLAMA_KV_OVERRIDE_TYPE_BOOL,
        3 => LLAMA_KV_OVERRIDE_TYPE_STR,
        _ => throw ArgumentError(
            'Unknown value for llama_model_kv_override_type: $value'),
      };
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Int64()
  external int val_i64;

  @ffi.Double()
  external double val_f64;

  @ffi.Bool()
  external bool val_bool;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> val_str;
}

final class llama_model_kv_override extends ffi.Struct {
  @ffi.UnsignedInt()
  external int tagAsInt;

  llama_model_kv_override_type get tag =>
      llama_model_kv_override_type.fromValue(tagAsInt);

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> key;

  external UnnamedUnion1 unnamed;
}

final class llama_model_tensor_buft_override extends ffi.Struct {
  external ffi.Pointer<ffi.Char> pattern;

  external ggml_backend_buffer_type_t buft;
}

final class llama_model_params extends ffi.Struct {
  external ffi.Pointer<ggml_backend_dev_t> devices;

  external ffi.Pointer<llama_model_tensor_buft_override> tensor_buft_overrides;

  @ffi.Int32()
  external int n_gpu_layers;

  @ffi.UnsignedInt()
  external int split_modeAsInt;

  llama_split_mode get split_mode =>
      llama_split_mode.fromValue(split_modeAsInt);

  @ffi.Int32()
  external int main_gpu;

  external ffi.Pointer<ffi.Float> tensor_split;

  external llama_progress_callback progress_callback;

  external ffi.Pointer<ffi.Void> progress_callback_user_data;

  external ffi.Pointer<llama_model_kv_override> kv_overrides;

  @ffi.Bool()
  external bool vocab_only;

  @ffi.Bool()
  external bool use_mmap;

  @ffi.Bool()
  external bool use_mlock;

  @ffi.Bool()
  external bool check_tensors;
}

final class llama_context_params extends ffi.Struct {
  @ffi.Uint32()
  external int n_ctx;

  @ffi.Uint32()
  external int n_batch;

  @ffi.Uint32()
  external int n_ubatch;

  @ffi.Uint32()
  external int n_seq_max;

  @ffi.Int32()
  external int n_threads;

  @ffi.Int32()
  external int n_threads_batch;

  @ffi.Int()
  external int rope_scaling_typeAsInt;

  llama_rope_scaling_type get rope_scaling_type =>
      llama_rope_scaling_type.fromValue(rope_scaling_typeAsInt);

  @ffi.Int()
  external int pooling_typeAsInt;

  llama_pooling_type get pooling_type =>
      llama_pooling_type.fromValue(pooling_typeAsInt);

  @ffi.Int()
  external int attention_typeAsInt;

  llama_attention_type get attention_type =>
      llama_attention_type.fromValue(attention_typeAsInt);

  @ffi.Float()
  external double rope_freq_base;

  @ffi.Float()
  external double rope_freq_scale;

  @ffi.Float()
  external double yarn_ext_factor;

  @ffi.Float()
  external double yarn_attn_factor;

  @ffi.Float()
  external double yarn_beta_fast;

  @ffi.Float()
  external double yarn_beta_slow;

  @ffi.Uint32()
  external int yarn_orig_ctx;

  @ffi.Float()
  external double defrag_thold;

  external ggml_backend_sched_eval_callback cb_eval;

  external ffi.Pointer<ffi.Void> cb_eval_user_data;

  @ffi.UnsignedInt()
  external int type_kAsInt;

  ggml_type get type_k => ggml_type.fromValue(type_kAsInt);

  @ffi.UnsignedInt()
  external int type_vAsInt;

  ggml_type get type_v => ggml_type.fromValue(type_vAsInt);

  external ggml_abort_callback abort_callback;

  external ffi.Pointer<ffi.Void> abort_callback_data;

  @ffi.Bool()
  external bool embeddings;

  @ffi.Bool()
  external bool offload_kqv;

  @ffi.Bool()
  external bool flash_attn;

  @ffi.Bool()
  external bool no_perf;

  @ffi.Bool()
  external bool op_offload;

  @ffi.Bool()
  external bool swa_full;
}

final class llama_model_quantize_params extends ffi.Struct {
  @ffi.Int32()
  external int nthread;

  @ffi.UnsignedInt()
  external int ftypeAsInt;

  llama_ftype get ftype => llama_ftype.fromValue(ftypeAsInt);

  @ffi.UnsignedInt()
  external int output_tensor_typeAsInt;

  ggml_type get output_tensor_type =>
      ggml_type.fromValue(output_tensor_typeAsInt);

  @ffi.UnsignedInt()
  external int token_embedding_typeAsInt;

  ggml_type get token_embedding_type =>
      ggml_type.fromValue(token_embedding_typeAsInt);

  @ffi.Bool()
  external bool allow_requantize;

  @ffi.Bool()
  external bool quantize_output_tensor;

  @ffi.Bool()
  external bool only_copy;

  @ffi.Bool()
  external bool pure;

  @ffi.Bool()
  external bool keep_split;

  external ffi.Pointer<ffi.Void> imatrix;

  external ffi.Pointer<ffi.Void> kv_overrides;

  external ffi.Pointer<ffi.Void> tensor_types;

  external ffi.Pointer<ffi.Void> prune_layers;
}

final class llama_logit_bias extends ffi.Struct {
  @llama_token()
  external int token;

  @ffi.Float()
  external double bias;
}

final class llama_sampler_chain_params extends ffi.Struct {
  @ffi.Bool()
  external bool no_perf;
}

final class llama_chat_message extends ffi.Struct {
  external ffi.Pointer<ffi.Char> role;

  external ffi.Pointer<ffi.Char> content;
}

final class llama_adapter_lora extends ffi.Opaque {}

final class llama_perf_context_data extends ffi.Struct {
  @ffi.Double()
  external double t_start_ms;

  @ffi.Double()
  external double t_load_ms;

  @ffi.Double()
  external double t_p_eval_ms;

  @ffi.Double()
  external double t_eval_ms;

  @ffi.Int32()
  external int n_p_eval;

  @ffi.Int32()
  external int n_eval;
}

final class llama_perf_sampler_data extends ffi.Struct {
  @ffi.Double()
  external double t_sample_ms;

  @ffi.Int32()
  external int n_sample;
}

typedef llama_opt_param_filterFunction = ffi.Bool Function(
    ffi.Pointer<ggml_tensor> tensor, ffi.Pointer<ffi.Void> userdata);
typedef Dartllama_opt_param_filterFunction = bool Function(
    ffi.Pointer<ggml_tensor> tensor, ffi.Pointer<ffi.Void> userdata);
typedef llama_opt_param_filter
    = ffi.Pointer<ffi.NativeFunction<llama_opt_param_filterFunction>>;

final class llama_opt_params extends ffi.Struct {
  @ffi.Uint32()
  external int n_ctx_train;

  external llama_opt_param_filter param_filter;

  external ffi.Pointer<ffi.Void> param_filter_ud;

  external ggml_opt_get_optimizer_params get_opt_pars;

  external ffi.Pointer<ffi.Void> get_opt_pars_ud;
}

enum mtmd_input_chunk_type {
  MTMD_INPUT_CHUNK_TYPE_TEXT(0),
  MTMD_INPUT_CHUNK_TYPE_IMAGE(1),
  MTMD_INPUT_CHUNK_TYPE_AUDIO(2);

  final int value;
  const mtmd_input_chunk_type(this.value);

  static mtmd_input_chunk_type fromValue(int value) => switch (value) {
        0 => MTMD_INPUT_CHUNK_TYPE_TEXT,
        1 => MTMD_INPUT_CHUNK_TYPE_IMAGE,
        2 => MTMD_INPUT_CHUNK_TYPE_AUDIO,
        _ => throw ArgumentError(
            'Unknown value for mtmd_input_chunk_type: $value'),
      };
}

final class mtmd_context extends ffi.Opaque {}

final class mtmd_bitmap extends ffi.Opaque {}

final class mtmd_image_tokens extends ffi.Opaque {}

final class mtmd_input_chunk extends ffi.Opaque {}

final class mtmd_input_chunks extends ffi.Opaque {}

final class mtmd_input_text extends ffi.Struct {
  external ffi.Pointer<ffi.Char> text;

  @ffi.Bool()
  external bool add_special;

  @ffi.Bool()
  external bool parse_special;
}

final class mtmd_context_params extends ffi.Struct {
  @ffi.Bool()
  external bool use_gpu;

  @ffi.Bool()
  external bool print_timings;

  @ffi.Int()
  external int n_threads;

  @ffi.UnsignedInt()
  external int verbosityAsInt;

  ggml_log_level get verbosity => ggml_log_level.fromValue(verbosityAsInt);

  external ffi.Pointer<ffi.Char> image_marker;

  external ffi.Pointer<ffi.Char> media_marker;
}

const int __bool_true_false_are_defined = 1;

const int true$ = 1;

const int false$ = 0;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __has_bounds_safety_attributes = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION = 100000;

const int __API_TO_BE_DEPRECATED_KERNELKIT = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_13_7 = 130700;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __MAC_14_3 = 140300;

const int __MAC_14_4 = 140400;

const int __MAC_14_5 = 140500;

const int __MAC_14_6 = 140600;

const int __MAC_14_7 = 140700;

const int __MAC_15_0 = 150000;

const int __MAC_15_1 = 150100;

const int __MAC_15_2 = 150200;

const int __MAC_15_3 = 150300;

const int __MAC_15_4 = 150400;

const int __MAC_15_5 = 150500;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_15_7 = 150700;

const int __IPHONE_15_8 = 150800;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __IPHONE_17_3 = 170300;

const int __IPHONE_17_4 = 170400;

const int __IPHONE_17_5 = 170500;

const int __IPHONE_17_6 = 170600;

const int __IPHONE_17_7 = 170700;

const int __IPHONE_18_0 = 180000;

const int __IPHONE_18_1 = 180100;

const int __IPHONE_18_2 = 180200;

const int __IPHONE_18_3 = 180300;

const int __IPHONE_18_4 = 180400;

const int __IPHONE_18_5 = 180500;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_8_8 = 80800;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __WATCHOS_10_3 = 100300;

const int __WATCHOS_10_4 = 100400;

const int __WATCHOS_10_5 = 100500;

const int __WATCHOS_10_6 = 100600;

const int __WATCHOS_10_7 = 100700;

const int __WATCHOS_11_0 = 110000;

const int __WATCHOS_11_1 = 110100;

const int __WATCHOS_11_2 = 110200;

const int __WATCHOS_11_3 = 110300;

const int __WATCHOS_11_4 = 110400;

const int __WATCHOS_11_5 = 110500;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __TVOS_17_3 = 170300;

const int __TVOS_17_4 = 170400;

const int __TVOS_17_5 = 170500;

const int __TVOS_17_6 = 170600;

const int __TVOS_18_0 = 180000;

const int __TVOS_18_1 = 180100;

const int __TVOS_18_2 = 180200;

const int __TVOS_18_3 = 180300;

const int __TVOS_18_4 = 180400;

const int __TVOS_18_5 = 180500;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __BRIDGEOS_8_3 = 80300;

const int __BRIDGEOS_8_4 = 80400;

const int __BRIDGEOS_8_5 = 80500;

const int __BRIDGEOS_8_6 = 80600;

const int __BRIDGEOS_9_0 = 90000;

const int __BRIDGEOS_9_1 = 90100;

const int __BRIDGEOS_9_2 = 90200;

const int __BRIDGEOS_9_3 = 90300;

const int __BRIDGEOS_9_4 = 90400;

const int __BRIDGEOS_9_5 = 90500;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __DRIVERKIT_23_3 = 230300;

const int __DRIVERKIT_23_4 = 230400;

const int __DRIVERKIT_23_5 = 230500;

const int __DRIVERKIT_23_6 = 230600;

const int __DRIVERKIT_24_0 = 240000;

const int __DRIVERKIT_24_1 = 240100;

const int __DRIVERKIT_24_2 = 240200;

const int __DRIVERKIT_24_3 = 240300;

const int __DRIVERKIT_24_4 = 240400;

const int __DRIVERKIT_24_5 = 240500;

const int __VISIONOS_1_0 = 10000;

const int __VISIONOS_1_1 = 10100;

const int __VISIONOS_1_2 = 10200;

const int __VISIONOS_1_3 = 10300;

const int __VISIONOS_2_0 = 20000;

const int __VISIONOS_2_1 = 20100;

const int __VISIONOS_2_2 = 20200;

const int __VISIONOS_2_3 = 20300;

const int __VISIONOS_2_4 = 20400;

const int __VISIONOS_2_5 = 20500;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_13_7 = 130700;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int MAC_OS_VERSION_14_3 = 140300;

const int MAC_OS_VERSION_14_4 = 140400;

const int MAC_OS_VERSION_14_5 = 140500;

const int MAC_OS_VERSION_14_6 = 140600;

const int MAC_OS_VERSION_14_7 = 140700;

const int MAC_OS_VERSION_15_0 = 150000;

const int MAC_OS_VERSION_15_1 = 150100;

const int MAC_OS_VERSION_15_2 = 150200;

const int MAC_OS_VERSION_15_3 = 150300;

const int MAC_OS_VERSION_15_4 = 150400;

const int MAC_OS_VERSION_15_5 = 150500;

const int __AVAILABILITY_VERSIONS_VERSION_HASH = 93585900;

const String __AVAILABILITY_VERSIONS_VERSION_STRING = 'Local';

const String __AVAILABILITY_FILE = 'AvailabilityVersions.h';

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 150000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 150500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int L_ctermid = 1024;

const int GGML_FILE_MAGIC = 1734831468;

const int GGML_FILE_VERSION = 2;

const int GGML_QNT_VERSION = 2;

const int GGML_QNT_VERSION_FACTOR = 1000;

const int GGML_MAX_DIMS = 4;

const int GGML_MAX_PARAMS = 2048;

const int GGML_MAX_SRC = 10;

const int GGML_MAX_N_THREADS = 512;

const int GGML_MAX_OP_PARAMS = 64;

const int GGML_MAX_NAME = 64;

const int GGML_DEFAULT_N_THREADS = 4;

const int GGML_DEFAULT_GRAPH_SIZE = 2048;

const int GGML_MEM_ALIGN = 16;

const int GGML_EXIT_SUCCESS = 0;

const int GGML_EXIT_ABORTED = 1;

const int GGML_ROPE_TYPE_NEOX = 2;

const int GGML_ROPE_TYPE_MROPE = 8;

const int GGML_ROPE_TYPE_VISION = 24;

const int GGML_KQ_MASK_PAD = 64;

const int GGML_N_TASKS_MAX = -1;

const int LLAMA_DEFAULT_SEED = 4294967295;

const int LLAMA_TOKEN_NULL = -1;

const int LLAMA_FILE_MAGIC_GGLA = 1734831201;

const int LLAMA_FILE_MAGIC_GGSN = 1734833006;

const int LLAMA_FILE_MAGIC_GGSQ = 1734833009;

const int LLAMA_SESSION_MAGIC = 1734833006;

const int LLAMA_SESSION_VERSION = 9;

const int LLAMA_STATE_SEQ_MAGIC = 1734833009;

const int LLAMA_STATE_SEQ_VERSION = 2;

const String MTMD_DEFAULT_IMAGE_MARKER = '<__image__>';
